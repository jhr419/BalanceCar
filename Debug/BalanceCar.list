
BalanceCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fadc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d0  0800fc80  0800fc80  00010c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011450  08011450  000130ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011450  08011450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011458  08011458  000130ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011458  08011458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801145c  0801145c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08011460  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c84  200000ac  0801150c  000130ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d30  0801150c  00013d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000130ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023712  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005acc  00000000  00000000  000367ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  0003c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000162b  00000000  00000000  0003df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002007d  00000000  00000000  0003f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dbd2  00000000  00000000  0005f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acdb2  00000000  00000000  0008d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139f94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cdc  00000000  00000000  00139fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00141cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fc64 	.word	0x0800fc64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	0800fc64 	.word	0x0800fc64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f38:	4a30      	ldr	r2, [pc, #192]	@ (8000ffc <MX_ADC1_Init+0xd8>)
 8000f3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f52:	4b29      	ldr	r3, [pc, #164]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b25      	ldr	r3, [pc, #148]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f66:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <MX_ADC1_Init+0xdc>)
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f86:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000f88:	f001 fb92 	bl	80026b0 <HAL_ADC_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f92:	f000 fc9d 	bl	80018d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f96:	2309      	movs	r3, #9
 8000f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000fa8:	f001 fcca 	bl	8002940 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fb2:	f000 fc8d 	bl	80018d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000fc4:	f001 fcbc 	bl	8002940 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fce:	f000 fc7f 	bl	80018d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fd2:	230d      	movs	r3, #13
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_ADC1_Init+0xd4>)
 8000fe0:	f001 fcae 	bl	8002940 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000fea:	f000 fc71 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000c8 	.word	0x200000c8
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3b      	ldr	r2, [pc, #236]	@ (8001110 <HAL_ADC_MspInit+0x10c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d170      	bne.n	8001108 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b3a      	ldr	r3, [pc, #232]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001034:	6453      	str	r3, [r2, #68]	@ 0x44
 8001036:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a32      	ldr	r2, [pc, #200]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0x110>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800107a:	230c      	movs	r3, #12
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4822      	ldr	r0, [pc, #136]	@ (8001118 <HAL_ADC_MspInit+0x114>)
 800108e:	f002 fbe9 	bl	8003864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001092:	2302      	movs	r3, #2
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	481d      	ldr	r0, [pc, #116]	@ (800111c <HAL_ADC_MspInit+0x118>)
 80010a6:	f002 fbdd 	bl	8003864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <HAL_ADC_MspInit+0x120>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 80010ee:	f001 ffa9 	bl	8003044 <HAL_DMA_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80010f8:	f000 fbea 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38
 8001102:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <HAL_ADC_MspInit+0x11c>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020800 	.word	0x40020800
 800111c:	40020400 	.word	0x40020400
 8001120:	20000110 	.word	0x20000110
 8001124:	40026410 	.word	0x40026410

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <MX_DMA_Init+0xb8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a2a      	ldr	r2, [pc, #168]	@ (80011e0 <MX_DMA_Init+0xb8>)
 8001138:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <MX_DMA_Init+0xb8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_DMA_Init+0xb8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a23      	ldr	r2, [pc, #140]	@ (80011e0 <MX_DMA_Init+0xb8>)
 8001154:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <MX_DMA_Init+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	200b      	movs	r0, #11
 800116c:	f001 ff40 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001170:	200b      	movs	r0, #11
 8001172:	f001 ff59 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2010      	movs	r0, #16
 800117c:	f001 ff38 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001180:	2010      	movs	r0, #16
 8001182:	f001 ff51 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2105      	movs	r1, #5
 800118a:	2011      	movs	r0, #17
 800118c:	f001 ff30 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001190:	2011      	movs	r0, #17
 8001192:	f001 ff49 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	202f      	movs	r0, #47	@ 0x2f
 800119c:	f001 ff28 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80011a0:	202f      	movs	r0, #47	@ 0x2f
 80011a2:	f001 ff41 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2105      	movs	r1, #5
 80011aa:	2038      	movs	r0, #56	@ 0x38
 80011ac:	f001 ff20 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b0:	2038      	movs	r0, #56	@ 0x38
 80011b2:	f001 ff39 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2105      	movs	r1, #5
 80011ba:	2039      	movs	r0, #57	@ 0x39
 80011bc:	f001 ff18 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80011c0:	2039      	movs	r0, #57	@ 0x39
 80011c2:	f001 ff31 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2105      	movs	r1, #5
 80011ca:	2045      	movs	r0, #69	@ 0x45
 80011cc:	f001 ff10 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80011d0:	2045      	movs	r0, #69	@ 0x45
 80011d2:	f001 ff29 	bl	8003028 <HAL_NVIC_EnableIRQ>

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800

080011e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <vApplicationGetIdleTaskMemory+0x2c>)
 80011f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <vApplicationGetIdleTaskMemory+0x30>)
 80011fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000180 	.word	0x20000180
 8001214:	200001d4 	.word	0x200001d4

08001218 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b09c      	sub	sp, #112	@ 0x70
 800121c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800121e:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <MX_FREERTOS_Init+0xa4>)
 8001220:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001224:	461d      	mov	r5, r3
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f8a6 	bl	800938a <osThreadCreate>
 800123e:	4603      	mov	r3, r0
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <MX_FREERTOS_Init+0xa8>)
 8001242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(carTask, StartCarTask, osPriorityRealtime, 0, 256);
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_FREERTOS_Init+0xac>)
 8001246:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800124a:	461d      	mov	r5, r3
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	carTaskHandle = osThreadCreate(osThread(carTask), NULL);
 8001258:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f008 f893 	bl	800938a <osThreadCreate>
 8001264:	4603      	mov	r3, r0
 8001266:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <MX_FREERTOS_Init+0xb0>)
 8001268:	6013      	str	r3, [r2, #0]
  
	osThreadDef(oledTask, StartOledTask, osPriorityNormal, 0, 256);
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <MX_FREERTOS_Init+0xb4>)
 800126c:	f107 041c 	add.w	r4, r7, #28
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	oledTaskHandle = osThreadCreate(osThread(oledTask), NULL);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f008 f880 	bl	800938a <osThreadCreate>
 800128a:	4603      	mov	r3, r0
 800128c:	4a10      	ldr	r2, [pc, #64]	@ (80012d0 <MX_FREERTOS_Init+0xb8>)
 800128e:	6013      	str	r3, [r2, #0]
	
	osThreadDef(multiTask, StartMultiTask, osPriorityNormal, 0, 256);
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_FREERTOS_Init+0xbc>)
 8001292:	463c      	mov	r4, r7
 8001294:	461d      	mov	r5, r3
 8001296:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001298:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800129e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	multiTaskHandle = osThreadCreate(osThread(multiTask), NULL);
 80012a2:	463b      	mov	r3, r7
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 f86f 	bl	800938a <osThreadCreate>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <MX_FREERTOS_Init+0xc0>)
 80012b0:	6013      	str	r3, [r2, #0]
	
  /* USER CODE END RTOS_THREADS */

}
 80012b2:	bf00      	nop
 80012b4:	3770      	adds	r7, #112	@ 0x70
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800fc8c 	.word	0x0800fc8c
 80012c0:	2000017c 	.word	0x2000017c
 80012c4:	0800fcb0 	.word	0x0800fcb0
 80012c8:	20000170 	.word	0x20000170
 80012cc:	0800fcd8 	.word	0x0800fcd8
 80012d0:	20000174 	.word	0x20000174
 80012d4:	0800fd00 	.word	0x0800fd00
 80012d8:	20000178 	.word	0x20000178

080012dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f008 f89c 	bl	8009422 <osDelay>
 80012ea:	e7fb      	b.n	80012e4 <StartDefaultTask+0x8>

080012ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b76      	ldr	r3, [pc, #472]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a75      	ldr	r2, [pc, #468]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b73      	ldr	r3, [pc, #460]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a6e      	ldr	r2, [pc, #440]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b6c      	ldr	r3, [pc, #432]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b68      	ldr	r3, [pc, #416]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a67      	ldr	r2, [pc, #412]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b61      	ldr	r3, [pc, #388]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a60      	ldr	r2, [pc, #384]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b5e      	ldr	r3, [pc, #376]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b5a      	ldr	r3, [pc, #360]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a59      	ldr	r2, [pc, #356]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b57      	ldr	r3, [pc, #348]	@ (80014e0 <MX_GPIO_Init+0x1f4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|STBY_Pin|I2C3_SDA_Pin|AIN1_Pin
 800138e:	2200      	movs	r2, #0
 8001390:	f240 11c3 	movw	r1, #451	@ 0x1c3
 8001394:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <MX_GPIO_Init+0x1f8>)
 8001396:	f002 fc01 	bl	8003b9c <HAL_GPIO_WritePin>
                          |I2C3_SCL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIN2_Pin|LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80013a0:	4851      	ldr	r0, [pc, #324]	@ (80014e8 <MX_GPIO_Init+0x1fc>)
 80013a2:	f002 fbfb 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIN1_Pin|GPIO_PIN_10|AIN2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f240 4141 	movw	r1, #1089	@ 0x441
 80013ac:	484f      	ldr	r0, [pc, #316]	@ (80014ec <MX_GPIO_Init+0x200>)
 80013ae:	f002 fbf5 	bl	8003b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4846      	ldr	r0, [pc, #280]	@ (80014e4 <MX_GPIO_Init+0x1f8>)
 80013ca:	f002 fa4b 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 STBY_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|STBY_Pin|AIN1_Pin;
 80013ce:	2383      	movs	r3, #131	@ 0x83
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	483f      	ldr	r0, [pc, #252]	@ (80014e4 <MX_GPIO_Init+0x1f8>)
 80013e6:	f002 fa3d 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN2_Pin LD2_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = DIN2_Pin|LD2_Pin|TRIG_Pin;
 80013ea:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4839      	ldr	r0, [pc, #228]	@ (80014e8 <MX_GPIO_Init+0x1fc>)
 8001404:	f002 fa2e 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN1_Pin PB10 AIN2_Pin */
  GPIO_InitStruct.Pin = DIN1_Pin|GPIO_PIN_10|AIN2_Pin;
 8001408:	f240 4341 	movw	r3, #1089	@ 0x441
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4832      	ldr	r0, [pc, #200]	@ (80014ec <MX_GPIO_Init+0x200>)
 8001422:	f002 fa1f 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : EHCO_Pin BT_STATE_Pin K2_Pin K1_Pin */
  GPIO_InitStruct.Pin = EHCO_Pin|BT_STATE_Pin|K2_Pin|K1_Pin;
 8001426:	f249 0330 	movw	r3, #36912	@ 0x9030
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800142c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	482b      	ldr	r0, [pc, #172]	@ (80014ec <MX_GPIO_Init+0x200>)
 800143e:	f002 fa11 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001442:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001448:	2311      	movs	r3, #17
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <MX_GPIO_Init+0x1f8>)
 800145c:	f002 fa02 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : K4_Pin */
  GPIO_InitStruct.Pin = K4_Pin;
 8001460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001466:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K4_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	481b      	ldr	r0, [pc, #108]	@ (80014e4 <MX_GPIO_Init+0x1f8>)
 8001478:	f002 f9f4 	bl	8003864 <HAL_GPIO_Init>

  /*Configure GPIO pin : K3_Pin */
  GPIO_InitStruct.Pin = K3_Pin;
 800147c:	2304      	movs	r3, #4
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001480:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K3_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4817      	ldr	r0, [pc, #92]	@ (80014f0 <MX_GPIO_Init+0x204>)
 8001492:	f002 f9e7 	bl	8003864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2008      	movs	r0, #8
 800149c:	f001 fda8 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f001 fdc1 	bl	8003028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	200a      	movs	r0, #10
 80014ac:	f001 fda0 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f001 fdb9 	bl	8003028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2017      	movs	r0, #23
 80014bc:	f001 fd98 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014c0:	2017      	movs	r0, #23
 80014c2:	f001 fdb1 	bl	8003028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2105      	movs	r1, #5
 80014ca:	2028      	movs	r0, #40	@ 0x28
 80014cc:	f001 fd90 	bl	8002ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d0:	2028      	movs	r0, #40	@ 0x28
 80014d2:	f001 fda9 	bl	8003028 <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020c00 	.word	0x40020c00

080014f4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_I2C1_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <MX_I2C1_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <MX_I2C1_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_I2C1_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_I2C1_Init+0x50>)
 8001532:	f002 fb7f 	bl	8003c34 <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800153c:	f000 f9c8 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200003d4 	.word	0x200003d4
 8001548:	40005400 	.word	0x40005400
 800154c:	000186a0 	.word	0x000186a0

08001550 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a4d      	ldr	r2, [pc, #308]	@ (80016a4 <HAL_I2C_MspInit+0x154>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f040 8093 	bne.w	800169a <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a4a      	ldr	r2, [pc, #296]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b48      	ldr	r3, [pc, #288]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001590:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a2:	2304      	movs	r3, #4
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	483f      	ldr	r0, [pc, #252]	@ (80016ac <HAL_I2C_MspInit+0x15c>)
 80015ae:	f002 f959 	bl	8003864 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b3c      	ldr	r3, [pc, #240]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a3b      	ldr	r2, [pc, #236]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 80015bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_I2C_MspInit+0x158>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015d0:	4a38      	ldr	r2, [pc, #224]	@ (80016b4 <HAL_I2C_MspInit+0x164>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015d4:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b33      	ldr	r3, [pc, #204]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b31      	ldr	r3, [pc, #196]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 80015fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001602:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001610:	4827      	ldr	r0, [pc, #156]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 8001612:	f001 fd17 	bl	8003044 <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 800161c:	f000 f958 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38
 8001626:	4a22      	ldr	r2, [pc, #136]	@ (80016b0 <HAL_I2C_MspInit+0x160>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 800162e:	4a23      	ldr	r2, [pc, #140]	@ (80016bc <HAL_I2C_MspInit+0x16c>)
 8001630:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001634:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001638:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 800163c:	2240      	movs	r2, #64	@ 0x40
 800163e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 800165c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001660:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800166e:	4812      	ldr	r0, [pc, #72]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001670:	f001 fce8 	bl	8003044 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 800167a:	f000 f929 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_I2C_MspInit+0x168>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	201f      	movs	r0, #31
 8001690:	f001 fcae 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001694:	201f      	movs	r0, #31
 8001696:	f001 fcc7 	bl	8003028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40005400 	.word	0x40005400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020400 	.word	0x40020400
 80016b0:	20000428 	.word	0x20000428
 80016b4:	40026010 	.word	0x40026010
 80016b8:	20000488 	.word	0x20000488
 80016bc:	400260b8 	.word	0x400260b8

080016c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b0af      	sub	sp, #188	@ 0xbc
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c6:	f000 ffb1 	bl	800262c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ca:	f000 f85d 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ce:	f7ff fe0d 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 80016d2:	f7ff fd29 	bl	8001128 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d6:	f000 fdd1 	bl	800227c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016da:	f7ff ff0b 	bl	80014f4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80016de:	f000 fdf7 	bl	80022d0 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80016e2:	f000 fba1 	bl	8001e28 <MX_TIM3_Init>
  MX_TIM2_Init();
 80016e6:	f000 fb1f 	bl	8001d28 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016ea:	f000 fac5 	bl	8001c78 <MX_TIM1_Init>
  MX_TIM9_Init();
 80016ee:	f000 fbef 	bl	8001ed0 <MX_TIM9_Init>
  MX_TIM10_Init();
 80016f2:	f000 fc27 	bl	8001f44 <MX_TIM10_Init>
  MX_TIM11_Init();
 80016f6:	f000 fc49 	bl	8001f8c <MX_TIM11_Init>
  MX_ADC1_Init();
 80016fa:	f7ff fc13 	bl	8000f24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  delay_init();
 80016fe:	f00c fe27 	bl	800e350 <delay_init>
  OLED_Init();
 8001702:	f009 fbf4 	bl	800aeee <OLED_Init>
  ADC_Start();
 8001706:	f00c fd53 	bl	800e1b0 <ADC_Start>
  car = newCar();
 800170a:	4c18      	ldr	r4, [pc, #96]	@ (800176c <main+0xac>)
 800170c:	463b      	mov	r3, r7
 800170e:	4618      	mov	r0, r3
 8001710:	f00b fffc 	bl	800d70c <newCar>
 8001714:	4620      	mov	r0, r4
 8001716:	463b      	mov	r3, r7
 8001718:	22b8      	movs	r2, #184	@ 0xb8
 800171a:	4619      	mov	r1, r3
 800171c:	f00d f8d8 	bl	800e8d0 <memcpy>

  HAL_TIM_Base_Start_IT(&htim9);
 8001720:	4813      	ldr	r0, [pc, #76]	@ (8001770 <main+0xb0>)
 8001722:	f005 fbbd 	bl	8006ea0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001726:	4813      	ldr	r0, [pc, #76]	@ (8001774 <main+0xb4>)
 8001728:	f005 fbba 	bl	8006ea0 <HAL_TIM_Base_Start_IT>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <main+0xb8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <main+0xb8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0210 	orr.w	r2, r2, #16
 800173a:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <main+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <main+0xbc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0210 	orr.w	r2, r2, #16
 800174a:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, rx_data_buffer2, BUF_SIZE);
 800174c:	2240      	movs	r2, #64	@ 0x40
 800174e:	490c      	ldr	r1, [pc, #48]	@ (8001780 <main+0xc0>)
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <main+0xb8>)
 8001752:	f006 fcbf 	bl	80080d4 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart6, rx_data_buffer6, BUF_SIZE);
 8001756:	2240      	movs	r2, #64	@ 0x40
 8001758:	490a      	ldr	r1, [pc, #40]	@ (8001784 <main+0xc4>)
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <main+0xbc>)
 800175c:	f006 fcba 	bl	80080d4 <HAL_UART_Receive_DMA>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001760:	f7ff fd5a 	bl	8001218 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001764:	f007 fe0a 	bl	800937c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <main+0xa8>
 800176c:	20004a70 	.word	0x20004a70
 8001770:	2000060c 	.word	0x2000060c
 8001774:	20000654 	.word	0x20000654
 8001778:	200006e4 	.word	0x200006e4
 800177c:	2000072c 	.word	0x2000072c
 8001780:	20004b60 	.word	0x20004b60
 8001784:	20004ba0 	.word	0x20004ba0

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f00d f866 	bl	800e868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <SystemClock_Config+0xd0>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <SystemClock_Config+0xd0>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <SystemClock_Config+0xd0>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <SystemClock_Config+0xd4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <SystemClock_Config+0xd4>)
 80017d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <SystemClock_Config+0xd4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017fc:	2310      	movs	r3, #16
 80017fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001806:	2304      	movs	r3, #4
 8001808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800180a:	2307      	movs	r3, #7
 800180c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fe2a 	bl	800646c <HAL_RCC_OscConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800181e:	f000 f857 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001822:	230f      	movs	r3, #15
 8001824:	60fb      	str	r3, [r7, #12]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001826:	2302      	movs	r3, #2
 8001828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2102      	movs	r1, #2
 800183e:	4618      	mov	r0, r3
 8001840:	f005 f88c 	bl	800695c <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800184a:	f000 f841 	bl	80018d0 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	@ 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d102      	bne.n	8001878 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_IncTick();
 8001872:	f000 fefd 	bl	8002670 <HAL_IncTick>
    car.cmd = CMD_STOP;
    car.isObstacleDetected = 0;
    HAL_TIM_Base_Stop_IT(&htim11);
  }
  /* USER CODE END Callback 1 */
}
 8001876:	e01a      	b.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x4e>
  else if (htim == &htim9) //计算转速10ms
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a10      	ldr	r2, [pc, #64]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d109      	bne.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x34>
    car.encoder_l.GetCountAndRpm(&car.encoder_l);
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001884:	480f      	ldr	r0, [pc, #60]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001886:	4798      	blx	r3
    car.encoder_r.GetCountAndRpm(&car.encoder_r);
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800188a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800188e:	480e      	ldr	r0, [pc, #56]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001890:	4798      	blx	r3
}
 8001892:	e00c      	b.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x4e>
  else if (htim == &htim11){
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d108      	bne.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x4e>
    car.cmd = CMD_STOP;
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800189e:	22c5      	movs	r2, #197	@ 0xc5
 80018a0:	741a      	strb	r2, [r3, #16]
    car.isObstacleDetected = 0;
 80018a2:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	705a      	strb	r2, [r3, #1]
    HAL_TIM_Base_Stop_IT(&htim11);
 80018a8:	4808      	ldr	r0, [pc, #32]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018aa:	f005 fb5b 	bl	8006f64 <HAL_TIM_Base_Stop_IT>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40000c00 	.word	0x40000c00
 80018bc:	2000060c 	.word	0x2000060c
 80018c0:	20004a70 	.word	0x20004a70
 80018c4:	20004acc 	.word	0x20004acc
 80018c8:	20004ae0 	.word	0x20004ae0
 80018cc:	2000069c 	.word	0x2000069c

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <Error_Handler+0x8>

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_MspInit+0x54>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_MspInit+0x54>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <HAL_MspInit+0x54>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_MspInit+0x54>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_MspInit+0x54>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <HAL_MspInit+0x54>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f001 fb65 	bl	8002ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b33      	ldr	r3, [pc, #204]	@ (8001a18 <HAL_InitTick+0xe4>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a32      	ldr	r2, [pc, #200]	@ (8001a18 <HAL_InitTick+0xe4>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b30      	ldr	r3, [pc, #192]	@ (8001a18 <HAL_InitTick+0xe4>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001960:	f107 0210 	add.w	r2, r7, #16
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f005 fa16 	bl	8006d9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800197a:	f005 f9e7 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 800197e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001980:	e004      	b.n	800198c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001982:	f005 f9e3 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8001986:	4603      	mov	r3, r0
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198e:	4a23      	ldr	r2, [pc, #140]	@ (8001a1c <HAL_InitTick+0xe8>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	3b01      	subs	r3, #1
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_InitTick+0xec>)
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <HAL_InitTick+0xf0>)
 800199e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <HAL_InitTick+0xec>)
 80019a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019a6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80019a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <HAL_InitTick+0xec>)
 80019aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <HAL_InitTick+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a20 <HAL_InitTick+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_InitTick+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80019c0:	4817      	ldr	r0, [pc, #92]	@ (8001a20 <HAL_InitTick+0xec>)
 80019c2:	f005 fa1d 	bl	8006e00 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d11b      	bne.n	8001a0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80019d4:	4812      	ldr	r0, [pc, #72]	@ (8001a20 <HAL_InitTick+0xec>)
 80019d6:	f005 fa63 	bl	8006ea0 <HAL_TIM_Base_Start_IT>
 80019da:	4603      	mov	r3, r0
 80019dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d111      	bne.n	8001a0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019e8:	2032      	movs	r0, #50	@ 0x32
 80019ea:	f001 fb1d 	bl	8003028 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d808      	bhi.n	8001a06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	2032      	movs	r0, #50	@ 0x32
 80019fa:	f001 faf9 	bl	8002ff0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <HAL_InitTick+0xf4>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e002      	b.n	8001a0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3738      	adds	r7, #56	@ 0x38
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	431bde83 	.word	0x431bde83
 8001a20:	200004e8 	.word	0x200004e8
 8001a24:	40000c00 	.word	0x40000c00
 8001a28:	20000004 	.word	0x20000004

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K3_Pin);
 8001a66:	2004      	movs	r0, #4
 8001a68:	f002 f8cc 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K2_Pin);
 8001a74:	2010      	movs	r0, #16
 8001a76:	f002 f8c5 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <DMA1_Stream0_IRQHandler+0x10>)
 8001a86:	f001 fc75 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000428 	.word	0x20000428

08001a94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <DMA1_Stream5_IRQHandler+0x10>)
 8001a9a:	f001 fc6b 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200007d4 	.word	0x200007d4

08001aa8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <DMA1_Stream6_IRQHandler+0x10>)
 8001aae:	f001 fc61 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000774 	.word	0x20000774

08001abc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(K1_Pin);
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f002 f89f 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(K4_Pin);
 8001ac6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001aca:	f002 f89b 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001ada:	f005 fcaf 	bl	800743c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001ade:	4803      	ldr	r0, [pc, #12]	@ (8001aec <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001ae0:	f005 fcac 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000534 	.word	0x20000534
 8001aec:	2000060c 	.word	0x2000060c

08001af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001af4:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001af6:	f005 fca1 	bl	800743c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001afa:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001afc:	f005 fc9e 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000534 	.word	0x20000534
 8001b08:	20000654 	.word	0x20000654

08001b0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b12:	f005 fc93 	bl	800743c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b16:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b18:	f005 fc90 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000534 	.word	0x20000534
 8001b24:	2000069c 	.word	0x2000069c

08001b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM2_IRQHandler+0x10>)
 8001b2e:	f005 fc85 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000057c 	.word	0x2000057c

08001b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM3_IRQHandler+0x10>)
 8001b42:	f005 fc7b 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200005c4 	.word	0x200005c4

08001b50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <I2C1_EV_IRQHandler+0x10>)
 8001b56:	f002 fcf3 	bl	8004540 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003d4 	.word	0x200003d4

08001b64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EHCO_Pin);
 8001b68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b6c:	f002 f84a 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b74:	f002 f846 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT_STATE_Pin);
 8001b78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b7c:	f002 f842 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b88:	4802      	ldr	r0, [pc, #8]	@ (8001b94 <DMA1_Stream7_IRQHandler+0x10>)
 8001b8a:	f001 fbf3 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000488 	.word	0x20000488

08001b98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <TIM5_IRQHandler+0x10>)
 8001b9e:	f005 fc4d 	bl	800743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200004e8 	.word	0x200004e8

08001bac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA2_Stream0_IRQHandler+0x10>)
 8001bb2:	f001 fbdf 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000110 	.word	0x20000110

08001bc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <DMA2_Stream1_IRQHandler+0x10>)
 8001bc6:	f001 fbd5 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000834 	.word	0x20000834

08001bd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <DMA2_Stream6_IRQHandler+0x10>)
 8001bda:	f001 fbcb 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000894 	.word	0x20000894

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f00c fe2e 	bl	800e878 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20018000 	.word	0x20018000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20000530 	.word	0x20000530
 8001c50:	20004d30 	.word	0x20004d30

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	@ 0x30
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2224      	movs	r2, #36	@ 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00c fdee 	bl	800e868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001c96:	4a23      	ldr	r2, [pc, #140]	@ (8001d24 <MX_TIM1_Init+0xac>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001ca8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001cec:	f005 fa72 	bl	80071d4 <HAL_TIM_Encoder_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001cf6:	f7ff fdeb 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <MX_TIM1_Init+0xa8>)
 8001d08:	f006 f912 	bl	8007f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d12:	f7ff fddd 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3730      	adds	r7, #48	@ 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000534 	.word	0x20000534
 8001d24:	40010000 	.word	0x40010000

08001d28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d60:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33000-1;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d6e:	f248 02e7 	movw	r2, #32999	@ 0x80e7
 8001d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d80:	4828      	ldr	r0, [pc, #160]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d82:	f005 f83d 	bl	8006e00 <HAL_TIM_Base_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d8c:	f7ff fda0 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4821      	ldr	r0, [pc, #132]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001d9e:	f005 fcff 	bl	80077a0 <HAL_TIM_ConfigClockSource>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001da8:	f7ff fd92 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dac:	481d      	ldr	r0, [pc, #116]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001dae:	f005 f908 	bl	8006fc2 <HAL_TIM_PWM_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001db8:	f7ff fd8a 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4816      	ldr	r0, [pc, #88]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001dcc:	f006 f8b0 	bl	8007f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001dd6:	f7ff fd7b 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	2360      	movs	r3, #96	@ 0x60
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001df2:	f005 fc13 	bl	800761c <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dfc:	f7ff fd68 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2204      	movs	r2, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001e08:	f005 fc08 	bl	800761c <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001e12:	f7ff fd5d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e16:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <MX_TIM2_Init+0xfc>)
 8001e18:	f000 f9f8 	bl	800220c <HAL_TIM_MspPostInit>

}
 8001e1c:	bf00      	nop
 8001e1e:	3738      	adds	r7, #56	@ 0x38
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000057c 	.word	0x2000057c

08001e28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f00c fd16 	bl	800e868 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e44:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e46:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <MX_TIM3_Init+0xa4>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8001e76:	230c      	movs	r3, #12
 8001e78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8001e86:	230c      	movs	r3, #12
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4619      	mov	r1, r3
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001e96:	f005 f99d 	bl	80071d4 <HAL_TIM_Encoder_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f7ff fd16 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_TIM3_Init+0xa0>)
 8001eb2:	f006 f83d 	bl	8007f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ebc:	f7ff fd08 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3730      	adds	r7, #48	@ 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200005c4 	.word	0x200005c4
 8001ecc:	40000400 	.word	0x40000400

08001ed0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001ee4:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <MX_TIM9_Init+0x70>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001eea:	2253      	movs	r2, #83	@ 0x53
 8001eec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001ef6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001efa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f08:	480c      	ldr	r0, [pc, #48]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001f0a:	f004 ff79 	bl	8006e00 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001f14:	f7ff fcdc 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f1e:	463b      	mov	r3, r7
 8001f20:	4619      	mov	r1, r3
 8001f22:	4806      	ldr	r0, [pc, #24]	@ (8001f3c <MX_TIM9_Init+0x6c>)
 8001f24:	f005 fc3c 	bl	80077a0 <HAL_TIM_ConfigClockSource>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001f2e:	f7ff fccf 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000060c 	.word	0x2000060c
 8001f40:	40014000 	.word	0x40014000

08001f44 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f88 <MX_TIM10_Init+0x44>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f50:	2253      	movs	r2, #83	@ 0x53
 8001f52:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f60:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_TIM10_Init+0x40>)
 8001f70:	f004 ff46 	bl	8006e00 <HAL_TIM_Base_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001f7a:	f7ff fca9 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000654 	.word	0x20000654
 8001f88:	40014400 	.word	0x40014400

08001f8c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001f92:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <MX_TIM11_Init+0x44>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001f98:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001f9c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 25000-1;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001fa6:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001faa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001fb4:	2280      	movs	r2, #128	@ 0x80
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fb8:	4804      	ldr	r0, [pc, #16]	@ (8001fcc <MX_TIM11_Init+0x40>)
 8001fba:	f004 ff21 	bl	8006e00 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001fc4:	f7ff fc84 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000069c 	.word	0x2000069c
 8001fd0:	40014800 	.word	0x40014800

08001fd4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x128>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d145      	bne.n	8002082 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a40      	ldr	r2, [pc, #256]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b3e      	ldr	r3, [pc, #248]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a39      	ldr	r2, [pc, #228]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b37      	ldr	r3, [pc, #220]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 800202e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	482e      	ldr	r0, [pc, #184]	@ (8002104 <HAL_TIM_Encoder_MspInit+0x130>)
 800204c:	f001 fc0a 	bl	8003864 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2105      	movs	r1, #5
 8002054:	2018      	movs	r0, #24
 8002056:	f000 ffcb 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800205a:	2018      	movs	r0, #24
 800205c:	f000 ffe4 	bl	8003028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2105      	movs	r1, #5
 8002064:	2019      	movs	r0, #25
 8002066:	f000 ffc3 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800206a:	2019      	movs	r0, #25
 800206c:	f000 ffdc 	bl	8003028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2105      	movs	r1, #5
 8002074:	201a      	movs	r0, #26
 8002076:	f000 ffbb 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800207a:	201a      	movs	r0, #26
 800207c:	f000 ffd4 	bl	8003028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002080:	e038      	b.n	80020f4 <HAL_TIM_Encoder_MspInit+0x120>
  else if(tim_encoderHandle->Instance==TIM3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a20      	ldr	r2, [pc, #128]	@ (8002108 <HAL_TIM_Encoder_MspInit+0x134>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d133      	bne.n	80020f4 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	4a1a      	ldr	r2, [pc, #104]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	6413      	str	r3, [r2, #64]	@ 0x40
 800209c:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x12c>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E4A_Pin|E4B_Pin;
 80020c4:	23c0      	movs	r3, #192	@ 0xc0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d4:	2302      	movs	r3, #2
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4809      	ldr	r0, [pc, #36]	@ (8002104 <HAL_TIM_Encoder_MspInit+0x130>)
 80020e0:	f001 fbc0 	bl	8003864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2105      	movs	r1, #5
 80020e8:	201d      	movs	r0, #29
 80020ea:	f000 ff81 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020ee:	201d      	movs	r0, #29
 80020f0:	f000 ff9a 	bl	8003028 <HAL_NVIC_EnableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3730      	adds	r7, #48	@ 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40010000 	.word	0x40010000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000
 8002108:	40000400 	.word	0x40000400

0800210c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211c:	d116      	bne.n	800214c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6413      	str	r3, [r2, #64]	@ 0x40
 800212e:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	201c      	movs	r0, #28
 8002140:	f000 ff56 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002144:	201c      	movs	r0, #28
 8002146:	f000 ff6f 	bl	8003028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800214a:	e052      	b.n	80021f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM9)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2b      	ldr	r2, [pc, #172]	@ (8002200 <HAL_TIM_Base_MspInit+0xf4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d116      	bne.n	8002184 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b28      	ldr	r3, [pc, #160]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	4a27      	ldr	r2, [pc, #156]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6453      	str	r3, [r2, #68]	@ 0x44
 8002166:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	2018      	movs	r0, #24
 8002178:	f000 ff3a 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800217c:	2018      	movs	r0, #24
 800217e:	f000 ff53 	bl	8003028 <HAL_NVIC_EnableIRQ>
}
 8002182:	e036      	b.n	80021f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM10)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <HAL_TIM_Base_MspInit+0xf8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d116      	bne.n	80021bc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 8002198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219c:	6453      	str	r3, [r2, #68]	@ 0x44
 800219e:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2105      	movs	r1, #5
 80021ae:	2019      	movs	r0, #25
 80021b0:	f000 ff1e 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021b4:	2019      	movs	r0, #25
 80021b6:	f000 ff37 	bl	8003028 <HAL_NVIC_EnableIRQ>
}
 80021ba:	e01a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM11)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_TIM_Base_MspInit+0xfc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d115      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_TIM_Base_MspInit+0xf0>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2105      	movs	r1, #5
 80021e6:	201a      	movs	r0, #26
 80021e8:	f000 ff02 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021ec:	201a      	movs	r0, #26
 80021ee:	f000 ff1b 	bl	8003028 <HAL_NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40014000 	.word	0x40014000
 8002204:	40014400 	.word	0x40014400
 8002208:	40014800 	.word	0x40014800

0800220c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222c:	d11d      	bne.n	800226a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_TIM_MspPostInit+0x68>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_TIM_MspPostInit+0x68>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_TIM_MspPostInit+0x68>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800224a:	2303      	movs	r3, #3
 800224c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4619      	mov	r1, r3
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <HAL_TIM_MspPostInit+0x6c>)
 8002266:	f001 fafd 	bl	8003864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002280:	4b11      	ldr	r3, [pc, #68]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <MX_USART2_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	@ (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022b4:	f005 febe 	bl	8008034 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff fb07 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200006e4 	.word	0x200006e4
 80022cc:	40004400 	.word	0x40004400

080022d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <MX_USART6_UART_Init+0x50>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_USART6_UART_Init+0x4c>)
 8002308:	f005 fe94 	bl	8008034 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002312:	f7ff fadd 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000072c 	.word	0x2000072c
 8002320:	40011400 	.word	0x40011400

08002324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	@ 0x30
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a99      	ldr	r2, [pc, #612]	@ (80025a8 <HAL_UART_MspInit+0x284>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8093 	bne.w	800246e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	4b97      	ldr	r3, [pc, #604]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	4a96      	ldr	r2, [pc, #600]	@ (80025ac <HAL_UART_MspInit+0x288>)
 8002352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002356:	6413      	str	r3, [r2, #64]	@ 0x40
 8002358:	4b94      	ldr	r3, [pc, #592]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	4b90      	ldr	r3, [pc, #576]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4a8f      	ldr	r2, [pc, #572]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	@ 0x30
 8002374:	4b8d      	ldr	r3, [pc, #564]	@ (80025ac <HAL_UART_MspInit+0x288>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002380:	230c      	movs	r3, #12
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002390:	2307      	movs	r3, #7
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4885      	ldr	r0, [pc, #532]	@ (80025b0 <HAL_UART_MspInit+0x28c>)
 800239c:	f001 fa62 	bl	8003864 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023a0:	4b84      	ldr	r3, [pc, #528]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023a2:	4a85      	ldr	r2, [pc, #532]	@ (80025b8 <HAL_UART_MspInit+0x294>)
 80023a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023a6:	4b83      	ldr	r3, [pc, #524]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ae:	4b81      	ldr	r3, [pc, #516]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023b0:	2240      	movs	r2, #64	@ 0x40
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b7f      	ldr	r3, [pc, #508]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b7e      	ldr	r3, [pc, #504]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c2:	4b7c      	ldr	r3, [pc, #496]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c8:	4b7a      	ldr	r3, [pc, #488]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80023ce:	4b79      	ldr	r3, [pc, #484]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b77      	ldr	r3, [pc, #476]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	4b75      	ldr	r3, [pc, #468]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023e2:	4874      	ldr	r0, [pc, #464]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023e4:	f000 fe2e 	bl	8003044 <HAL_DMA_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023ee:	f7ff fa6f 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a6f      	ldr	r2, [pc, #444]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80023f8:	4a6e      	ldr	r2, [pc, #440]	@ (80025b4 <HAL_UART_MspInit+0x290>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023fe:	4b6f      	ldr	r3, [pc, #444]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002400:	4a6f      	ldr	r2, [pc, #444]	@ (80025c0 <HAL_UART_MspInit+0x29c>)
 8002402:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002404:	4b6d      	ldr	r3, [pc, #436]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002406:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800240a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240c:	4b6b      	ldr	r3, [pc, #428]	@ (80025bc <HAL_UART_MspInit+0x298>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002412:	4b6a      	ldr	r3, [pc, #424]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002418:	4b68      	ldr	r3, [pc, #416]	@ (80025bc <HAL_UART_MspInit+0x298>)
 800241a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002420:	4b66      	ldr	r3, [pc, #408]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002426:	4b65      	ldr	r3, [pc, #404]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800242c:	4b63      	ldr	r3, [pc, #396]	@ (80025bc <HAL_UART_MspInit+0x298>)
 800242e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002432:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002434:	4b61      	ldr	r3, [pc, #388]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243a:	4b60      	ldr	r3, [pc, #384]	@ (80025bc <HAL_UART_MspInit+0x298>)
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002440:	485e      	ldr	r0, [pc, #376]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002442:	f000 fdff 	bl	8003044 <HAL_DMA_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800244c:	f7ff fa40 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a5a      	ldr	r2, [pc, #360]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002454:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002456:	4a59      	ldr	r2, [pc, #356]	@ (80025bc <HAL_UART_MspInit+0x298>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2105      	movs	r1, #5
 8002460:	2026      	movs	r0, #38	@ 0x26
 8002462:	f000 fdc5 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002466:	2026      	movs	r0, #38	@ 0x26
 8002468:	f000 fdde 	bl	8003028 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800246c:	e098      	b.n	80025a0 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART6)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a54      	ldr	r2, [pc, #336]	@ (80025c4 <HAL_UART_MspInit+0x2a0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	f040 8093 	bne.w	80025a0 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b4b      	ldr	r3, [pc, #300]	@ (80025ac <HAL_UART_MspInit+0x288>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	4a4a      	ldr	r2, [pc, #296]	@ (80025ac <HAL_UART_MspInit+0x288>)
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44
 800248a:	4b48      	ldr	r3, [pc, #288]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b44      	ldr	r3, [pc, #272]	@ (80025ac <HAL_UART_MspInit+0x288>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	4a43      	ldr	r2, [pc, #268]	@ (80025ac <HAL_UART_MspInit+0x288>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_UART_MspInit+0x288>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024c4:	2308      	movs	r3, #8
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4838      	ldr	r0, [pc, #224]	@ (80025b0 <HAL_UART_MspInit+0x28c>)
 80024d0:	f001 f9c8 	bl	8003864 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024d6:	4a3d      	ldr	r2, [pc, #244]	@ (80025cc <HAL_UART_MspInit+0x2a8>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80024da:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024dc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80024e0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f6:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 8002504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002508:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002510:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002516:	482c      	ldr	r0, [pc, #176]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 8002518:	f000 fd94 	bl	8003044 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8002522:	f7ff f9d5 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a27      	ldr	r2, [pc, #156]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 800252a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800252c:	4a26      	ldr	r2, [pc, #152]	@ (80025c8 <HAL_UART_MspInit+0x2a4>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002532:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002534:	4a27      	ldr	r2, [pc, #156]	@ (80025d4 <HAL_UART_MspInit+0x2b0>)
 8002536:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 800253a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800253e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002546:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800254c:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 800254e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002552:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002554:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8002560:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002574:	4816      	ldr	r0, [pc, #88]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002576:	f000 fd65 	bl	8003044 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8002580:	f7ff f9a6 	bl	80018d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 8002588:	639a      	str	r2, [r3, #56]	@ 0x38
 800258a:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_UART_MspInit+0x2ac>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2105      	movs	r1, #5
 8002594:	2047      	movs	r0, #71	@ 0x47
 8002596:	f000 fd2b 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800259a:	2047      	movs	r0, #71	@ 0x47
 800259c:	f000 fd44 	bl	8003028 <HAL_NVIC_EnableIRQ>
}
 80025a0:	bf00      	nop
 80025a2:	3730      	adds	r7, #48	@ 0x30
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40004400 	.word	0x40004400
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40020000 	.word	0x40020000
 80025b4:	20000774 	.word	0x20000774
 80025b8:	400260a0 	.word	0x400260a0
 80025bc:	200007d4 	.word	0x200007d4
 80025c0:	40026088 	.word	0x40026088
 80025c4:	40011400 	.word	0x40011400
 80025c8:	20000834 	.word	0x20000834
 80025cc:	40026428 	.word	0x40026428
 80025d0:	20000894 	.word	0x20000894
 80025d4:	400264a0 	.word	0x400264a0

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002610 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025dc:	f7ff fb3a 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480c      	ldr	r0, [pc, #48]	@ (8002614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025e2:	490d      	ldr	r1, [pc, #52]	@ (8002618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025e4:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002606:	f00c f93d 	bl	800e884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7ff f859 	bl	80016c0 <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800261c:	08011460 	.word	0x08011460
  ldr r2, =_sbss
 8002620:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002624:	20004d30 	.word	0x20004d30

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>
	...

0800262c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <HAL_Init+0x40>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <HAL_Init+0x40>)
 8002642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_Init+0x40>)
 800264e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002654:	2003      	movs	r0, #3
 8002656:	f000 fcc0 	bl	8002fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265a:	200f      	movs	r0, #15
 800265c:	f7ff f96a 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002660:	f7ff f93c 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	@ (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000008 	.word	0x20000008
 8002694:	200008f4 	.word	0x200008f4

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200008f4 	.word	0x200008f4

080026b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e033      	b.n	800272e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fc98 	bl	8001004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	f043 0202 	orr.w	r2, r3, #2
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa3e 	bl	8002b84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40
 800271e:	e001      	b.n	8002724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1e>
 8002752:	2302      	movs	r3, #2
 8002754:	e0ce      	b.n	80028f4 <HAL_ADC_Start_DMA+0x1bc>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d018      	beq.n	800279e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800277c:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <HAL_ADC_Start_DMA+0x1c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5f      	ldr	r2, [pc, #380]	@ (8002900 <HAL_ADC_Start_DMA+0x1c8>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	0c9a      	lsrs	r2, r3, #18
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002790:	e002      	b.n	8002798 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	3b01      	subs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 8086 	bne.w	80028da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280c:	d106      	bne.n	800281c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f023 0206 	bic.w	r2, r3, #6
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
 800281a:	e002      	b.n	8002822 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800282a:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_ADC_Start_DMA+0x1cc>)
 800282c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	4a35      	ldr	r2, [pc, #212]	@ (8002908 <HAL_ADC_Start_DMA+0x1d0>)
 8002834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_ADC_Start_DMA+0x1d4>)
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	4a33      	ldr	r2, [pc, #204]	@ (8002910 <HAL_ADC_Start_DMA+0x1d8>)
 8002844:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800284e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800285e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	334c      	adds	r3, #76	@ 0x4c
 800287a:	4619      	mov	r1, r3
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f000 fc8e 	bl	80031a0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10f      	bne.n	80028b0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d129      	bne.n	80028f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	e020      	b.n	80028f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_ADC_Start_DMA+0x1dc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d11b      	bne.n	80028f2 <HAL_ADC_Start_DMA+0x1ba>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d114      	bne.n	80028f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e00b      	b.n	80028f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f043 0210 	orr.w	r2, r3, #16
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	f043 0201 	orr.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000000 	.word	0x20000000
 8002900:	431bde83 	.word	0x431bde83
 8002904:	40012300 	.word	0x40012300
 8002908:	08002d7d 	.word	0x08002d7d
 800290c:	08002e37 	.word	0x08002e37
 8002910:	08002e53 	.word	0x08002e53
 8002914:	40012000 	.word	0x40012000

08002918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1c>
 8002958:	2302      	movs	r3, #2
 800295a:	e105      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x228>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d925      	bls.n	80029b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	3b1e      	subs	r3, #30
 8002982:	2207      	movs	r2, #7
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43da      	mvns	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	400a      	ands	r2, r1
 8002990:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	4603      	mov	r3, r0
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4403      	add	r3, r0
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	409a      	lsls	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	e022      	b.n	80029fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6919      	ldr	r1, [r3, #16]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	2207      	movs	r2, #7
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	400a      	ands	r2, r1
 80029da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4403      	add	r3, r0
 80029f4:	409a      	lsls	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d824      	bhi.n	8002a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b05      	subs	r3, #5
 8002a18:	221f      	movs	r2, #31
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b05      	subs	r3, #5
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a4e:	e04c      	b.n	8002aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d824      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b23      	subs	r3, #35	@ 0x23
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b23      	subs	r3, #35	@ 0x23
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa0:	e023      	b.n	8002aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b41      	subs	r3, #65	@ 0x41
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b41      	subs	r3, #65	@ 0x41
 8002ade:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aea:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <HAL_ADC_ConfigChannel+0x234>)
 8002aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <HAL_ADC_ConfigChannel+0x238>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d109      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1cc>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b12      	cmp	r3, #18
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <HAL_ADC_ConfigChannel+0x238>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d123      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d003      	beq.n	8002b26 <HAL_ADC_ConfigChannel+0x1e6>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b11      	cmp	r3, #17
 8002b24:	d11b      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d111      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_ADC_ConfigChannel+0x23c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_ADC_ConfigChannel+0x240>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9a      	lsrs	r2, r3, #18
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40012300 	.word	0x40012300
 8002b78:	40012000 	.word	0x40012000
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b8c:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <ADC_Init+0x1f0>)
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	021a      	lsls	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <ADC_Init+0x1f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6899      	ldr	r1, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	e00f      	b.n	8002c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0202 	bic.w	r2, r2, #2
 8002c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6899      	ldr	r1, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	035a      	lsls	r2, r3, #13
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e007      	b.n	8002cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	051a      	lsls	r2, r3, #20
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d3a:	025a      	lsls	r2, r3, #9
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	029a      	lsls	r2, r3, #10
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012300 	.word	0x40012300
 8002d78:	0f000001 	.word	0x0f000001

08002d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d13c      	bne.n	8002e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d12b      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d127      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d119      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0220 	bic.w	r2, r2, #32
 8002de2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f00b f9df 	bl	800e1cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e0e:	e00e      	b.n	8002e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff fd85 	bl	800292c <HAL_ADC_ErrorCallback>
}
 8002e22:	e004      	b.n	8002e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff fd67 	bl	8002918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f043 0204 	orr.w	r2, r3, #4
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fd5a 	bl	800292c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	@ (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	@ (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ff4c 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003002:	f7ff ff61 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 8003006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	6978      	ldr	r0, [r7, #20]
 800300e:	f7ff ffb1 	bl	8002f74 <NVIC_EncodePriority>
 8003012:	4602      	mov	r2, r0
 8003014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff80 	bl	8002f20 <__NVIC_SetPriority>
}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff54 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff fb22 	bl	8002698 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e099      	b.n	8003194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003080:	e00f      	b.n	80030a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003082:	f7ff fb09 	bl	8002698 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b05      	cmp	r3, #5
 800308e:	d908      	bls.n	80030a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e078      	b.n	8003194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e8      	bne.n	8003082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4b38      	ldr	r3, [pc, #224]	@ (800319c <HAL_DMA_Init+0x158>)
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	4313      	orrs	r3, r2
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	2b04      	cmp	r3, #4
 8003134:	d117      	bne.n	8003166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fb0f 	bl	800376c <DMA_CheckFifoParam>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2240      	movs	r2, #64	@ 0x40
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003162:	2301      	movs	r3, #1
 8003164:	e016      	b.n	8003194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fac6 	bl	8003700 <DMA_CalcBaseAndBitshift>
 8003174:	4603      	mov	r3, r0
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	223f      	movs	r2, #63	@ 0x3f
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	f010803f 	.word	0xf010803f

080031a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_DMA_Start_IT+0x26>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e040      	b.n	8003248 <HAL_DMA_Start_IT+0xa8>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d12f      	bne.n	800323a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa58 	bl	80036a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	223f      	movs	r2, #63	@ 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0216 	orr.w	r2, r2, #22
 800320e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e005      	b.n	8003246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325e:	f7ff fa1b 	bl	8002698 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d008      	beq.n	8003282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e052      	b.n	8003328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_Abort+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d2:	e013      	b.n	80032fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d4:	f7ff f9e0 	bl	8002698 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d90c      	bls.n	80032fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2203      	movs	r2, #3
 80032ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e015      	b.n	8003328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e4      	bne.n	80032d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	223f      	movs	r2, #63	@ 0x3f
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d004      	beq.n	800334e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	@ 0x80
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00c      	b.n	8003368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2205      	movs	r2, #5
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003380:	4b8e      	ldr	r3, [pc, #568]	@ (80035bc <HAL_DMA_IRQHandler+0x248>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a8e      	ldr	r2, [pc, #568]	@ (80035c0 <HAL_DMA_IRQHandler+0x24c>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	2208      	movs	r2, #8
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2208      	movs	r2, #8
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2204      	movs	r2, #4
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	2210      	movs	r2, #16
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d043      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	2210      	movs	r2, #16
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d024      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
 80034a2:	e01f      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e016      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0208 	bic.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	2220      	movs	r2, #32
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 808f 	beq.w	8003614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8087 	beq.w	8003614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	2220      	movs	r2, #32
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b05      	cmp	r3, #5
 800351c:	d136      	bne.n	800358c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_IRQHandler+0x1da>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	223f      	movs	r2, #63	@ 0x3f
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d07e      	beq.n	8003680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
        }
        return;
 800358a:	e079      	b.n	8003680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d031      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e02c      	b.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
 80035ba:	bf00      	nop
 80035bc:	20000000 	.word	0x20000000
 80035c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e01e      	b.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0210 	bic.w	r2, r2, #16
 80035f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	2b00      	cmp	r3, #0
 800361a:	d032      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2205      	movs	r2, #5
 800362c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3301      	adds	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	d307      	bcc.n	800365c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f2      	bne.n	8003640 <HAL_DMA_IRQHandler+0x2cc>
 800365a:	e000      	b.n	800365e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800365c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
 800367e:	e000      	b.n	8003682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003680:	bf00      	nop
    }
  }
}
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003696:	b2db      	uxtb	r3, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b40      	cmp	r3, #64	@ 0x40
 80036d0:	d108      	bne.n	80036e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036e2:	e007      	b.n	80036f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3b10      	subs	r3, #16
 8003710:	4a14      	ldr	r2, [pc, #80]	@ (8003764 <DMA_CalcBaseAndBitshift+0x64>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800371a:	4a13      	ldr	r2, [pc, #76]	@ (8003768 <DMA_CalcBaseAndBitshift+0x68>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d909      	bls.n	8003742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003740:	e007      	b.n	8003752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	aaaaaaab 	.word	0xaaaaaaab
 8003768:	0800ff10 	.word	0x0800ff10

0800376c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11f      	bne.n	80037c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d856      	bhi.n	800383a <DMA_CheckFifoParam+0xce>
 800378c:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <DMA_CheckFifoParam+0x28>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037b7 	.word	0x080037b7
 800379c:	080037a5 	.word	0x080037a5
 80037a0:	0800383b 	.word	0x0800383b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d046      	beq.n	800383e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b4:	e043      	b.n	800383e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037be:	d140      	bne.n	8003842 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c4:	e03d      	b.n	8003842 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ce:	d121      	bne.n	8003814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d837      	bhi.n	8003846 <DMA_CheckFifoParam+0xda>
 80037d6:	a201      	add	r2, pc, #4	@ (adr r2, 80037dc <DMA_CheckFifoParam+0x70>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037f3 	.word	0x080037f3
 80037e4:	080037ed 	.word	0x080037ed
 80037e8:	08003805 	.word	0x08003805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e030      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d025      	beq.n	800384a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e022      	b.n	800384a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800380c:	d11f      	bne.n	800384e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003812:	e01c      	b.n	800384e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d903      	bls.n	8003822 <DMA_CheckFifoParam+0xb6>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d003      	beq.n	8003828 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003820:	e018      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
      break;
 8003826:	e015      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e00b      	b.n	8003852 <DMA_CheckFifoParam+0xe6>
      break;
 800383a:	bf00      	nop
 800383c:	e00a      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e008      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e006      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e004      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e002      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;   
 800384e:	bf00      	nop
 8003850:	e000      	b.n	8003854 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
    }
  } 
  
  return status; 
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop

08003864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	e159      	b.n	8003b34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003880:	2201      	movs	r2, #1
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	429a      	cmp	r2, r3
 800389a:	f040 8148 	bne.w	8003b2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d005      	beq.n	80038b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d130      	bne.n	8003918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2203      	movs	r2, #3
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038ec:	2201      	movs	r2, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 0201 	and.w	r2, r3, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b03      	cmp	r3, #3
 8003922:	d017      	beq.n	8003954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d123      	bne.n	80039a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	08da      	lsrs	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3208      	adds	r2, #8
 8003968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	220f      	movs	r2, #15
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	08da      	lsrs	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3208      	adds	r2, #8
 80039a2:	69b9      	ldr	r1, [r7, #24]
 80039a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f003 0203 	and.w	r2, r3, #3
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a2 	beq.w	8003b2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	4b57      	ldr	r3, [pc, #348]	@ (8003b4c <HAL_GPIO_Init+0x2e8>)
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	4a56      	ldr	r2, [pc, #344]	@ (8003b4c <HAL_GPIO_Init+0x2e8>)
 80039f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fa:	4b54      	ldr	r3, [pc, #336]	@ (8003b4c <HAL_GPIO_Init+0x2e8>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a06:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_GPIO_Init+0x2ec>)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a49      	ldr	r2, [pc, #292]	@ (8003b54 <HAL_GPIO_Init+0x2f0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d019      	beq.n	8003a66 <HAL_GPIO_Init+0x202>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a48      	ldr	r2, [pc, #288]	@ (8003b58 <HAL_GPIO_Init+0x2f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_GPIO_Init+0x1fe>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a47      	ldr	r2, [pc, #284]	@ (8003b5c <HAL_GPIO_Init+0x2f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00d      	beq.n	8003a5e <HAL_GPIO_Init+0x1fa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a46      	ldr	r2, [pc, #280]	@ (8003b60 <HAL_GPIO_Init+0x2fc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d007      	beq.n	8003a5a <HAL_GPIO_Init+0x1f6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a45      	ldr	r2, [pc, #276]	@ (8003b64 <HAL_GPIO_Init+0x300>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_GPIO_Init+0x1f2>
 8003a52:	2304      	movs	r3, #4
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x204>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	@ (8003b50 <HAL_GPIO_Init+0x2ec>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a86:	4b38      	ldr	r3, [pc, #224]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad4:	4a24      	ldr	r2, [pc, #144]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ada:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b04:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b28:	4a0f      	ldr	r2, [pc, #60]	@ (8003b68 <HAL_GPIO_Init+0x304>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f aea2 	bls.w	8003880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40013c00 	.word	0x40013c00

08003b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	e001      	b.n	8003b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	807b      	strh	r3, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bac:	787b      	ldrb	r3, [r7, #1]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb8:	e003      	b.n	8003bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	041a      	lsls	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	619a      	str	r2, [r3, #24]
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	041a      	lsls	r2, r3, #16
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43d9      	mvns	r1, r3
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	400b      	ands	r3, r1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	619a      	str	r2, [r3, #24]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0e:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c1a:	4a05      	ldr	r2, [pc, #20]	@ (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f00a f884 	bl	800dd30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e12b      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fc78 	bl	8001550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	@ 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c98:	f003 f858 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a81      	ldr	r2, [pc, #516]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d807      	bhi.n	8003cb8 <HAL_I2C_Init+0x84>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a80      	ldr	r2, [pc, #512]	@ (8003eac <HAL_I2C_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e006      	b.n	8003cc6 <HAL_I2C_Init+0x92>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a7d      	ldr	r2, [pc, #500]	@ (8003eb0 <HAL_I2C_Init+0x27c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf94      	ite	ls
 8003cc0:	2301      	movls	r3, #1
 8003cc2:	2300      	movhi	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0e7      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	@ (8003eb4 <HAL_I2C_Init+0x280>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0c9b      	lsrs	r3, r3, #18
 8003cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <HAL_I2C_Init+0xd4>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e009      	b.n	8003d1c <HAL_I2C_Init+0xe8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	4a69      	ldr	r2, [pc, #420]	@ (8003eb8 <HAL_I2C_Init+0x284>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	495c      	ldr	r1, [pc, #368]	@ (8003ea8 <HAL_I2C_Init+0x274>)
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	d819      	bhi.n	8003d70 <HAL_I2C_Init+0x13c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e59      	subs	r1, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d50:	400b      	ands	r3, r1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_I2C_Init+0x138>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e59      	subs	r1, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	e051      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	e04f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d111      	bne.n	8003d9c <HAL_I2C_Init+0x168>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e012      	b.n	8003dc2 <HAL_I2C_Init+0x18e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x196>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_I2C_Init+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1e58      	subs	r0, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	440b      	add	r3, r1
 8003de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dee:	e00f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	6809      	ldr	r1, [r1, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6911      	ldr	r1, [r2, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	000186a0 	.word	0x000186a0
 8003eac:	001e847f 	.word	0x001e847f
 8003eb0:	003d08ff 	.word	0x003d08ff
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ece:	2b80      	cmp	r3, #128	@ 0x80
 8003ed0:	d103      	bne.n	8003eda <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
  }
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f02:	f7fe fbc9 	bl	8002698 <HAL_GetTick>
 8003f06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	f040 80d9 	bne.w	80040c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2319      	movs	r3, #25
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	496d      	ldr	r1, [pc, #436]	@ (80040d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f002 f81f 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e0cc      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2C_Mem_Write+0x56>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0c5      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d007      	beq.n	8003f64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2221      	movs	r2, #33	@ 0x21
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a4d      	ldr	r2, [pc, #308]	@ (80040d8 <HAL_I2C_Mem_Write+0x1f0>)
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa6:	88f8      	ldrh	r0, [r7, #6]
 8003fa8:	893a      	ldrh	r2, [r7, #8]
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f001 fdae 	bl	8005b18 <I2C_RequestMemoryWrite>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d052      	beq.n	8004068 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e081      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f002 f8e4 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d107      	bne.n	8003fee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06b      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11b      	bne.n	8004068 <HAL_I2C_Mem_Write+0x180>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1aa      	bne.n	8003fc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f002 f8d7 	bl	8006228 <I2C_WaitOnBTFFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e016      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	00100002 	.word	0x00100002
 80040d8:	ffff0000 	.word	0xffff0000

080040dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	@ 0x30
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f6:	f7fe facf 	bl	8002698 <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b20      	cmp	r3, #32
 8004106:	f040 8214 	bne.w	8004532 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2319      	movs	r3, #25
 8004110:	2201      	movs	r2, #1
 8004112:	497b      	ldr	r1, [pc, #492]	@ (8004300 <HAL_I2C_Mem_Read+0x224>)
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f001 ff25 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
 8004122:	e207      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_I2C_Mem_Read+0x56>
 800412e:	2302      	movs	r3, #2
 8004130:	e200      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d007      	beq.n	8004158 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2222      	movs	r2, #34	@ 0x22
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2240      	movs	r2, #64	@ 0x40
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4a5b      	ldr	r2, [pc, #364]	@ (8004304 <HAL_I2C_Mem_Read+0x228>)
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419a:	88f8      	ldrh	r0, [r7, #6]
 800419c:	893a      	ldrh	r2, [r7, #8]
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f001 fd4a 	bl	8005c44 <I2C_RequestMemoryRead>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1bc      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e190      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11b      	bne.n	800422a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e170      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422e:	2b02      	cmp	r3, #2
 8004230:	d11b      	bne.n	800426a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	e150      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004280:	e144      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	2b03      	cmp	r3, #3
 8004288:	f200 80f1 	bhi.w	800446e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004290:	2b01      	cmp	r3, #1
 8004292:	d123      	bne.n	80042dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f002 f83f 	bl	800631c <I2C_WaitOnRXNEFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e145      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042da:	e117      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d14e      	bne.n	8004382 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	2200      	movs	r2, #0
 80042ec:	4906      	ldr	r1, [pc, #24]	@ (8004308 <HAL_I2C_Mem_Read+0x22c>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f001 fe38 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e11a      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
 80042fe:	bf00      	nop
 8004300:	00100002 	.word	0x00100002
 8004304:	ffff0000 	.word	0xffff0000
 8004308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800431a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004380:	e0c4      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2200      	movs	r2, #0
 800438a:	496c      	ldr	r1, [pc, #432]	@ (800453c <HAL_I2C_Mem_Read+0x460>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f001 fde9 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cb      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	4955      	ldr	r1, [pc, #340]	@ (800453c <HAL_I2C_Mem_Read+0x460>)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f001 fdbb 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e09d      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446c:	e04e      	b.n	800450c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f001 ff52 	bl	800631c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e058      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d124      	bne.n	800450c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	f47f aeb6 	bne.w	8004282 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3728      	adds	r7, #40	@ 0x28
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	00010004 	.word	0x00010004

08004540 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004560:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004568:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b10      	cmp	r3, #16
 800456e:	d003      	beq.n	8004578 <HAL_I2C_EV_IRQHandler+0x38>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b40      	cmp	r3, #64	@ 0x40
 8004574:	f040 80c1 	bne.w	80046fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_I2C_EV_IRQHandler+0x6e>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004598:	d003      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0x62>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045a0:	d101      	bne.n	80045a6 <HAL_I2C_EV_IRQHandler+0x66>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <HAL_I2C_EV_IRQHandler+0x68>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f000 8132 	beq.w	8004812 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x92>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	0a5b      	lsrs	r3, r3, #9
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 ff35 	bl	8006434 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fcf8 	bl	8004fc0 <I2C_Master_SB>
 80045d0:	e092      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	08db      	lsrs	r3, r3, #3
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0a5b      	lsrs	r3, r3, #9
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fd6e 	bl	80050cc <I2C_Master_ADD10>
 80045f0:	e082      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xd2>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fd88 	bl	8005120 <I2C_Master_ADDR>
 8004610:	e072      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03b      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	f000 80f3 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	09db      	lsrs	r3, r3, #7
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00f      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f94c 	bl	80048f2 <I2C_MasterTransmit_TXE>
 800465a:	e04d      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80d6 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	0a5b      	lsrs	r3, r3, #9
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80cf 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	2b21      	cmp	r3, #33	@ 0x21
 800467c:	d103      	bne.n	8004686 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9d3 	bl	8004a2a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004684:	e0c7      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	f040 80c4 	bne.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa41 	bl	8004b16 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004694:	e0bf      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a4:	f000 80b7 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 faba 	bl	8004c46 <I2C_MasterReceive_RXNE>
 80046d2:	e011      	b.n	80046f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 809a 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8093 	beq.w	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb70 	bl	8004dd6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f6:	e08e      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80046f8:	e08d      	b.n	8004816 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	e007      	b.n	800471c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x20e>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ff39 	bl	80055be <I2C_Slave_ADDR>
 800474c:	e066      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x22e>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a5b      	lsrs	r3, r3, #9
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 ff74 	bl	8005654 <I2C_Slave_STOPF>
 800476c:	e056      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b21      	cmp	r3, #33	@ 0x21
 8004772:	d002      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x23a>
 8004774:	7bbb      	ldrb	r3, [r7, #14]
 8004776:	2b29      	cmp	r3, #41	@ 0x29
 8004778:	d125      	bne.n	80047c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	09db      	lsrs	r3, r3, #7
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00f      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a9b      	lsrs	r3, r3, #10
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fe4f 	bl	8005442 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a4:	e039      	b.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d033      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0a5b      	lsrs	r3, r3, #9
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02d      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fe7c 	bl	80054bc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c4:	e029      	b.n	800481a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00f      	beq.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a9b      	lsrs	r3, r3, #10
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fe87 	bl	80054fe <I2C_SlaveReceive_RXNE>
 80047f0:	e014      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a5b      	lsrs	r3, r3, #9
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 feb5 	bl	800557a <I2C_SlaveReceive_BTF>
 8004810:	e004      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800481a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	70fb      	strb	r3, [r7, #3]
 800487e:	4613      	mov	r3, r2
 8004880:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004908:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d150      	bne.n	80049ba <I2C_MasterTransmit_TXE+0xc8>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b21      	cmp	r3, #33	@ 0x21
 800491c:	d14d      	bne.n	80049ba <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d01d      	beq.n	8004960 <I2C_MasterTransmit_TXE+0x6e>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d01a      	beq.n	8004960 <I2C_MasterTransmit_TXE+0x6e>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004930:	d016      	beq.n	8004960 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004940:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2211      	movs	r2, #17
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff62 	bl	8004822 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800495e:	e060      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800496e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d107      	bne.n	80049aa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff7d 	bl	80048a2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a8:	e03b      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff35 	bl	8004822 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049b8:	e033      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b21      	cmp	r3, #33	@ 0x21
 80049be:	d005      	beq.n	80049cc <I2C_MasterTransmit_TXE+0xda>
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d12d      	bne.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b22      	cmp	r3, #34	@ 0x22
 80049ca:	d12a      	bne.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049e6:	e01c      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d103      	bne.n	80049fc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f88e 	bl	8004b16 <I2C_MemoryTransmit_TXE_BTF>
}
 80049fa:	e012      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a20:	e7ff      	b.n	8004a22 <I2C_MasterTransmit_TXE+0x130>
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b21      	cmp	r3, #33	@ 0x21
 8004a42:	d164      	bne.n	8004b0e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a72:	e04c      	b.n	8004b0e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d01d      	beq.n	8004ab6 <I2C_MasterTransmit_BTF+0x8c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d01a      	beq.n	8004ab6 <I2C_MasterTransmit_BTF+0x8c>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a86:	d016      	beq.n	8004ab6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a96:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2211      	movs	r2, #17
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff feb7 	bl	8004822 <HAL_I2C_MasterTxCpltCallback>
}
 8004ab4:	e02b      	b.n	8004b0e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ac4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b40      	cmp	r3, #64	@ 0x40
 8004aee:	d107      	bne.n	8004b00 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fed2 	bl	80048a2 <HAL_I2C_MemTxCpltCallback>
}
 8004afe:	e006      	b.n	8004b0e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fe8a 	bl	8004822 <HAL_I2C_MasterTxCpltCallback>
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11d      	bne.n	8004b6a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10b      	bne.n	8004b4e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b46:	1c9a      	adds	r2, r3, #2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b4c:	e077      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	121b      	asrs	r3, r3, #8
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b68:	e069      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10b      	bne.n	8004b8a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b88:	e059      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d152      	bne.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	2b22      	cmp	r3, #34	@ 0x22
 8004b96:	d10d      	bne.n	8004bb4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bb2:	e044      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b21      	cmp	r3, #33	@ 0x21
 8004bc2:	d112      	bne.n	8004bea <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	781a      	ldrb	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004be8:	e029      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d124      	bne.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b21      	cmp	r3, #33	@ 0x21
 8004bf8:	d121      	bne.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c08:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c18:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fe36 	bl	80048a2 <HAL_I2C_MemTxCpltCallback>
}
 8004c36:	e002      	b.n	8004c3e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff f93f 	bl	8003ebc <I2C_Flush_DR>
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b22      	cmp	r3, #34	@ 0x22
 8004c58:	f040 80b9 	bne.w	8004dce <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d921      	bls.n	8004cb4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	f040 8096 	bne.w	8004dce <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cb2:	e08c      	b.n	8004dce <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d07f      	beq.n	8004dbc <I2C_MasterReceive_RXNE+0x176>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d002      	beq.n	8004cc8 <I2C_MasterReceive_RXNE+0x82>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d179      	bne.n	8004dbc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 faf5 	bl	80062b8 <I2C_WaitOnSTOPRequestThroughIT>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d14c      	bne.n	8004d6e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cf2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d10a      	bne.n	8004d44 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fdba 	bl	80048b6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d42:	e044      	b.n	8004dce <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d002      	beq.n	8004d58 <I2C_MasterReceive_RXNE+0x112>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d5e:	e002      	b.n	8004d66 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2212      	movs	r2, #18
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fd65 	bl	8004836 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d6c:	e02f      	b.n	8004dce <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d7c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fd88 	bl	80048ca <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dba:	e008      	b.n	8004dce <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	605a      	str	r2, [r3, #4]
}
 8004dcc:	e7ff      	b.n	8004dce <I2C_MasterReceive_RXNE+0x188>
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d11b      	bne.n	8004e26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e24:	e0c8      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d129      	bne.n	8004e84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00a      	beq.n	8004e5c <I2C_MasterReceive_BTF+0x86>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d007      	beq.n	8004e5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e82:	e099      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	f040 8081 	bne.w	8004f92 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d002      	beq.n	8004e9c <I2C_MasterReceive_BTF+0xc6>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d108      	bne.n	8004eae <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e019      	b.n	8004ee2 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d002      	beq.n	8004eba <I2C_MasterReceive_BTF+0xe4>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d108      	bne.n	8004ecc <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e00a      	b.n	8004ee2 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d007      	beq.n	8004ee2 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f3c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d10a      	bne.n	8004f68 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fca8 	bl	80048b6 <HAL_I2C_MemRxCpltCallback>
}
 8004f66:	e027      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d002      	beq.n	8004f7c <I2C_MasterReceive_BTF+0x1a6>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b20      	cmp	r3, #32
 8004f7a:	d103      	bne.n	8004f84 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f82:	e002      	b.n	8004f8a <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2212      	movs	r2, #18
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fc53 	bl	8004836 <HAL_I2C_MasterRxCpltCallback>
}
 8004f90:	e012      	b.n	8004fb8 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d117      	bne.n	8005004 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fec:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fee:	e067      	b.n	80050c0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	611a      	str	r2, [r3, #16]
}
 8005002:	e05d      	b.n	80050c0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800500c:	d133      	bne.n	8005076 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b21      	cmp	r3, #33	@ 0x21
 8005018:	d109      	bne.n	800502e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800502a:	611a      	str	r2, [r3, #16]
 800502c:	e008      	b.n	8005040 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <I2C_Master_SB+0x92>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d032      	beq.n	80050c0 <I2C_Master_SB+0x100>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02d      	beq.n	80050c0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005072:	605a      	str	r2, [r3, #4]
}
 8005074:	e024      	b.n	80050c0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	b29b      	uxth	r3, r3
 8005084:	11db      	asrs	r3, r3, #7
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0306 	and.w	r3, r3, #6
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f063 030f 	orn	r3, r3, #15
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
}
 800509a:	e011      	b.n	80050c0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10d      	bne.n	80050c0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030e 	orn	r3, r3, #14
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <I2C_Master_ADD10+0x26>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <I2C_Master_ADD10+0x48>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005120:	b480      	push	{r7}
 8005122:	b091      	sub	sp, #68	@ 0x44
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800512e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b22      	cmp	r3, #34	@ 0x22
 8005148:	f040 8169 	bne.w	800541e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <I2C_Master_ADDR+0x54>
 8005154:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	d10b      	bne.n	8005174 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515c:	2300      	movs	r3, #0
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	633b      	str	r3, [r7, #48]	@ 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	e160      	b.n	8005436 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11d      	bne.n	80051b8 <I2C_Master_ADDR+0x98>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005184:	d118      	bne.n	80051b8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051aa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80051b6:	e13e      	b.n	8005436 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e115      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	f040 808a 	bne.w	800530a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051fc:	d137      	bne.n	800526e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521c:	d113      	bne.n	8005246 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	e0e7      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e0d3      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	2b08      	cmp	r3, #8
 8005272:	d02e      	beq.n	80052d2 <I2C_Master_ADDR+0x1b2>
 8005274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005276:	2b20      	cmp	r3, #32
 8005278:	d02b      	beq.n	80052d2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800527a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527c:	2b12      	cmp	r3, #18
 800527e:	d102      	bne.n	8005286 <I2C_Master_ADDR+0x166>
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	2b01      	cmp	r3, #1
 8005284:	d125      	bne.n	80052d2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	2b04      	cmp	r3, #4
 800528a:	d00e      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	2b02      	cmp	r3, #2
 8005290:	d00b      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
 8005292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005294:	2b10      	cmp	r3, #16
 8005296:	d008      	beq.n	80052aa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e007      	b.n	80052ba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	e0a1      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e085      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d14d      	bne.n	80053b0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	2b04      	cmp	r3, #4
 8005318:	d016      	beq.n	8005348 <I2C_Master_ADDR+0x228>
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	2b02      	cmp	r3, #2
 800531e:	d013      	beq.n	8005348 <I2C_Master_ADDR+0x228>
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	2b10      	cmp	r3, #16
 8005324:	d010      	beq.n	8005348 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005334:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e007      	b.n	8005358 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005356:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005366:	d117      	bne.n	8005398 <I2C_Master_ADDR+0x278>
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800536e:	d00b      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	2b01      	cmp	r3, #1
 8005374:	d008      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	2b08      	cmp	r3, #8
 800537a:	d005      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2b10      	cmp	r3, #16
 8005380:	d002      	beq.n	8005388 <I2C_Master_ADDR+0x268>
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	2b20      	cmp	r3, #32
 8005386:	d107      	bne.n	8005398 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005396:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	e032      	b.n	8005416 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ce:	d117      	bne.n	8005400 <I2C_Master_ADDR+0x2e0>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053d6:	d00b      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d008      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d005      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d002      	beq.n	80053f0 <I2C_Master_ADDR+0x2d0>
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d107      	bne.n	8005400 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800541c:	e00b      	b.n	8005436 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	e7ff      	b.n	8005436 <I2C_Master_ADDR+0x316>
 8005436:	bf00      	nop
 8005438:	3744      	adds	r7, #68	@ 0x44
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02b      	beq.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	781a      	ldrb	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d114      	bne.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b29      	cmp	r3, #41	@ 0x29
 800548e:	d111      	bne.n	80054b4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2221      	movs	r2, #33	@ 0x21
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2228      	movs	r2, #40	@ 0x28
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff f9cb 	bl	800484a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d011      	beq.n	80054f2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	781a      	ldrb	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02c      	beq.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b2a      	cmp	r3, #42	@ 0x2a
 800554c:	d111      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2222      	movs	r2, #34	@ 0x22
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2228      	movs	r2, #40	@ 0x28
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff f976 	bl	800485e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055d8:	2b28      	cmp	r3, #40	@ 0x28
 80055da:	d127      	bne.n	800562c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	089b      	lsrs	r3, r3, #2
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	09db      	lsrs	r3, r3, #7
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	81bb      	strh	r3, [r7, #12]
 800560e:	e002      	b.n	8005616 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800561e:	89ba      	ldrh	r2, [r7, #12]
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff f924 	bl	8004872 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800562a:	e00e      	b.n	800564a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005662:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005672:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b0:	d172      	bne.n	8005798 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b22      	cmp	r3, #34	@ 0x22
 80056b6:	d002      	beq.n	80056be <I2C_Slave_STOPF+0x6a>
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80056bc:	d135      	bne.n	800572a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd ffc6 	bl	8003688 <HAL_DMA_GetState>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d049      	beq.n	8005796 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	4a69      	ldr	r2, [pc, #420]	@ (80058ac <I2C_Slave_STOPF+0x258>)
 8005708:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd fe0e 	bl	8003330 <HAL_DMA_Abort_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d03d      	beq.n	8005796 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005728:	e035      	b.n	8005796 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f043 0204 	orr.w	r2, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800575c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005762:	4618      	mov	r0, r3
 8005764:	f7fd ff90 	bl	8003688 <HAL_DMA_GetState>
 8005768:	4603      	mov	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d014      	beq.n	8005798 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005772:	4a4e      	ldr	r2, [pc, #312]	@ (80058ac <I2C_Slave_STOPF+0x258>)
 8005774:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	4618      	mov	r0, r3
 800577c:	f7fd fdd8 	bl	8003330 <HAL_DMA_Abort_IT>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005790:	4610      	mov	r0, r2
 8005792:	4798      	blx	r3
 8005794:	e000      	b.n	8005798 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005796:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03e      	beq.n	8005820 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d112      	bne.n	80057d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b40      	cmp	r3, #64	@ 0x40
 80057e2:	d112      	bne.n	800580a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f843 	bl	80058b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800582e:	e039      	b.n	80058a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b2a      	cmp	r3, #42	@ 0x2a
 8005834:	d109      	bne.n	800584a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2228      	movs	r2, #40	@ 0x28
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff f80a 	bl	800485e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b28      	cmp	r3, #40	@ 0x28
 8005854:	d111      	bne.n	800587a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <I2C_Slave_STOPF+0x25c>)
 800585a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff f80b 	bl	800488e <HAL_I2C_ListenCpltCallback>
}
 8005878:	e014      	b.n	80058a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	2b22      	cmp	r3, #34	@ 0x22
 8005880:	d002      	beq.n	8005888 <I2C_Slave_STOPF+0x234>
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b22      	cmp	r3, #34	@ 0x22
 8005886:	d10d      	bne.n	80058a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe ffdd 	bl	800485e <HAL_I2C_SlaveRxCpltCallback>
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	08005e15 	.word	0x08005e15
 80058b0:	ffff0000 	.word	0xffff0000

080058b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d002      	beq.n	80058d8 <I2C_ITError+0x24>
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d10a      	bne.n	80058ee <I2C_ITError+0x3a>
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b22      	cmp	r3, #34	@ 0x22
 80058dc:	d107      	bne.n	80058ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058f4:	2b28      	cmp	r3, #40	@ 0x28
 80058f6:	d107      	bne.n	8005908 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2228      	movs	r2, #40	@ 0x28
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005906:	e015      	b.n	8005934 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005916:	d00a      	beq.n	800592e <I2C_ITError+0x7a>
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b60      	cmp	r3, #96	@ 0x60
 800591c:	d007      	beq.n	800592e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005942:	d162      	bne.n	8005a0a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005952:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d020      	beq.n	80059a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	4a6a      	ldr	r2, [pc, #424]	@ (8005b10 <I2C_ITError+0x25c>)
 8005968:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	4618      	mov	r0, r3
 8005970:	f7fd fcde 	bl	8003330 <HAL_DMA_Abort_IT>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8089 	beq.w	8005a8e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
 80059a2:	e074      	b.n	8005a8e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	4a59      	ldr	r2, [pc, #356]	@ (8005b10 <I2C_ITError+0x25c>)
 80059aa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd fcbd 	bl	8003330 <HAL_DMA_Abort_IT>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d068      	beq.n	8005a8e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b40      	cmp	r3, #64	@ 0x40
 80059c8:	d10b      	bne.n	80059e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
 8005a08:	e041      	b.n	8005a8e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b60      	cmp	r3, #96	@ 0x60
 8005a14:	d125      	bne.n	8005a62 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b40      	cmp	r3, #64	@ 0x40
 8005a30:	d10b      	bne.n	8005a4a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fe ff3f 	bl	80048de <HAL_I2C_AbortCpltCallback>
 8005a60:	e015      	b.n	8005a8e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6c:	2b40      	cmp	r3, #64	@ 0x40
 8005a6e:	d10b      	bne.n	8005a88 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fe ff1e 	bl	80048ca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10e      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d109      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005aca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d113      	bne.n	8005b08 <I2C_ITError+0x254>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b28      	cmp	r3, #40	@ 0x28
 8005ae4:	d110      	bne.n	8005b08 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8005b14 <I2C_ITError+0x260>)
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fe fec3 	bl	800488e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	08005e15 	.word	0x08005e15
 8005b14:	ffff0000 	.word	0xffff0000

08005b18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	4608      	mov	r0, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	817b      	strh	r3, [r7, #10]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	813b      	strh	r3, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fa08 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b68:	d103      	bne.n	8005b72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e05f      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	492d      	ldr	r1, [pc, #180]	@ (8005c40 <I2C_RequestMemoryWrite+0x128>)
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa63 	bl	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e04c      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb4:	6a39      	ldr	r1, [r7, #32]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 faee 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d107      	bne.n	8005bda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e02b      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
 8005bee:	e021      	b.n	8005c34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf0:	893b      	ldrh	r3, [r7, #8]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c00:	6a39      	ldr	r1, [r7, #32]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fac8 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d107      	bne.n	8005c26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e005      	b.n	8005c36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	00010002 	.word	0x00010002

08005c44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	4611      	mov	r1, r2
 8005c50:	461a      	mov	r2, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	460b      	mov	r3, r1
 8005c58:	813b      	strh	r3, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f96a 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca4:	d103      	bne.n	8005cae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e0aa      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	4952      	ldr	r1, [pc, #328]	@ (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f9c5 	bl	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e097      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fa50 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d107      	bne.n	8005d16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e076      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d105      	bne.n	8005d2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d20:	893b      	ldrh	r3, [r7, #8]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	611a      	str	r2, [r3, #16]
 8005d2a:	e021      	b.n	8005d70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d2c:	893b      	ldrh	r3, [r7, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fa2a 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00d      	beq.n	8005d66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d107      	bne.n	8005d62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e050      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d66:	893b      	ldrh	r3, [r7, #8]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d72:	6a39      	ldr	r1, [r7, #32]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 fa0f 	bl	8006198 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d107      	bne.n	8005d98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e035      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005daa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f8d3 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dd2:	d103      	bne.n	8005ddc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e013      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	4906      	ldr	r1, [pc, #24]	@ (8005e10 <I2C_RequestMemoryRead+0x1cc>)
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f92e 	bl	8006058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	00010002 	.word	0x00010002

08005e14 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f5c <I2C_DMAAbort+0x148>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	4a4a      	ldr	r2, [pc, #296]	@ (8005f60 <I2C_DMAAbort+0x14c>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	0a1a      	lsrs	r2, r3, #8
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005e5a:	e00a      	b.n	8005e72 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e70:	d0ea      	beq.n	8005e48 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7e:	2200      	movs	r2, #0
 8005e80:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	2200      	movs	r2, #0
 8005e90:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b60      	cmp	r3, #96	@ 0x60
 8005ee2:	d10e      	bne.n	8005f02 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7fe fcef 	bl	80048de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f00:	e027      	b.n	8005f52 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f08:	2b28      	cmp	r3, #40	@ 0x28
 8005f0a:	d117      	bne.n	8005f3c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2228      	movs	r2, #40	@ 0x28
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f3a:	e007      	b.n	8005f4c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f7fe fcbc 	bl	80048ca <HAL_I2C_ErrorCallback>
}
 8005f52:	bf00      	nop
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000000 	.word	0x20000000
 8005f60:	14f8b589 	.word	0x14f8b589

08005f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f74:	e048      	b.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d044      	beq.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fc fb8b 	bl	8002698 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d139      	bne.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10d      	bne.n	8005fba <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	43da      	mvns	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	e00c      	b.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	43da      	mvns	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d116      	bne.n	8006008 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff4:	f043 0220 	orr.w	r2, r3, #32
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e023      	b.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d10d      	bne.n	800602e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	43da      	mvns	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	e00c      	b.n	8006048 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	43da      	mvns	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	429a      	cmp	r2, r3
 800604c:	d093      	beq.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006066:	e071      	b.n	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006076:	d123      	bne.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006086:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	f043 0204 	orr.w	r2, r3, #4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e067      	b.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d041      	beq.n	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c8:	f7fc fae6 	bl	8002698 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d136      	bne.n	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d10c      	bne.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	43da      	mvns	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4013      	ands	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf14      	ite	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	2300      	moveq	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	e00b      	b.n	800611a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	43da      	mvns	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf14      	ite	ne
 8006114:	2301      	movne	r3, #1
 8006116:	2300      	moveq	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e021      	b.n	8006190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10c      	bne.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	43da      	mvns	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4013      	ands	r3, r2
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf14      	ite	ne
 8006168:	2301      	movne	r3, #1
 800616a:	2300      	moveq	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e00b      	b.n	8006188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	43da      	mvns	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4013      	ands	r3, r2
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	f47f af6d 	bne.w	8006068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a4:	e034      	b.n	8006210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f915 	bl	80063d6 <I2C_IsAcknowledgeFailed>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e034      	b.n	8006220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d028      	beq.n	8006210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fc fa6b 	bl	8002698 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11d      	bne.n	8006210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061de:	2b80      	cmp	r3, #128	@ 0x80
 80061e0:	d016      	beq.n	8006210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e007      	b.n	8006220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621a:	2b80      	cmp	r3, #128	@ 0x80
 800621c:	d1c3      	bne.n	80061a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006234:	e034      	b.n	80062a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f8cd 	bl	80063d6 <I2C_IsAcknowledgeFailed>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e034      	b.n	80062b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d028      	beq.n	80062a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624e:	f7fc fa23 	bl	8002698 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11d      	bne.n	80062a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b04      	cmp	r3, #4
 8006270:	d016      	beq.n	80062a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e007      	b.n	80062b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d1c3      	bne.n	8006236 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062c4:	4b13      	ldr	r3, [pc, #76]	@ (8006314 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	08db      	lsrs	r3, r3, #3
 80062ca:	4a13      	ldr	r2, [pc, #76]	@ (8006318 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	0a1a      	lsrs	r2, r3, #8
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b01      	subs	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d107      	bne.n	80062f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e008      	b.n	8006308 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006304:	d0e9      	beq.n	80062da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	20000000 	.word	0x20000000
 8006318:	14f8b589 	.word	0x14f8b589

0800631c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006328:	e049      	b.n	80063be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b10      	cmp	r3, #16
 8006336:	d119      	bne.n	800636c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f06f 0210 	mvn.w	r2, #16
 8006340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e030      	b.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636c:	f7fc f994 	bl	8002698 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	429a      	cmp	r2, r3
 800637a:	d302      	bcc.n	8006382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11d      	bne.n	80063be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800638c:	2b40      	cmp	r3, #64	@ 0x40
 800638e:	d016      	beq.n	80063be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e007      	b.n	80063ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c8:	2b40      	cmp	r3, #64	@ 0x40
 80063ca:	d1ae      	bne.n	800632a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ec:	d11b      	bne.n	8006426 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006412:	f043 0204 	orr.w	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006444:	d103      	bne.n	800644e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800644c:	e007      	b.n	800645e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006456:	d102      	bne.n	800645e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2208      	movs	r2, #8
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e267      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d075      	beq.n	8006576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800648a:	4b88      	ldr	r3, [pc, #544]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006496:	4b85      	ldr	r3, [pc, #532]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d112      	bne.n	80064c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064a2:	4b82      	ldr	r3, [pc, #520]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ae:	d10b      	bne.n	80064c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b0:	4b7e      	ldr	r3, [pc, #504]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05b      	beq.n	8006574 <HAL_RCC_OscConfig+0x108>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d157      	bne.n	8006574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e242      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d106      	bne.n	80064e0 <HAL_RCC_OscConfig+0x74>
 80064d2:	4b76      	ldr	r3, [pc, #472]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a75      	ldr	r2, [pc, #468]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e01d      	b.n	800651c <HAL_RCC_OscConfig+0xb0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x98>
 80064ea:	4b70      	ldr	r3, [pc, #448]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a6f      	ldr	r2, [pc, #444]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b6d      	ldr	r3, [pc, #436]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a6c      	ldr	r2, [pc, #432]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80064fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e00b      	b.n	800651c <HAL_RCC_OscConfig+0xb0>
 8006504:	4b69      	ldr	r3, [pc, #420]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a68      	ldr	r2, [pc, #416]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 800650a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	4b66      	ldr	r3, [pc, #408]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a65      	ldr	r2, [pc, #404]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800651a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d013      	beq.n	800654c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fc f8b8 	bl	8002698 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800652c:	f7fc f8b4 	bl	8002698 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	@ 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e207      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653e:	4b5b      	ldr	r3, [pc, #364]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0xc0>
 800654a:	e014      	b.n	8006576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654c:	f7fc f8a4 	bl	8002698 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006552:	e008      	b.n	8006566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fc f8a0 	bl	8002698 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	@ 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e1f3      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006566:	4b51      	ldr	r3, [pc, #324]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f0      	bne.n	8006554 <HAL_RCC_OscConfig+0xe8>
 8006572:	e000      	b.n	8006576 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d063      	beq.n	800664a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006582:	4b4a      	ldr	r3, [pc, #296]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800658e:	4b47      	ldr	r3, [pc, #284]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006596:	2b08      	cmp	r3, #8
 8006598:	d11c      	bne.n	80065d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800659a:	4b44      	ldr	r3, [pc, #272]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d116      	bne.n	80065d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a6:	4b41      	ldr	r3, [pc, #260]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_RCC_OscConfig+0x152>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d001      	beq.n	80065be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e1c7      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b3b      	ldr	r3, [pc, #236]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4937      	ldr	r1, [pc, #220]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d2:	e03a      	b.n	800664a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d020      	beq.n	800661e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065dc:	4b34      	ldr	r3, [pc, #208]	@ (80066b0 <HAL_RCC_OscConfig+0x244>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fc f859 	bl	8002698 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ea:	f7fc f855 	bl	8002698 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e1a8      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fc:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006608:	4b28      	ldr	r3, [pc, #160]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4925      	ldr	r1, [pc, #148]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006618:	4313      	orrs	r3, r2
 800661a:	600b      	str	r3, [r1, #0]
 800661c:	e015      	b.n	800664a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661e:	4b24      	ldr	r3, [pc, #144]	@ (80066b0 <HAL_RCC_OscConfig+0x244>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc f838 	bl	8002698 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662c:	f7fc f834 	bl	8002698 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e187      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d036      	beq.n	80066c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d016      	beq.n	800668c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665e:	4b15      	ldr	r3, [pc, #84]	@ (80066b4 <HAL_RCC_OscConfig+0x248>)
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fc f818 	bl	8002698 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666c:	f7fc f814 	bl	8002698 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e167      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667e:	4b0b      	ldr	r3, [pc, #44]	@ (80066ac <HAL_RCC_OscConfig+0x240>)
 8006680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0x200>
 800668a:	e01b      	b.n	80066c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668c:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_RCC_OscConfig+0x248>)
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006692:	f7fc f801 	bl	8002698 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006698:	e00e      	b.n	80066b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669a:	f7fb fffd 	bl	8002698 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d907      	bls.n	80066b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e150      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
 80066ac:	40023800 	.word	0x40023800
 80066b0:	42470000 	.word	0x42470000
 80066b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b8:	4b88      	ldr	r3, [pc, #544]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ea      	bne.n	800669a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8097 	beq.w	8006800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d2:	2300      	movs	r3, #0
 80066d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d6:	4b81      	ldr	r3, [pc, #516]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	4b7d      	ldr	r3, [pc, #500]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	4a7c      	ldr	r2, [pc, #496]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80066f2:	4b7a      	ldr	r3, [pc, #488]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006702:	4b77      	ldr	r3, [pc, #476]	@ (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670a:	2b00      	cmp	r3, #0
 800670c:	d118      	bne.n	8006740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670e:	4b74      	ldr	r3, [pc, #464]	@ (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a73      	ldr	r2, [pc, #460]	@ (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800671a:	f7fb ffbd 	bl	8002698 <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006722:	f7fb ffb9 	bl	8002698 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e10c      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	4b6a      	ldr	r3, [pc, #424]	@ (80068e0 <HAL_RCC_OscConfig+0x474>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <HAL_RCC_OscConfig+0x2ea>
 8006748:	4b64      	ldr	r3, [pc, #400]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	4a63      	ldr	r2, [pc, #396]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	6713      	str	r3, [r2, #112]	@ 0x70
 8006754:	e01c      	b.n	8006790 <HAL_RCC_OscConfig+0x324>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b05      	cmp	r3, #5
 800675c:	d10c      	bne.n	8006778 <HAL_RCC_OscConfig+0x30c>
 800675e:	4b5f      	ldr	r3, [pc, #380]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006762:	4a5e      	ldr	r2, [pc, #376]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006764:	f043 0304 	orr.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	@ 0x70
 800676a:	4b5c      	ldr	r3, [pc, #368]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676e:	4a5b      	ldr	r2, [pc, #364]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6713      	str	r3, [r2, #112]	@ 0x70
 8006776:	e00b      	b.n	8006790 <HAL_RCC_OscConfig+0x324>
 8006778:	4b58      	ldr	r3, [pc, #352]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	4a57      	ldr	r2, [pc, #348]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	@ 0x70
 8006784:	4b55      	ldr	r3, [pc, #340]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006788:	4a54      	ldr	r2, [pc, #336]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800678a:	f023 0304 	bic.w	r3, r3, #4
 800678e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fb ff7e 	bl	8002698 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679e:	e00a      	b.n	80067b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a0:	f7fb ff7a 	bl	8002698 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e0cb      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b6:	4b49      	ldr	r3, [pc, #292]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ee      	beq.n	80067a0 <HAL_RCC_OscConfig+0x334>
 80067c2:	e014      	b.n	80067ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c4:	f7fb ff68 	bl	8002698 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fb ff64 	bl	8002698 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e0b5      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e2:	4b3e      	ldr	r3, [pc, #248]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ee      	bne.n	80067cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d105      	bne.n	8006800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f4:	4b39      	ldr	r3, [pc, #228]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80067f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f8:	4a38      	ldr	r2, [pc, #224]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80067fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a1 	beq.w	800694c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800680a:	4b34      	ldr	r3, [pc, #208]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
 8006812:	2b08      	cmp	r3, #8
 8006814:	d05c      	beq.n	80068d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d141      	bne.n	80068a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681e:	4b31      	ldr	r3, [pc, #196]	@ (80068e4 <HAL_RCC_OscConfig+0x478>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fb ff38 	bl	8002698 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682c:	f7fb ff34 	bl	8002698 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e087      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683e:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69da      	ldr	r2, [r3, #28]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	3b01      	subs	r3, #1
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	431a      	orrs	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	061b      	lsls	r3, r3, #24
 800686e:	491b      	ldr	r1, [pc, #108]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006870:	4313      	orrs	r3, r2
 8006872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006874:	4b1b      	ldr	r3, [pc, #108]	@ (80068e4 <HAL_RCC_OscConfig+0x478>)
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687a:	f7fb ff0d 	bl	8002698 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006882:	f7fb ff09 	bl	8002698 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e05c      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006894:	4b11      	ldr	r3, [pc, #68]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x416>
 80068a0:	e054      	b.n	800694c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a2:	4b10      	ldr	r3, [pc, #64]	@ (80068e4 <HAL_RCC_OscConfig+0x478>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fb fef6 	bl	8002698 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b0:	f7fb fef2 	bl	8002698 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e045      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	4b06      	ldr	r3, [pc, #24]	@ (80068dc <HAL_RCC_OscConfig+0x470>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCC_OscConfig+0x444>
 80068ce:	e03d      	b.n	800694c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e038      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
 80068dc:	40023800 	.word	0x40023800
 80068e0:	40007000 	.word	0x40007000
 80068e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <HAL_RCC_OscConfig+0x4ec>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d028      	beq.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d121      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	429a      	cmp	r2, r3
 8006910:	d11a      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006918:	4013      	ands	r3, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800691e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006920:	4293      	cmp	r3, r2
 8006922:	d111      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	3b01      	subs	r3, #1
 8006932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d107      	bne.n	8006948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40023800 	.word	0x40023800

0800695c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0cc      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006970:	4b68      	ldr	r3, [pc, #416]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d90c      	bls.n	8006998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b65      	ldr	r3, [pc, #404]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b63      	ldr	r3, [pc, #396]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0b8      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d020      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069b0:	4b59      	ldr	r3, [pc, #356]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4a58      	ldr	r2, [pc, #352]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069c8:	4b53      	ldr	r3, [pc, #332]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4a52      	ldr	r2, [pc, #328]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d4:	4b50      	ldr	r3, [pc, #320]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	494d      	ldr	r1, [pc, #308]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d044      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d107      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fa:	4b47      	ldr	r3, [pc, #284]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d119      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e07f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d003      	beq.n	8006a1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d107      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e06f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e067      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a3a:	4b37      	ldr	r3, [pc, #220]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f023 0203 	bic.w	r2, r3, #3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4934      	ldr	r1, [pc, #208]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a4c:	f7fb fe24 	bl	8002698 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	e00a      	b.n	8006a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a54:	f7fb fe20 	bl	8002698 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e04f      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 020c 	and.w	r2, r3, #12
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1eb      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b25      	ldr	r3, [pc, #148]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d20c      	bcs.n	8006aa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b22      	ldr	r3, [pc, #136]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a92:	4b20      	ldr	r3, [pc, #128]	@ (8006b14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e032      	b.n	8006b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab0:	4b19      	ldr	r3, [pc, #100]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4916      	ldr	r1, [pc, #88]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	490e      	ldr	r1, [pc, #56]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ae2:	f000 f821 	bl	8006b28 <HAL_RCC_GetSysClockFreq>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	490a      	ldr	r1, [pc, #40]	@ (8006b1c <HAL_RCC_ClockConfig+0x1c0>)
 8006af4:	5ccb      	ldrb	r3, [r1, r3]
 8006af6:	fa22 f303 	lsr.w	r3, r2, r3
 8006afa:	4a09      	ldr	r2, [pc, #36]	@ (8006b20 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006afe:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <HAL_RCC_ClockConfig+0x1c8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fa ff16 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40023c00 	.word	0x40023c00
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	0800fef8 	.word	0x0800fef8
 8006b20:	20000000 	.word	0x20000000
 8006b24:	20000004 	.word	0x20000004

08006b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b2c:	b094      	sub	sp, #80	@ 0x50
 8006b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b40:	4b79      	ldr	r3, [pc, #484]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 030c 	and.w	r3, r3, #12
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d00d      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x40>
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	f200 80e1 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_RCC_GetSysClockFreq+0x34>
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b5a:	e0db      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b5c:	4b73      	ldr	r3, [pc, #460]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b60:	e0db      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b62:	4b73      	ldr	r3, [pc, #460]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b66:	e0d8      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b68:	4b6f      	ldr	r3, [pc, #444]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b72:	4b6d      	ldr	r3, [pc, #436]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	099b      	lsrs	r3, r3, #6
 8006b84:	2200      	movs	r2, #0
 8006b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	f04f 0000 	mov.w	r0, #0
 8006ba2:	f04f 0100 	mov.w	r1, #0
 8006ba6:	0159      	lsls	r1, r3, #5
 8006ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bac:	0150      	lsls	r0, r2, #5
 8006bae:	4602      	mov	r2, r0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	1a51      	subs	r1, r2, r1
 8006bb6:	6139      	str	r1, [r7, #16]
 8006bb8:	4629      	mov	r1, r5
 8006bba:	eb63 0301 	sbc.w	r3, r3, r1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bcc:	4659      	mov	r1, fp
 8006bce:	018b      	lsls	r3, r1, #6
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	018a      	lsls	r2, r1, #6
 8006bda:	4651      	mov	r1, sl
 8006bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8006be0:	4659      	mov	r1, fp
 8006be2:	eb63 0901 	sbc.w	r9, r3, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bfa:	4690      	mov	r8, r2
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	4623      	mov	r3, r4
 8006c00:	eb18 0303 	adds.w	r3, r8, r3
 8006c04:	60bb      	str	r3, [r7, #8]
 8006c06:	462b      	mov	r3, r5
 8006c08:	eb49 0303 	adc.w	r3, r9, r3
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	024b      	lsls	r3, r1, #9
 8006c1e:	4621      	mov	r1, r4
 8006c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c24:	4621      	mov	r1, r4
 8006c26:	024a      	lsls	r2, r1, #9
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2e:	2200      	movs	r2, #0
 8006c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c38:	f7f9 ffde 	bl	8000bf8 <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4613      	mov	r3, r2
 8006c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c44:	e058      	b.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c46:	4b38      	ldr	r3, [pc, #224]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	099b      	lsrs	r3, r3, #6
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	4611      	mov	r1, r2
 8006c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	0159      	lsls	r1, r3, #5
 8006c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c72:	0150      	lsls	r0, r2, #5
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4641      	mov	r1, r8
 8006c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c7e:	4649      	mov	r1, r9
 8006c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c98:	ebb2 040a 	subs.w	r4, r2, sl
 8006c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	00eb      	lsls	r3, r5, #3
 8006caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cae:	00e2      	lsls	r2, r4, #3
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	461d      	mov	r5, r3
 8006cb4:	4643      	mov	r3, r8
 8006cb6:	18e3      	adds	r3, r4, r3
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb45 0303 	adc.w	r3, r5, r3
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cce:	4629      	mov	r1, r5
 8006cd0:	028b      	lsls	r3, r1, #10
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cd8:	4621      	mov	r1, r4
 8006cda:	028a      	lsls	r2, r1, #10
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	61fa      	str	r2, [r7, #28]
 8006ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cec:	f7f9 ff84 	bl	8000bf8 <__aeabi_uldivmod>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	3301      	adds	r3, #1
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3750      	adds	r7, #80	@ 0x50
 8006d20:	46bd      	mov	sp, r7
 8006d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	00f42400 	.word	0x00f42400
 8006d30:	007a1200 	.word	0x007a1200

08006d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	@ (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000000 	.word	0x20000000

08006d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d50:	f7ff fff0 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	@ (8006d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800ff08 	.word	0x0800ff08

08006d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d78:	f7ff ffdc 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0b5b      	lsrs	r3, r3, #13
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4903      	ldr	r1, [pc, #12]	@ (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	0800ff08 	.word	0x0800ff08

08006d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	220f      	movs	r2, #15
 8006daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dac:	4b12      	ldr	r3, [pc, #72]	@ (8006df8 <HAL_RCC_GetClockConfig+0x5c>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0203 	and.w	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <HAL_RCC_GetClockConfig+0x5c>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <HAL_RCC_GetClockConfig+0x5c>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006dd0:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <HAL_RCC_GetClockConfig+0x5c>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006dde:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <HAL_RCC_GetClockConfig+0x60>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0207 	and.w	r2, r3, #7
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	601a      	str	r2, [r3, #0]
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40023c00 	.word	0x40023c00

08006e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e041      	b.n	8006e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fb f970 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f000 fd9e 	bl	8007980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d001      	beq.n	8006eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e044      	b.n	8006f42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8006f50 <HAL_TIM_Base_Start_IT+0xb0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d018      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x6c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee2:	d013      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x6c>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8006f54 <HAL_TIM_Base_Start_IT+0xb4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00e      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x6c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a19      	ldr	r2, [pc, #100]	@ (8006f58 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d009      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x6c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a17      	ldr	r2, [pc, #92]	@ (8006f5c <HAL_TIM_Base_Start_IT+0xbc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x6c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <HAL_TIM_Base_Start_IT+0xc0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b06      	cmp	r3, #6
 8006f1c:	d010      	beq.n	8006f40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2e:	e007      	b.n	8006f40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40014000 	.word	0x40014000

08006f64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0201 	bic.w	r2, r2, #1
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10f      	bne.n	8006fac <HAL_TIM_Base_Stop_IT+0x48>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1a      	ldr	r2, [r3, #32]
 8006f92:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d107      	bne.n	8006fac <HAL_TIM_Base_Stop_IT+0x48>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e041      	b.n	8007058 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f839 	bl	8007060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f000 fcbd 	bl	8007980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d109      	bne.n	8007098 <HAL_TIM_PWM_Start+0x24>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	bf14      	ite	ne
 8007090:	2301      	movne	r3, #1
 8007092:	2300      	moveq	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	e022      	b.n	80070de <HAL_TIM_PWM_Start+0x6a>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d109      	bne.n	80070b2 <HAL_TIM_PWM_Start+0x3e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	bf14      	ite	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	2300      	moveq	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	e015      	b.n	80070de <HAL_TIM_PWM_Start+0x6a>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d109      	bne.n	80070cc <HAL_TIM_PWM_Start+0x58>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	bf14      	ite	ne
 80070c4:	2301      	movne	r3, #1
 80070c6:	2300      	moveq	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	e008      	b.n	80070de <HAL_TIM_PWM_Start+0x6a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	bf14      	ite	ne
 80070d8:	2301      	movne	r3, #1
 80070da:	2300      	moveq	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e068      	b.n	80071b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x82>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f4:	e013      	b.n	800711e <HAL_TIM_PWM_Start+0xaa>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_PWM_Start+0x92>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007104:	e00b      	b.n	800711e <HAL_TIM_PWM_Start+0xaa>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d104      	bne.n	8007116 <HAL_TIM_PWM_Start+0xa2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007114:	e003      	b.n	800711e <HAL_TIM_PWM_Start+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2201      	movs	r2, #1
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fedc 	bl	8007ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a23      	ldr	r2, [pc, #140]	@ (80071c0 <HAL_TIM_PWM_Start+0x14c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d107      	bne.n	8007146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007144:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1d      	ldr	r2, [pc, #116]	@ (80071c0 <HAL_TIM_PWM_Start+0x14c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d018      	beq.n	8007182 <HAL_TIM_PWM_Start+0x10e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007158:	d013      	beq.n	8007182 <HAL_TIM_PWM_Start+0x10e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <HAL_TIM_PWM_Start+0x150>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_TIM_PWM_Start+0x10e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a17      	ldr	r2, [pc, #92]	@ (80071c8 <HAL_TIM_PWM_Start+0x154>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_TIM_PWM_Start+0x10e>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <HAL_TIM_PWM_Start+0x158>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_TIM_PWM_Start+0x10e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a14      	ldr	r2, [pc, #80]	@ (80071d0 <HAL_TIM_PWM_Start+0x15c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d111      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b06      	cmp	r3, #6
 8007192:	d010      	beq.n	80071b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	e007      	b.n	80071b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0201 	orr.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40014000 	.word	0x40014000

080071d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e097      	b.n	8007318 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d106      	bne.n	8007202 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fa fee9 	bl	8001fd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 fba9 	bl	8007980 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	4313      	orrs	r3, r2
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007274:	f023 030c 	bic.w	r3, r3, #12
 8007278:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007280:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	4313      	orrs	r3, r2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	011a      	lsls	r2, r3, #4
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	031b      	lsls	r3, r3, #12
 80072a4:	4313      	orrs	r3, r2
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	4313      	orrs	r3, r2
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007330:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007338:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007340:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007348:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d110      	bne.n	8007372 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d102      	bne.n	800735c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007356:	7b7b      	ldrb	r3, [r7, #13]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d001      	beq.n	8007360 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e069      	b.n	8007434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007370:	e031      	b.n	80073d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d110      	bne.n	800739a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d102      	bne.n	8007384 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800737e:	7b3b      	ldrb	r3, [r7, #12]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d001      	beq.n	8007388 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e055      	b.n	8007434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007398:	e01d      	b.n	80073d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d108      	bne.n	80073b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d105      	bne.n	80073b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073a6:	7b7b      	ldrb	r3, [r7, #13]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073ac:	7b3b      	ldrb	r3, [r7, #12]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d001      	beq.n	80073b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e03e      	b.n	8007434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_TIM_Encoder_Start+0xc4>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d008      	beq.n	80073f4 <HAL_TIM_Encoder_Start+0xd4>
 80073e2:	e00f      	b.n	8007404 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2201      	movs	r2, #1
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fd79 	bl	8007ee4 <TIM_CCxChannelCmd>
      break;
 80073f2:	e016      	b.n	8007422 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	2104      	movs	r1, #4
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 fd71 	bl	8007ee4 <TIM_CCxChannelCmd>
      break;
 8007402:	e00e      	b.n	8007422 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2201      	movs	r2, #1
 800740a:	2100      	movs	r1, #0
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fd69 	bl	8007ee4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	2104      	movs	r1, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fd62 	bl	8007ee4 <TIM_CCxChannelCmd>
      break;
 8007420:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0201 	orr.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d020      	beq.n	80074a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01b      	beq.n	80074a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f06f 0202 	mvn.w	r2, #2
 8007470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa5b 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 800748c:	e005      	b.n	800749a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa4d 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fa5e 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d020      	beq.n	80074ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01b      	beq.n	80074ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f06f 0204 	mvn.w	r2, #4
 80074bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa35 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 80074d8:	e005      	b.n	80074e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa27 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fa38 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d020      	beq.n	8007538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01b      	beq.n	8007538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fa0f 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa01 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa12 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b00      	cmp	r3, #0
 8007540:	d020      	beq.n	8007584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01b      	beq.n	8007584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0210 	mvn.w	r2, #16
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2208      	movs	r2, #8
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f9e9 	bl	8007942 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f9db 	bl	800792e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9ec 	bl	8007956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0201 	mvn.w	r2, #1
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa f95c 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00c      	beq.n	80075cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fd2a 	bl	8008020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00c      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9bd 	bl	800796a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0220 	mvn.w	r2, #32
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fcfc 	bl	800800c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007636:	2302      	movs	r3, #2
 8007638:	e0ae      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b0c      	cmp	r3, #12
 8007646:	f200 809f 	bhi.w	8007788 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800764a:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007685 	.word	0x08007685
 8007654:	08007789 	.word	0x08007789
 8007658:	08007789 	.word	0x08007789
 800765c:	08007789 	.word	0x08007789
 8007660:	080076c5 	.word	0x080076c5
 8007664:	08007789 	.word	0x08007789
 8007668:	08007789 	.word	0x08007789
 800766c:	08007789 	.word	0x08007789
 8007670:	08007707 	.word	0x08007707
 8007674:	08007789 	.word	0x08007789
 8007678:	08007789 	.word	0x08007789
 800767c:	08007789 	.word	0x08007789
 8007680:	08007747 	.word	0x08007747
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fa04 	bl	8007a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0208 	orr.w	r2, r2, #8
 800769e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0204 	bic.w	r2, r2, #4
 80076ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6999      	ldr	r1, [r3, #24]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	619a      	str	r2, [r3, #24]
      break;
 80076c2:	e064      	b.n	800778e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fa4a 	bl	8007b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6999      	ldr	r1, [r3, #24]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	021a      	lsls	r2, r3, #8
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	619a      	str	r2, [r3, #24]
      break;
 8007704:	e043      	b.n	800778e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fa95 	bl	8007c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0208 	orr.w	r2, r2, #8
 8007720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0204 	bic.w	r2, r2, #4
 8007730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69d9      	ldr	r1, [r3, #28]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	61da      	str	r2, [r3, #28]
      break;
 8007744:	e023      	b.n	800778e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fadf 	bl	8007d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69da      	ldr	r2, [r3, #28]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69d9      	ldr	r1, [r3, #28]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	021a      	lsls	r2, r3, #8
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	61da      	str	r2, [r3, #28]
      break;
 8007786:	e002      	b.n	800778e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
      break;
 800778c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007796:	7dfb      	ldrb	r3, [r7, #23]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_ConfigClockSource+0x1c>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e0b4      	b.n	8007926 <HAL_TIM_ConfigClockSource+0x186>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f4:	d03e      	beq.n	8007874 <HAL_TIM_ConfigClockSource+0xd4>
 80077f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077fa:	f200 8087 	bhi.w	800790c <HAL_TIM_ConfigClockSource+0x16c>
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007802:	f000 8086 	beq.w	8007912 <HAL_TIM_ConfigClockSource+0x172>
 8007806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800780a:	d87f      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b70      	cmp	r3, #112	@ 0x70
 800780e:	d01a      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0xa6>
 8007810:	2b70      	cmp	r3, #112	@ 0x70
 8007812:	d87b      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b60      	cmp	r3, #96	@ 0x60
 8007816:	d050      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x11a>
 8007818:	2b60      	cmp	r3, #96	@ 0x60
 800781a:	d877      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 800781c:	2b50      	cmp	r3, #80	@ 0x50
 800781e:	d03c      	beq.n	800789a <HAL_TIM_ConfigClockSource+0xfa>
 8007820:	2b50      	cmp	r3, #80	@ 0x50
 8007822:	d873      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	d058      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x13a>
 8007828:	2b40      	cmp	r3, #64	@ 0x40
 800782a:	d86f      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 800782c:	2b30      	cmp	r3, #48	@ 0x30
 800782e:	d064      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x15a>
 8007830:	2b30      	cmp	r3, #48	@ 0x30
 8007832:	d86b      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 8007834:	2b20      	cmp	r3, #32
 8007836:	d060      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x15a>
 8007838:	2b20      	cmp	r3, #32
 800783a:	d867      	bhi.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d05c      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x15a>
 8007840:	2b10      	cmp	r3, #16
 8007842:	d05a      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x15a>
 8007844:	e062      	b.n	800790c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007856:	f000 fb25 	bl	8007ea4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	609a      	str	r2, [r3, #8]
      break;
 8007872:	e04f      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007884:	f000 fb0e 	bl	8007ea4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007896:	609a      	str	r2, [r3, #8]
      break;
 8007898:	e03c      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fa82 	bl	8007db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2150      	movs	r1, #80	@ 0x50
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fadb 	bl	8007e6e <TIM_ITRx_SetConfig>
      break;
 80078b8:	e02c      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078c6:	461a      	mov	r2, r3
 80078c8:	f000 faa1 	bl	8007e0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2160      	movs	r1, #96	@ 0x60
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 facb 	bl	8007e6e <TIM_ITRx_SetConfig>
      break;
 80078d8:	e01c      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	461a      	mov	r2, r3
 80078e8:	f000 fa62 	bl	8007db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2140      	movs	r1, #64	@ 0x40
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fabb 	bl	8007e6e <TIM_ITRx_SetConfig>
      break;
 80078f8:	e00c      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f000 fab2 	bl	8007e6e <TIM_ITRx_SetConfig>
      break;
 800790a:	e003      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	73fb      	strb	r3, [r7, #15]
      break;
 8007910:	e000      	b.n	8007914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a3a      	ldr	r2, [pc, #232]	@ (8007a7c <TIM_Base_SetConfig+0xfc>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00f      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799e:	d00b      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a37      	ldr	r2, [pc, #220]	@ (8007a80 <TIM_Base_SetConfig+0x100>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a36      	ldr	r2, [pc, #216]	@ (8007a84 <TIM_Base_SetConfig+0x104>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_Base_SetConfig+0x38>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a35      	ldr	r2, [pc, #212]	@ (8007a88 <TIM_Base_SetConfig+0x108>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2b      	ldr	r2, [pc, #172]	@ (8007a7c <TIM_Base_SetConfig+0xfc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d01b      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d8:	d017      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a28      	ldr	r2, [pc, #160]	@ (8007a80 <TIM_Base_SetConfig+0x100>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d013      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a27      	ldr	r2, [pc, #156]	@ (8007a84 <TIM_Base_SetConfig+0x104>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <TIM_Base_SetConfig+0x108>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a25      	ldr	r2, [pc, #148]	@ (8007a8c <TIM_Base_SetConfig+0x10c>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d007      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a24      	ldr	r2, [pc, #144]	@ (8007a90 <TIM_Base_SetConfig+0x110>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_Base_SetConfig+0x8a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a23      	ldr	r2, [pc, #140]	@ (8007a94 <TIM_Base_SetConfig+0x114>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d108      	bne.n	8007a1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a0e      	ldr	r2, [pc, #56]	@ (8007a7c <TIM_Base_SetConfig+0xfc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d103      	bne.n	8007a50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d105      	bne.n	8007a6e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f023 0201 	bic.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40014400 	.word	0x40014400
 8007a94:	40014800 	.word	0x40014800

08007a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	f023 0201 	bic.w	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f023 0302 	bic.w	r3, r3, #2
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a1c      	ldr	r2, [pc, #112]	@ (8007b60 <TIM_OC1_SetConfig+0xc8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10c      	bne.n	8007b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0308 	bic.w	r3, r3, #8
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 0304 	bic.w	r3, r3, #4
 8007b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a13      	ldr	r2, [pc, #76]	@ (8007b60 <TIM_OC1_SetConfig+0xc8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d111      	bne.n	8007b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	621a      	str	r2, [r3, #32]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	40010000 	.word	0x40010000

08007b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f023 0210 	bic.w	r2, r3, #16
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0320 	bic.w	r3, r3, #32
 8007bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007c38 <TIM_OC2_SetConfig+0xd4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10d      	bne.n	8007be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <TIM_OC2_SetConfig+0xd4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d113      	bne.n	8007c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40010000 	.word	0x40010000

08007c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1d      	ldr	r2, [pc, #116]	@ (8007d0c <TIM_OC3_SetConfig+0xd0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d10d      	bne.n	8007cb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a14      	ldr	r2, [pc, #80]	@ (8007d0c <TIM_OC3_SetConfig+0xd0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d113      	bne.n	8007ce6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	621a      	str	r2, [r3, #32]
}
 8007d00:	bf00      	nop
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	40010000 	.word	0x40010000

08007d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	031b      	lsls	r3, r3, #12
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a10      	ldr	r2, [pc, #64]	@ (8007dac <TIM_OC4_SetConfig+0x9c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	019b      	lsls	r3, r3, #6
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	621a      	str	r2, [r3, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000

08007db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f023 0201 	bic.w	r2, r3, #1
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f023 030a 	bic.w	r3, r3, #10
 8007dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	621a      	str	r2, [r3, #32]
}
 8007e02:	bf00      	nop
 8007e04:	371c      	adds	r7, #28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b087      	sub	sp, #28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f023 0210 	bic.w	r2, r3, #16
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	621a      	str	r2, [r3, #32]
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f043 0307 	orr.w	r3, r3, #7
 8007e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	609a      	str	r2, [r3, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	021a      	lsls	r2, r3, #8
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	609a      	str	r2, [r3, #8]
}
 8007ed8:	bf00      	nop
 8007eda:	371c      	adds	r7, #28
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8007efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1a      	ldr	r2, [r3, #32]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	43db      	mvns	r3, r3
 8007f06:	401a      	ands	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1a      	ldr	r2, [r3, #32]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	621a      	str	r2, [r3, #32]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e050      	b.n	8007fea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d018      	beq.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f94:	d013      	beq.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a18      	ldr	r2, [pc, #96]	@ (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00e      	beq.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d009      	beq.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d004      	beq.n	8007fbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a13      	ldr	r2, [pc, #76]	@ (8008008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	40010000 	.word	0x40010000
 8007ffc:	40000400 	.word	0x40000400
 8008000:	40000800 	.word	0x40000800
 8008004:	40000c00 	.word	0x40000c00
 8008008:	40014000 	.word	0x40014000

0800800c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e042      	b.n	80080cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d106      	bne.n	8008060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fa f962 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2224      	movs	r2, #36	@ 0x24
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fef3 	bl	8008e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800808c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695a      	ldr	r2, [r3, #20]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800809c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d112      	bne.n	8008114 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <HAL_UART_Receive_DMA+0x26>
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e00b      	b.n	8008116 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	461a      	mov	r2, r3
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fc4a 	bl	80089a4 <UART_Start_Receive_DMA>
 8008110:	4603      	mov	r3, r0
 8008112:	e000      	b.n	8008116 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008114:	2302      	movs	r3, #2
  }
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b090      	sub	sp, #64	@ 0x40
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008134:	2b80      	cmp	r3, #128	@ 0x80
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b21      	cmp	r3, #33	@ 0x21
 800814a:	d128      	bne.n	800819e <HAL_UART_DMAStop+0x80>
 800814c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d025      	beq.n	800819e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3314      	adds	r3, #20
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	623b      	str	r3, [r7, #32]
   return(result);
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3314      	adds	r3, #20
 8008170:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008172:	633a      	str	r2, [r7, #48]	@ 0x30
 8008174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e5      	bne.n	8008152 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818a:	2b00      	cmp	r3, #0
 800818c:	d004      	beq.n	8008198 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	4618      	mov	r0, r3
 8008194:	f7fb f85c 	bl	8003250 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc9d 	bl	8008ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b40      	cmp	r3, #64	@ 0x40
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b22      	cmp	r3, #34	@ 0x22
 80081be:	d128      	bne.n	8008212 <HAL_UART_DMAStop+0xf4>
 80081c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d025      	beq.n	8008212 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3314      	adds	r3, #20
 80081cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081e6:	61fa      	str	r2, [r7, #28]
 80081e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	69b9      	ldr	r1, [r7, #24]
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	617b      	str	r3, [r7, #20]
   return(result);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008206:	4618      	mov	r0, r3
 8008208:	f7fb f822 	bl	8003250 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fc8b 	bl	8008b28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3740      	adds	r7, #64	@ 0x40
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b0ba      	sub	sp, #232	@ 0xe8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008242:	2300      	movs	r3, #0
 8008244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008248:	2300      	movs	r3, #0
 800824a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800824e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800825a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10f      	bne.n	8008282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_UART_IRQHandler+0x66>
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd33 	bl	8008ce6 <UART_Receive_IT>
      return;
 8008280:	e25b      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 80de 	beq.w	8008448 <HAL_UART_IRQHandler+0x22c>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800829c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80d1 	beq.w	8008448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_UART_IRQHandler+0xae>
 80082b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c2:	f043 0201 	orr.w	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <HAL_UART_IRQHandler+0xd2>
 80082d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e6:	f043 0202 	orr.w	r2, r3, #2
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00b      	beq.n	8008312 <HAL_UART_IRQHandler+0xf6>
 80082fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	f043 0204 	orr.w	r2, r3, #4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d011      	beq.n	8008342 <HAL_UART_IRQHandler+0x126>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800832a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800833a:	f043 0208 	orr.w	r2, r3, #8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 81f2 	beq.w	8008730 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d008      	beq.n	800836a <HAL_UART_IRQHandler+0x14e>
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fcbe 	bl	8008ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008374:	2b40      	cmp	r3, #64	@ 0x40
 8008376:	bf0c      	ite	eq
 8008378:	2301      	moveq	r3, #1
 800837a:	2300      	movne	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <HAL_UART_IRQHandler+0x17a>
 800838e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d04f      	beq.n	8008436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fbc6 	bl	8008b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a6:	2b40      	cmp	r3, #64	@ 0x40
 80083a8:	d141      	bne.n	800842e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3314      	adds	r3, #20
 80083b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3314      	adds	r3, #20
 80083d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1d9      	bne.n	80083aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d013      	beq.n	8008426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008402:	4a7e      	ldr	r2, [pc, #504]	@ (80085fc <HAL_UART_IRQHandler+0x3e0>)
 8008404:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840a:	4618      	mov	r0, r3
 800840c:	f7fa ff90 	bl	8003330 <HAL_DMA_Abort_IT>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008424:	e00e      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9a8 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842c:	e00a      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f9a4 	bl	800877c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	e006      	b.n	8008444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9a0 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008442:	e175      	b.n	8008730 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	bf00      	nop
    return;
 8008446:	e173      	b.n	8008730 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 814f 	bne.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8148 	beq.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 8141 	beq.w	80086f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848e:	2b40      	cmp	r3, #64	@ 0x40
 8008490:	f040 80b6 	bne.w	8008600 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8145 	beq.w	8008734 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084b2:	429a      	cmp	r2, r3
 80084b4:	f080 813e 	bcs.w	8008734 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ca:	f000 8088 	beq.w	80085de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80084fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008506:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d9      	bne.n	80084ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3314      	adds	r3, #20
 8008520:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800852a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3314      	adds	r3, #20
 800853a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800853e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008542:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008546:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e1      	bne.n	800851a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3314      	adds	r3, #20
 800855c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3314      	adds	r3, #20
 8008576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800857a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800857c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e3      	bne.n	8008556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085ae:	f023 0310 	bic.w	r3, r3, #16
 80085b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80085c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80085c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e3      	bne.n	800859c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fa fe39 	bl	8003250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f8cb 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085fa:	e09b      	b.n	8008734 <HAL_UART_IRQHandler+0x518>
 80085fc:	08008bef 	.word	0x08008bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008608:	b29b      	uxth	r3, r3
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 808e 	beq.w	8008738 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800861c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8089 	beq.w	8008738 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	330c      	adds	r3, #12
 800862c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800863c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800864a:	647a      	str	r2, [r7, #68]	@ 0x44
 800864c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3314      	adds	r3, #20
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	623b      	str	r3, [r7, #32]
   return(result);
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008682:	633a      	str	r2, [r7, #48]	@ 0x30
 8008684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e3      	bne.n	800865e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	330c      	adds	r3, #12
 80086aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	e853 3f00 	ldrex	r3, [r3]
 80086b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0310 	bic.w	r3, r3, #16
 80086ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80086c8:	61fa      	str	r2, [r7, #28]
 80086ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	69b9      	ldr	r1, [r7, #24]
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	617b      	str	r3, [r7, #20]
   return(result);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e3      	bne.n	80086a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2202      	movs	r2, #2
 80086e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f851 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ee:	e023      	b.n	8008738 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_UART_IRQHandler+0x4f4>
 80086fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fa84 	bl	8008c16 <UART_Transmit_IT>
    return;
 800870e:	e014      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <HAL_UART_IRQHandler+0x51e>
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d008      	beq.n	800873a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fac4 	bl	8008cb6 <UART_EndTransmit_IT>
    return;
 800872e:	e004      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
    return;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
      return;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_UART_IRQHandler+0x51e>
      return;
 8008738:	bf00      	nop
  }
}
 800873a:	37e8      	adds	r7, #232	@ 0xe8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b09c      	sub	sp, #112	@ 0x70
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d172      	bne.n	80088aa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80087c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c6:	2200      	movs	r2, #0
 80087c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80087ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3314      	adds	r3, #20
 8008804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800880e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	667b      	str	r3, [r7, #100]	@ 0x64
 8008816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3314      	adds	r3, #20
 800881c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800881e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800882c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e5      	bne.n	80087fe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3314      	adds	r3, #20
 8008838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	623b      	str	r3, [r7, #32]
   return(result);
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008848:	663b      	str	r3, [r7, #96]	@ 0x60
 800884a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3314      	adds	r3, #20
 8008850:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008852:	633a      	str	r2, [r7, #48]	@ 0x30
 8008854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	2b01      	cmp	r3, #1
 8008874:	d119      	bne.n	80088aa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	330c      	adds	r3, #12
 800887c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	60fb      	str	r3, [r7, #12]
   return(result);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f023 0310 	bic.w	r3, r3, #16
 800888c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800888e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	330c      	adds	r3, #12
 8008894:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008896:	61fa      	str	r2, [r7, #28]
 8008898:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	69b9      	ldr	r1, [r7, #24]
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	617b      	str	r3, [r7, #20]
   return(result);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e5      	bne.n	8008876 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ac:	2200      	movs	r2, #0
 80088ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d106      	bne.n	80088c6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088bc:	4619      	mov	r1, r3
 80088be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088c0:	f7ff ff66 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088c4:	e002      	b.n	80088cc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088c8:	f7ff ff44 	bl	8008754 <HAL_UART_RxCpltCallback>
}
 80088cc:	bf00      	nop
 80088ce:	3770      	adds	r7, #112	@ 0x70
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2201      	movs	r2, #1
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d108      	bne.n	8008902 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088f4:	085b      	lsrs	r3, r3, #1
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4619      	mov	r1, r3
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7ff ff48 	bl	8008790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008900:	e002      	b.n	8008908 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff ff30 	bl	8008768 <HAL_UART_RxHalfCpltCallback>
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892c:	2b80      	cmp	r3, #128	@ 0x80
 800892e:	bf0c      	ite	eq
 8008930:	2301      	moveq	r3, #1
 8008932:	2300      	movne	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b21      	cmp	r3, #33	@ 0x21
 8008942:	d108      	bne.n	8008956 <UART_DMAError+0x46>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d005      	beq.n	8008956 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2200      	movs	r2, #0
 800894e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008950:	68b8      	ldr	r0, [r7, #8]
 8008952:	f000 f8c1 	bl	8008ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008960:	2b40      	cmp	r3, #64	@ 0x40
 8008962:	bf0c      	ite	eq
 8008964:	2301      	moveq	r3, #1
 8008966:	2300      	movne	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b22      	cmp	r3, #34	@ 0x22
 8008976:	d108      	bne.n	800898a <UART_DMAError+0x7a>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2200      	movs	r2, #0
 8008982:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008984:	68b8      	ldr	r0, [r7, #8]
 8008986:	f000 f8cf 	bl	8008b28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898e:	f043 0210 	orr.w	r2, r3, #16
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008996:	68b8      	ldr	r0, [r7, #8]
 8008998:	f7ff fef0 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b098      	sub	sp, #96	@ 0x60
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2222      	movs	r2, #34	@ 0x22
 80089c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d0:	4a3e      	ldr	r2, [pc, #248]	@ (8008acc <UART_Start_Receive_DMA+0x128>)
 80089d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d8:	4a3d      	ldr	r2, [pc, #244]	@ (8008ad0 <UART_Start_Receive_DMA+0x12c>)
 80089da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e0:	4a3c      	ldr	r2, [pc, #240]	@ (8008ad4 <UART_Start_Receive_DMA+0x130>)
 80089e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e8:	2200      	movs	r2, #0
 80089ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089ec:	f107 0308 	add.w	r3, r7, #8
 80089f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	f7fa fbcc 	bl	80031a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	613b      	str	r3, [r7, #16]
 8008a1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d019      	beq.n	8008a5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e5      	bne.n	8008a26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3314      	adds	r3, #20
 8008a78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3314      	adds	r3, #20
 8008a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aae:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6a39      	ldr	r1, [r7, #32]
 8008ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3760      	adds	r7, #96	@ 0x60
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	080087a9 	.word	0x080087a9
 8008ad0:	080088d5 	.word	0x080088d5
 8008ad4:	08008911 	.word	0x08008911

08008ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b089      	sub	sp, #36	@ 0x24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	330c      	adds	r3, #12
 8008ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	61ba      	str	r2, [r7, #24]
 8008b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6979      	ldr	r1, [r7, #20]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008b1c:	bf00      	nop
 8008b1e:	3724      	adds	r7, #36	@ 0x24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b095      	sub	sp, #84	@ 0x54
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e5      	bne.n	8008b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3314      	adds	r3, #20
 8008b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3314      	adds	r3, #20
 8008b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e5      	bne.n	8008b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d119      	bne.n	8008bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f023 0310 	bic.w	r3, r3, #16
 8008bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	330c      	adds	r3, #12
 8008bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bc0:	61ba      	str	r2, [r7, #24]
 8008bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e5      	bne.n	8008ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008be2:	bf00      	nop
 8008be4:	3754      	adds	r7, #84	@ 0x54
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7ff fdb7 	bl	800877c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b21      	cmp	r3, #33	@ 0x21
 8008c28:	d13e      	bne.n	8008ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c32:	d114      	bne.n	8008c5e <UART_Transmit_IT+0x48>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d110      	bne.n	8008c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	1c9a      	adds	r2, r3, #2
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]
 8008c5c:	e008      	b.n	8008c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	1c59      	adds	r1, r3, #1
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6211      	str	r1, [r2, #32]
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10f      	bne.n	8008ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	e000      	b.n	8008caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ca8:	2302      	movs	r3, #2
  }
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68da      	ldr	r2, [r3, #12]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff fd32 	bl	8008740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b08c      	sub	sp, #48	@ 0x30
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b22      	cmp	r3, #34	@ 0x22
 8008cf8:	f040 80ae 	bne.w	8008e58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d04:	d117      	bne.n	8008d36 <UART_Receive_IT+0x50>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d113      	bne.n	8008d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2e:	1c9a      	adds	r2, r3, #2
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d34:	e026      	b.n	8008d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d48:	d007      	beq.n	8008d5a <UART_Receive_IT+0x74>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <UART_Receive_IT+0x82>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e008      	b.n	8008d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	4619      	mov	r1, r3
 8008d92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d15d      	bne.n	8008e54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0220 	bic.w	r2, r2, #32
 8008da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695a      	ldr	r2, [r3, #20]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0201 	bic.w	r2, r2, #1
 8008dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d135      	bne.n	8008e4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	613b      	str	r3, [r7, #16]
   return(result);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 0310 	bic.w	r3, r3, #16
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e04:	623a      	str	r2, [r7, #32]
 8008e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	2b10      	cmp	r3, #16
 8008e24:	d10a      	bne.n	8008e3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fca4 	bl	8008790 <HAL_UARTEx_RxEventCallback>
 8008e48:	e002      	b.n	8008e50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff fc82 	bl	8008754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e002      	b.n	8008e5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e000      	b.n	8008e5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008e58:	2302      	movs	r3, #2
  }
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3730      	adds	r7, #48	@ 0x30
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e68:	b0c0      	sub	sp, #256	@ 0x100
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e80:	68d9      	ldr	r1, [r3, #12]
 8008e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	ea40 0301 	orr.w	r3, r0, r1
 8008e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ebc:	f021 010c 	bic.w	r1, r1, #12
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ede:	6999      	ldr	r1, [r3, #24]
 8008ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	ea40 0301 	orr.w	r3, r0, r1
 8008eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8009130 <UART_SetConfig+0x2cc>)
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d005      	beq.n	8008f04 <UART_SetConfig+0xa0>
 8008ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b8d      	ldr	r3, [pc, #564]	@ (8009134 <UART_SetConfig+0x2d0>)
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d104      	bne.n	8008f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f04:	f7fd ff36 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8008f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f0c:	e003      	b.n	8008f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f0e:	f7fd ff1d 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8008f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f20:	f040 810c 	bne.w	800913c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f36:	4622      	mov	r2, r4
 8008f38:	462b      	mov	r3, r5
 8008f3a:	1891      	adds	r1, r2, r2
 8008f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f3e:	415b      	adcs	r3, r3
 8008f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f46:	4621      	mov	r1, r4
 8008f48:	eb12 0801 	adds.w	r8, r2, r1
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	eb43 0901 	adc.w	r9, r3, r1
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f66:	4690      	mov	r8, r2
 8008f68:	4699      	mov	r9, r3
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	eb18 0303 	adds.w	r3, r8, r3
 8008f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008f74:	462b      	mov	r3, r5
 8008f76:	eb49 0303 	adc.w	r3, r9, r3
 8008f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008f92:	460b      	mov	r3, r1
 8008f94:	18db      	adds	r3, r3, r3
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f98:	4613      	mov	r3, r2
 8008f9a:	eb42 0303 	adc.w	r3, r2, r3
 8008f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008fa8:	f7f7 fe26 	bl	8000bf8 <__aeabi_uldivmod>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4b61      	ldr	r3, [pc, #388]	@ (8009138 <UART_SetConfig+0x2d4>)
 8008fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	011c      	lsls	r4, r3, #4
 8008fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	1891      	adds	r1, r2, r2
 8008fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008fd4:	415b      	adcs	r3, r3
 8008fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fdc:	4641      	mov	r1, r8
 8008fde:	eb12 0a01 	adds.w	sl, r2, r1
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ffc:	4692      	mov	sl, r2
 8008ffe:	469b      	mov	fp, r3
 8009000:	4643      	mov	r3, r8
 8009002:	eb1a 0303 	adds.w	r3, sl, r3
 8009006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800900a:	464b      	mov	r3, r9
 800900c:	eb4b 0303 	adc.w	r3, fp, r3
 8009010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009028:	460b      	mov	r3, r1
 800902a:	18db      	adds	r3, r3, r3
 800902c:	643b      	str	r3, [r7, #64]	@ 0x40
 800902e:	4613      	mov	r3, r2
 8009030:	eb42 0303 	adc.w	r3, r2, r3
 8009034:	647b      	str	r3, [r7, #68]	@ 0x44
 8009036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800903a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800903e:	f7f7 fddb 	bl	8000bf8 <__aeabi_uldivmod>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4611      	mov	r1, r2
 8009048:	4b3b      	ldr	r3, [pc, #236]	@ (8009138 <UART_SetConfig+0x2d4>)
 800904a:	fba3 2301 	umull	r2, r3, r3, r1
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2264      	movs	r2, #100	@ 0x64
 8009052:	fb02 f303 	mul.w	r3, r2, r3
 8009056:	1acb      	subs	r3, r1, r3
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800905e:	4b36      	ldr	r3, [pc, #216]	@ (8009138 <UART_SetConfig+0x2d4>)
 8009060:	fba3 2302 	umull	r2, r3, r3, r2
 8009064:	095b      	lsrs	r3, r3, #5
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800906c:	441c      	add	r4, r3
 800906e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009072:	2200      	movs	r2, #0
 8009074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800907c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009080:	4642      	mov	r2, r8
 8009082:	464b      	mov	r3, r9
 8009084:	1891      	adds	r1, r2, r2
 8009086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009088:	415b      	adcs	r3, r3
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800908c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009090:	4641      	mov	r1, r8
 8009092:	1851      	adds	r1, r2, r1
 8009094:	6339      	str	r1, [r7, #48]	@ 0x30
 8009096:	4649      	mov	r1, r9
 8009098:	414b      	adcs	r3, r1
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80090a8:	4659      	mov	r1, fp
 80090aa:	00cb      	lsls	r3, r1, #3
 80090ac:	4651      	mov	r1, sl
 80090ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090b2:	4651      	mov	r1, sl
 80090b4:	00ca      	lsls	r2, r1, #3
 80090b6:	4610      	mov	r0, r2
 80090b8:	4619      	mov	r1, r3
 80090ba:	4603      	mov	r3, r0
 80090bc:	4642      	mov	r2, r8
 80090be:	189b      	adds	r3, r3, r2
 80090c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090c4:	464b      	mov	r3, r9
 80090c6:	460a      	mov	r2, r1
 80090c8:	eb42 0303 	adc.w	r3, r2, r3
 80090cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80090e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090e4:	460b      	mov	r3, r1
 80090e6:	18db      	adds	r3, r3, r3
 80090e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090ea:	4613      	mov	r3, r2
 80090ec:	eb42 0303 	adc.w	r3, r2, r3
 80090f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80090fa:	f7f7 fd7d 	bl	8000bf8 <__aeabi_uldivmod>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4b0d      	ldr	r3, [pc, #52]	@ (8009138 <UART_SetConfig+0x2d4>)
 8009104:	fba3 1302 	umull	r1, r3, r3, r2
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	2164      	movs	r1, #100	@ 0x64
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	3332      	adds	r3, #50	@ 0x32
 8009116:	4a08      	ldr	r2, [pc, #32]	@ (8009138 <UART_SetConfig+0x2d4>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	f003 0207 	and.w	r2, r3, #7
 8009122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4422      	add	r2, r4
 800912a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800912c:	e106      	b.n	800933c <UART_SetConfig+0x4d8>
 800912e:	bf00      	nop
 8009130:	40011000 	.word	0x40011000
 8009134:	40011400 	.word	0x40011400
 8009138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800913c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009140:	2200      	movs	r2, #0
 8009142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800914a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800914e:	4642      	mov	r2, r8
 8009150:	464b      	mov	r3, r9
 8009152:	1891      	adds	r1, r2, r2
 8009154:	6239      	str	r1, [r7, #32]
 8009156:	415b      	adcs	r3, r3
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
 800915a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800915e:	4641      	mov	r1, r8
 8009160:	1854      	adds	r4, r2, r1
 8009162:	4649      	mov	r1, r9
 8009164:	eb43 0501 	adc.w	r5, r3, r1
 8009168:	f04f 0200 	mov.w	r2, #0
 800916c:	f04f 0300 	mov.w	r3, #0
 8009170:	00eb      	lsls	r3, r5, #3
 8009172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009176:	00e2      	lsls	r2, r4, #3
 8009178:	4614      	mov	r4, r2
 800917a:	461d      	mov	r5, r3
 800917c:	4643      	mov	r3, r8
 800917e:	18e3      	adds	r3, r4, r3
 8009180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009184:	464b      	mov	r3, r9
 8009186:	eb45 0303 	adc.w	r3, r5, r3
 800918a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800918e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800919a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80091aa:	4629      	mov	r1, r5
 80091ac:	008b      	lsls	r3, r1, #2
 80091ae:	4621      	mov	r1, r4
 80091b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b4:	4621      	mov	r1, r4
 80091b6:	008a      	lsls	r2, r1, #2
 80091b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80091bc:	f7f7 fd1c 	bl	8000bf8 <__aeabi_uldivmod>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4b60      	ldr	r3, [pc, #384]	@ (8009348 <UART_SetConfig+0x4e4>)
 80091c6:	fba3 2302 	umull	r2, r3, r3, r2
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	011c      	lsls	r4, r3, #4
 80091ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	1891      	adds	r1, r2, r2
 80091e6:	61b9      	str	r1, [r7, #24]
 80091e8:	415b      	adcs	r3, r3
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091f0:	4641      	mov	r1, r8
 80091f2:	1851      	adds	r1, r2, r1
 80091f4:	6139      	str	r1, [r7, #16]
 80091f6:	4649      	mov	r1, r9
 80091f8:	414b      	adcs	r3, r1
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009208:	4659      	mov	r1, fp
 800920a:	00cb      	lsls	r3, r1, #3
 800920c:	4651      	mov	r1, sl
 800920e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009212:	4651      	mov	r1, sl
 8009214:	00ca      	lsls	r2, r1, #3
 8009216:	4610      	mov	r0, r2
 8009218:	4619      	mov	r1, r3
 800921a:	4603      	mov	r3, r0
 800921c:	4642      	mov	r2, r8
 800921e:	189b      	adds	r3, r3, r2
 8009220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009224:	464b      	mov	r3, r9
 8009226:	460a      	mov	r2, r1
 8009228:	eb42 0303 	adc.w	r3, r2, r3
 800922c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800923a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009248:	4649      	mov	r1, r9
 800924a:	008b      	lsls	r3, r1, #2
 800924c:	4641      	mov	r1, r8
 800924e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009252:	4641      	mov	r1, r8
 8009254:	008a      	lsls	r2, r1, #2
 8009256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800925a:	f7f7 fccd 	bl	8000bf8 <__aeabi_uldivmod>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4611      	mov	r1, r2
 8009264:	4b38      	ldr	r3, [pc, #224]	@ (8009348 <UART_SetConfig+0x4e4>)
 8009266:	fba3 2301 	umull	r2, r3, r3, r1
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	2264      	movs	r2, #100	@ 0x64
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	1acb      	subs	r3, r1, r3
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	3332      	adds	r3, #50	@ 0x32
 8009278:	4a33      	ldr	r2, [pc, #204]	@ (8009348 <UART_SetConfig+0x4e4>)
 800927a:	fba2 2303 	umull	r2, r3, r2, r3
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009284:	441c      	add	r4, r3
 8009286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800928a:	2200      	movs	r2, #0
 800928c:	673b      	str	r3, [r7, #112]	@ 0x70
 800928e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	1891      	adds	r1, r2, r2
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	415b      	adcs	r3, r3
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092a4:	4641      	mov	r1, r8
 80092a6:	1851      	adds	r1, r2, r1
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	4649      	mov	r1, r9
 80092ac:	414b      	adcs	r3, r1
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	f04f 0200 	mov.w	r2, #0
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092bc:	4659      	mov	r1, fp
 80092be:	00cb      	lsls	r3, r1, #3
 80092c0:	4651      	mov	r1, sl
 80092c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092c6:	4651      	mov	r1, sl
 80092c8:	00ca      	lsls	r2, r1, #3
 80092ca:	4610      	mov	r0, r2
 80092cc:	4619      	mov	r1, r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	4642      	mov	r2, r8
 80092d2:	189b      	adds	r3, r3, r2
 80092d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092d6:	464b      	mov	r3, r9
 80092d8:	460a      	mov	r2, r1
 80092da:	eb42 0303 	adc.w	r3, r2, r3
 80092de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80092ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80092f8:	4649      	mov	r1, r9
 80092fa:	008b      	lsls	r3, r1, #2
 80092fc:	4641      	mov	r1, r8
 80092fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009302:	4641      	mov	r1, r8
 8009304:	008a      	lsls	r2, r1, #2
 8009306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800930a:	f7f7 fc75 	bl	8000bf8 <__aeabi_uldivmod>
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <UART_SetConfig+0x4e4>)
 8009314:	fba3 1302 	umull	r1, r3, r3, r2
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	2164      	movs	r1, #100	@ 0x64
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	3332      	adds	r3, #50	@ 0x32
 8009326:	4a08      	ldr	r2, [pc, #32]	@ (8009348 <UART_SetConfig+0x4e4>)
 8009328:	fba2 2303 	umull	r2, r3, r2, r3
 800932c:	095b      	lsrs	r3, r3, #5
 800932e:	f003 020f 	and.w	r2, r3, #15
 8009332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4422      	add	r2, r4
 800933a:	609a      	str	r2, [r3, #8]
}
 800933c:	bf00      	nop
 800933e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009342:	46bd      	mov	sp, r7
 8009344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009348:	51eb851f 	.word	0x51eb851f

0800934c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800935a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800935e:	2b84      	cmp	r3, #132	@ 0x84
 8009360:	d005      	beq.n	800936e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009362:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	3303      	adds	r3, #3
 800936c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009380:	f000 fee8 	bl	800a154 <vTaskStartScheduler>
  
  return osOK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	bd80      	pop	{r7, pc}

0800938a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800938a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938c:	b089      	sub	sp, #36	@ 0x24
 800938e:	af04      	add	r7, sp, #16
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d020      	beq.n	80093de <osThreadCreate+0x54>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01c      	beq.n	80093de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685c      	ldr	r4, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691e      	ldr	r6, [r3, #16]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff ffc8 	bl	800934c <makeFreeRtosPriority>
 80093bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093c6:	9202      	str	r2, [sp, #8]
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	9100      	str	r1, [sp, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	4632      	mov	r2, r6
 80093d0:	4629      	mov	r1, r5
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 fcf0 	bl	8009db8 <xTaskCreateStatic>
 80093d8:	4603      	mov	r3, r0
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e01c      	b.n	8009418 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685c      	ldr	r4, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff ffaa 	bl	800934c <makeFreeRtosPriority>
 80093f8:	4602      	mov	r2, r0
 80093fa:	f107 030c 	add.w	r3, r7, #12
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	9200      	str	r2, [sp, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	4632      	mov	r2, r6
 8009406:	4629      	mov	r1, r5
 8009408:	4620      	mov	r0, r4
 800940a:	f000 fd35 	bl	8009e78 <xTaskCreate>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009414:	2300      	movs	r3, #0
 8009416:	e000      	b.n	800941a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009418:	68fb      	ldr	r3, [r7, #12]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009422 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <osDelay+0x16>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	e000      	b.n	800943a <osDelay+0x18>
 8009438:	2301      	movs	r3, #1
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fe54 	bl	800a0e8 <vTaskDelay>
  
  return osOK;
 8009440:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	@ 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009458:	f000 fede 	bl	800a218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800945c:	4b5c      	ldr	r3, [pc, #368]	@ (80095d0 <pvPortMalloc+0x184>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009464:	f000 f924 	bl	80096b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009468:	4b5a      	ldr	r3, [pc, #360]	@ (80095d4 <pvPortMalloc+0x188>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	f040 8095 	bne.w	80095a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d01e      	beq.n	80094ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800947c:	2208      	movs	r2, #8
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4413      	add	r3, r2
 8009482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d015      	beq.n	80094ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f023 0307 	bic.w	r3, r3, #7
 8009494:	3308      	adds	r3, #8
 8009496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a6:	f383 8811 	msr	BASEPRI, r3
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	e7fd      	b.n	80094b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d06f      	beq.n	80095a0 <pvPortMalloc+0x154>
 80094c0:	4b45      	ldr	r3, [pc, #276]	@ (80095d8 <pvPortMalloc+0x18c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d86a      	bhi.n	80095a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094ca:	4b44      	ldr	r3, [pc, #272]	@ (80095dc <pvPortMalloc+0x190>)
 80094cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094ce:	4b43      	ldr	r3, [pc, #268]	@ (80095dc <pvPortMalloc+0x190>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094d4:	e004      	b.n	80094e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d903      	bls.n	80094f2 <pvPortMalloc+0xa6>
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f1      	bne.n	80094d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094f2:	4b37      	ldr	r3, [pc, #220]	@ (80095d0 <pvPortMalloc+0x184>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d051      	beq.n	80095a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2208      	movs	r2, #8
 8009502:	4413      	add	r3, r2
 8009504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	1ad2      	subs	r2, r2, r3
 8009516:	2308      	movs	r3, #8
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	429a      	cmp	r2, r3
 800951c:	d920      	bls.n	8009560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800951e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4413      	add	r3, r2
 8009524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	f003 0307 	and.w	r3, r3, #7
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <pvPortMalloc+0xfc>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	613b      	str	r3, [r7, #16]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	1ad2      	subs	r2, r2, r3
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800955a:	69b8      	ldr	r0, [r7, #24]
 800955c:	f000 f90a 	bl	8009774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009560:	4b1d      	ldr	r3, [pc, #116]	@ (80095d8 <pvPortMalloc+0x18c>)
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	4a1b      	ldr	r2, [pc, #108]	@ (80095d8 <pvPortMalloc+0x18c>)
 800956c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800956e:	4b1a      	ldr	r3, [pc, #104]	@ (80095d8 <pvPortMalloc+0x18c>)
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b1b      	ldr	r3, [pc, #108]	@ (80095e0 <pvPortMalloc+0x194>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d203      	bcs.n	8009582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800957a:	4b17      	ldr	r3, [pc, #92]	@ (80095d8 <pvPortMalloc+0x18c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a18      	ldr	r2, [pc, #96]	@ (80095e0 <pvPortMalloc+0x194>)
 8009580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	685a      	ldr	r2, [r3, #4]
 8009586:	4b13      	ldr	r3, [pc, #76]	@ (80095d4 <pvPortMalloc+0x188>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	431a      	orrs	r2, r3
 800958c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009596:	4b13      	ldr	r3, [pc, #76]	@ (80095e4 <pvPortMalloc+0x198>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	4a11      	ldr	r2, [pc, #68]	@ (80095e4 <pvPortMalloc+0x198>)
 800959e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095a0:	f000 fe48 	bl	800a234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <pvPortMalloc+0x17a>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	60fb      	str	r3, [r7, #12]
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <pvPortMalloc+0x176>
	return pvReturn;
 80095c6:	69fb      	ldr	r3, [r7, #28]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3728      	adds	r7, #40	@ 0x28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20004500 	.word	0x20004500
 80095d4:	20004514 	.word	0x20004514
 80095d8:	20004504 	.word	0x20004504
 80095dc:	200044f8 	.word	0x200044f8
 80095e0:	20004508 	.word	0x20004508
 80095e4:	2000450c 	.word	0x2000450c

080095e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d04f      	beq.n	800969a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095fa:	2308      	movs	r3, #8
 80095fc:	425b      	negs	r3, r3
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <vPortFree+0xbc>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4013      	ands	r3, r2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10b      	bne.n	800962e <vPortFree+0x46>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	60fb      	str	r3, [r7, #12]
}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	e7fd      	b.n	800962a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <vPortFree+0x66>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	4b14      	ldr	r3, [pc, #80]	@ (80096a4 <vPortFree+0xbc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01e      	beq.n	800969a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d11a      	bne.n	800969a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <vPortFree+0xbc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	43db      	mvns	r3, r3
 800966e:	401a      	ands	r2, r3
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009674:	f000 fdd0 	bl	800a218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b0a      	ldr	r3, [pc, #40]	@ (80096a8 <vPortFree+0xc0>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4413      	add	r3, r2
 8009682:	4a09      	ldr	r2, [pc, #36]	@ (80096a8 <vPortFree+0xc0>)
 8009684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009686:	6938      	ldr	r0, [r7, #16]
 8009688:	f000 f874 	bl	8009774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800968c:	4b07      	ldr	r3, [pc, #28]	@ (80096ac <vPortFree+0xc4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	4a06      	ldr	r2, [pc, #24]	@ (80096ac <vPortFree+0xc4>)
 8009694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009696:	f000 fdcd 	bl	800a234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800969a:	bf00      	nop
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20004514 	.word	0x20004514
 80096a8:	20004504 	.word	0x20004504
 80096ac:	20004510 	.word	0x20004510

080096b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80096ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096bc:	4b27      	ldr	r3, [pc, #156]	@ (800975c <prvHeapInit+0xac>)
 80096be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00c      	beq.n	80096e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	4a1f      	ldr	r2, [pc, #124]	@ (800975c <prvHeapInit+0xac>)
 80096e0:	4413      	add	r3, r2
 80096e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009760 <prvHeapInit+0xb0>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009760 <prvHeapInit+0xb0>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096fc:	2208      	movs	r2, #8
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	1a9b      	subs	r3, r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4a15      	ldr	r2, [pc, #84]	@ (8009764 <prvHeapInit+0xb4>)
 8009710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009712:	4b14      	ldr	r3, [pc, #80]	@ (8009764 <prvHeapInit+0xb4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800971a:	4b12      	ldr	r3, [pc, #72]	@ (8009764 <prvHeapInit+0xb4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	1ad2      	subs	r2, r2, r3
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009730:	4b0c      	ldr	r3, [pc, #48]	@ (8009764 <prvHeapInit+0xb4>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4a0a      	ldr	r2, [pc, #40]	@ (8009768 <prvHeapInit+0xb8>)
 800973e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	4a09      	ldr	r2, [pc, #36]	@ (800976c <prvHeapInit+0xbc>)
 8009746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009748:	4b09      	ldr	r3, [pc, #36]	@ (8009770 <prvHeapInit+0xc0>)
 800974a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800974e:	601a      	str	r2, [r3, #0]
}
 8009750:	bf00      	nop
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	200008f8 	.word	0x200008f8
 8009760:	200044f8 	.word	0x200044f8
 8009764:	20004500 	.word	0x20004500
 8009768:	20004508 	.word	0x20004508
 800976c:	20004504 	.word	0x20004504
 8009770:	20004514 	.word	0x20004514

08009774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800977c:	4b28      	ldr	r3, [pc, #160]	@ (8009820 <prvInsertBlockIntoFreeList+0xac>)
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e002      	b.n	8009788 <prvInsertBlockIntoFreeList+0x14>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	429a      	cmp	r2, r3
 8009790:	d8f7      	bhi.n	8009782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	4413      	add	r3, r2
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d108      	bne.n	80097b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	441a      	add	r2, r3
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	441a      	add	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d118      	bne.n	80097fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b15      	ldr	r3, [pc, #84]	@ (8009824 <prvInsertBlockIntoFreeList+0xb0>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d00d      	beq.n	80097f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	441a      	add	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	e008      	b.n	8009804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009824 <prvInsertBlockIntoFreeList+0xb0>)
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e003      	b.n	8009804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	429a      	cmp	r2, r3
 800980a:	d002      	beq.n	8009812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009812:	bf00      	nop
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200044f8 	.word	0x200044f8
 8009824:	20004500 	.word	0x20004500

08009828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f103 0208 	add.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 0208 	add.w	r2, r3, #8
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f103 0208 	add.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d103      	bne.n	80098ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e00c      	b.n	8009904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3308      	adds	r3, #8
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e002      	b.n	80098f8 <vListInsert+0x2e>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d2f6      	bcs.n	80098f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6892      	ldr	r2, [r2, #8]
 8009952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6852      	ldr	r2, [r2, #4]
 800995c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d103      	bne.n	8009970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1e5a      	subs	r2, r3, #1
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3b04      	subs	r3, #4
 80099a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80099a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099c0:	4a0c      	ldr	r2, [pc, #48]	@ (80099f4 <pxPortInitialiseStack+0x64>)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3b14      	subs	r3, #20
 80099ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f06f 0202 	mvn.w	r2, #2
 80099de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3b20      	subs	r3, #32
 80099e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	080099f9 	.word	0x080099f9

080099f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a02:	4b13      	ldr	r3, [pc, #76]	@ (8009a50 <prvTaskExitError+0x58>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d00b      	beq.n	8009a24 <prvTaskExitError+0x2c>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	bf00      	nop
 8009a22:	e7fd      	b.n	8009a20 <prvTaskExitError+0x28>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60bb      	str	r3, [r7, #8]
}
 8009a36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a38:	bf00      	nop
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0fc      	beq.n	8009a3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	2000000c 	.word	0x2000000c
	...

08009a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a60:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <pxCurrentTCBConst2>)
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	6808      	ldr	r0, [r1, #0]
 8009a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6a:	f380 8809 	msr	PSP, r0
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f380 8811 	msr	BASEPRI, r0
 8009a7a:	4770      	bx	lr
 8009a7c:	f3af 8000 	nop.w

08009a80 <pxCurrentTCBConst2>:
 8009a80:	20004520 	.word	0x20004520
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a88:	4808      	ldr	r0, [pc, #32]	@ (8009aac <prvPortStartFirstTask+0x24>)
 8009a8a:	6800      	ldr	r0, [r0, #0]
 8009a8c:	6800      	ldr	r0, [r0, #0]
 8009a8e:	f380 8808 	msr	MSP, r0
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f380 8814 	msr	CONTROL, r0
 8009a9a:	b662      	cpsie	i
 8009a9c:	b661      	cpsie	f
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	df00      	svc	0
 8009aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aaa:	bf00      	nop
 8009aac:	e000ed08 	.word	0xe000ed08

08009ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ab6:	4b47      	ldr	r3, [pc, #284]	@ (8009bd4 <xPortStartScheduler+0x124>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a47      	ldr	r2, [pc, #284]	@ (8009bd8 <xPortStartScheduler+0x128>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10b      	bne.n	8009ad8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bd4 <xPortStartScheduler+0x124>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a3f      	ldr	r2, [pc, #252]	@ (8009bdc <xPortStartScheduler+0x12c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10b      	bne.n	8009afa <xPortStartScheduler+0x4a>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	613b      	str	r3, [r7, #16]
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	e7fd      	b.n	8009af6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009afa:	4b39      	ldr	r3, [pc, #228]	@ (8009be0 <xPortStartScheduler+0x130>)
 8009afc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	22ff      	movs	r2, #255	@ 0xff
 8009b0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	4b31      	ldr	r3, [pc, #196]	@ (8009be4 <xPortStartScheduler+0x134>)
 8009b20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b22:	4b31      	ldr	r3, [pc, #196]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b24:	2207      	movs	r2, #7
 8009b26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b28:	e009      	b.n	8009b3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	4a2d      	ldr	r2, [pc, #180]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b46:	2b80      	cmp	r3, #128	@ 0x80
 8009b48:	d0ef      	beq.n	8009b2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b4a:	4b27      	ldr	r3, [pc, #156]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1c3 0307 	rsb	r3, r3, #7
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d00b      	beq.n	8009b6e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60bb      	str	r3, [r7, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	e7fd      	b.n	8009b6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	4a1c      	ldr	r2, [pc, #112]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b78:	4b1b      	ldr	r3, [pc, #108]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b80:	4a19      	ldr	r2, [pc, #100]	@ (8009be8 <xPortStartScheduler+0x138>)
 8009b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b8c:	4b17      	ldr	r3, [pc, #92]	@ (8009bec <xPortStartScheduler+0x13c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a16      	ldr	r2, [pc, #88]	@ (8009bec <xPortStartScheduler+0x13c>)
 8009b92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b98:	4b14      	ldr	r3, [pc, #80]	@ (8009bec <xPortStartScheduler+0x13c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a13      	ldr	r2, [pc, #76]	@ (8009bec <xPortStartScheduler+0x13c>)
 8009b9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ba4:	f000 f8da 	bl	8009d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ba8:	4b11      	ldr	r3, [pc, #68]	@ (8009bf0 <xPortStartScheduler+0x140>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bae:	f000 f8f9 	bl	8009da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bb2:	4b10      	ldr	r3, [pc, #64]	@ (8009bf4 <xPortStartScheduler+0x144>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8009bf4 <xPortStartScheduler+0x144>)
 8009bb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009bbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bbe:	f7ff ff63 	bl	8009a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bc2:	f000 fc8f 	bl	800a4e4 <vTaskSwitchContext>
	prvTaskExitError();
 8009bc6:	f7ff ff17 	bl	80099f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	e000ed00 	.word	0xe000ed00
 8009bd8:	410fc271 	.word	0x410fc271
 8009bdc:	410fc270 	.word	0x410fc270
 8009be0:	e000e400 	.word	0xe000e400
 8009be4:	20004518 	.word	0x20004518
 8009be8:	2000451c 	.word	0x2000451c
 8009bec:	e000ed20 	.word	0xe000ed20
 8009bf0:	2000000c 	.word	0x2000000c
 8009bf4:	e000ef34 	.word	0xe000ef34

08009bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c12:	4b10      	ldr	r3, [pc, #64]	@ (8009c54 <vPortEnterCritical+0x5c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a0e      	ldr	r2, [pc, #56]	@ (8009c54 <vPortEnterCritical+0x5c>)
 8009c1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c54 <vPortEnterCritical+0x5c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d110      	bne.n	8009c46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c24:	4b0c      	ldr	r3, [pc, #48]	@ (8009c58 <vPortEnterCritical+0x60>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <vPortEnterCritical+0x4e>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	603b      	str	r3, [r7, #0]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <vPortEnterCritical+0x4a>
	}
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	2000000c 	.word	0x2000000c
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c62:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <vPortExitCritical+0x50>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <vPortExitCritical+0x26>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	607b      	str	r3, [r7, #4]
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c82:	4b0a      	ldr	r3, [pc, #40]	@ (8009cac <vPortExitCritical+0x50>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4a08      	ldr	r2, [pc, #32]	@ (8009cac <vPortExitCritical+0x50>)
 8009c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c8c:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <vPortExitCritical+0x50>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <vPortExitCritical+0x44>
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	2000000c 	.word	0x2000000c

08009cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cb0:	f3ef 8009 	mrs	r0, PSP
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	4b15      	ldr	r3, [pc, #84]	@ (8009d10 <pxCurrentTCBConst>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	f01e 0f10 	tst.w	lr, #16
 8009cc0:	bf08      	it	eq
 8009cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	6010      	str	r0, [r2, #0]
 8009ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009cd4:	f380 8811 	msr	BASEPRI, r0
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f000 fc00 	bl	800a4e4 <vTaskSwitchContext>
 8009ce4:	f04f 0000 	mov.w	r0, #0
 8009ce8:	f380 8811 	msr	BASEPRI, r0
 8009cec:	bc09      	pop	{r0, r3}
 8009cee:	6819      	ldr	r1, [r3, #0]
 8009cf0:	6808      	ldr	r0, [r1, #0]
 8009cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf6:	f01e 0f10 	tst.w	lr, #16
 8009cfa:	bf08      	it	eq
 8009cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d00:	f380 8809 	msr	PSP, r0
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w

08009d10 <pxCurrentTCBConst>:
 8009d10:	20004520 	.word	0x20004520
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop

08009d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	607b      	str	r3, [r7, #4]
}
 8009d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d32:	f000 fb1d 	bl	800a370 <xTaskIncrementTick>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <SysTick_Handler+0x40>)
 8009d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d60:	4b0b      	ldr	r3, [pc, #44]	@ (8009d90 <vPortSetupTimerInterrupt+0x34>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <vPortSetupTimerInterrupt+0x38>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d98 <vPortSetupTimerInterrupt+0x3c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	@ (8009d9c <vPortSetupTimerInterrupt+0x40>)
 8009d72:	fba2 2303 	umull	r2, r3, r2, r3
 8009d76:	099b      	lsrs	r3, r3, #6
 8009d78:	4a09      	ldr	r2, [pc, #36]	@ (8009da0 <vPortSetupTimerInterrupt+0x44>)
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d7e:	4b04      	ldr	r3, [pc, #16]	@ (8009d90 <vPortSetupTimerInterrupt+0x34>)
 8009d80:	2207      	movs	r2, #7
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	e000e010 	.word	0xe000e010
 8009d94:	e000e018 	.word	0xe000e018
 8009d98:	20000000 	.word	0x20000000
 8009d9c:	10624dd3 	.word	0x10624dd3
 8009da0:	e000e014 	.word	0xe000e014

08009da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009da4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009db4 <vPortEnableVFP+0x10>
 8009da8:	6801      	ldr	r1, [r0, #0]
 8009daa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009dae:	6001      	str	r1, [r0, #0]
 8009db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009db2:	bf00      	nop
 8009db4:	e000ed88 	.word	0xe000ed88

08009db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08e      	sub	sp, #56	@ 0x38
 8009dbc:	af04      	add	r7, sp, #16
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10b      	bne.n	8009de4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	623b      	str	r3, [r7, #32]
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	e7fd      	b.n	8009de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	61fb      	str	r3, [r7, #28]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e02:	2354      	movs	r3, #84	@ 0x54
 8009e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b54      	cmp	r3, #84	@ 0x54
 8009e0a:	d00b      	beq.n	8009e24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	61bb      	str	r3, [r7, #24]
}
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01e      	beq.n	8009e6a <xTaskCreateStatic+0xb2>
 8009e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01b      	beq.n	8009e6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e44:	2300      	movs	r3, #0
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	9302      	str	r3, [sp, #8]
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f850 	bl	8009f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e64:	f000 f8d6 	bl	800a014 <prvAddNewTaskToReadyList>
 8009e68:	e001      	b.n	8009e6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e6e:	697b      	ldr	r3, [r7, #20]
	}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3728      	adds	r7, #40	@ 0x28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08c      	sub	sp, #48	@ 0x30
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	4613      	mov	r3, r2
 8009e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff fadd 	bl	800944c <pvPortMalloc>
 8009e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00e      	beq.n	8009eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e9a:	2054      	movs	r0, #84	@ 0x54
 8009e9c:	f7ff fad6 	bl	800944c <pvPortMalloc>
 8009ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8009eae:	e005      	b.n	8009ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	f7ff fb99 	bl	80095e8 <vPortFree>
 8009eb6:	e001      	b.n	8009ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d017      	beq.n	8009ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009eca:	88fa      	ldrh	r2, [r7, #6]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	9303      	str	r3, [sp, #12]
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	9302      	str	r3, [sp, #8]
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f80e 	bl	8009f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ee6:	69f8      	ldr	r0, [r7, #28]
 8009ee8:	f000 f894 	bl	800a014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009eec:	2301      	movs	r3, #1
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	e002      	b.n	8009ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b088      	sub	sp, #32
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
 8009f0e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	f023 0307 	bic.w	r3, r3, #7
 8009f28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	f003 0307 	and.w	r3, r3, #7
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	617b      	str	r3, [r7, #20]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d01f      	beq.n	8009f92 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f52:	2300      	movs	r3, #0
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	e012      	b.n	8009f7e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	7819      	ldrb	r1, [r3, #0]
 8009f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	3334      	adds	r3, #52	@ 0x34
 8009f68:	460a      	mov	r2, r1
 8009f6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d006      	beq.n	8009f86 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	2b0f      	cmp	r3, #15
 8009f82:	d9e9      	bls.n	8009f58 <prvInitialiseNewTask+0x56>
 8009f84:	e000      	b.n	8009f88 <prvInitialiseNewTask+0x86>
			{
				break;
 8009f86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f90:	e003      	b.n	8009f9a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	2b06      	cmp	r3, #6
 8009f9e:	d901      	bls.n	8009fa4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fa0:	2306      	movs	r3, #6
 8009fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fae:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fc54 	bl	8009868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	3318      	adds	r3, #24
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff fc4f 	bl	8009868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	f1c3 0207 	rsb	r2, r3, #7
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	68f9      	ldr	r1, [r7, #12]
 8009ff2:	69b8      	ldr	r0, [r7, #24]
 8009ff4:	f7ff fccc 	bl	8009990 <pxPortInitialiseStack>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00a:	bf00      	nop
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a01c:	f7ff fdec 	bl	8009bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a020:	4b2a      	ldr	r3, [pc, #168]	@ (800a0cc <prvAddNewTaskToReadyList+0xb8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3301      	adds	r3, #1
 800a026:	4a29      	ldr	r2, [pc, #164]	@ (800a0cc <prvAddNewTaskToReadyList+0xb8>)
 800a028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a02a:	4b29      	ldr	r3, [pc, #164]	@ (800a0d0 <prvAddNewTaskToReadyList+0xbc>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a032:	4a27      	ldr	r2, [pc, #156]	@ (800a0d0 <prvAddNewTaskToReadyList+0xbc>)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a038:	4b24      	ldr	r3, [pc, #144]	@ (800a0cc <prvAddNewTaskToReadyList+0xb8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d110      	bne.n	800a062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a040:	f000 fac4 	bl	800a5cc <prvInitialiseTaskLists>
 800a044:	e00d      	b.n	800a062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a046:	4b23      	ldr	r3, [pc, #140]	@ (800a0d4 <prvAddNewTaskToReadyList+0xc0>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a04e:	4b20      	ldr	r3, [pc, #128]	@ (800a0d0 <prvAddNewTaskToReadyList+0xbc>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a058:	429a      	cmp	r2, r3
 800a05a:	d802      	bhi.n	800a062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a05c:	4a1c      	ldr	r2, [pc, #112]	@ (800a0d0 <prvAddNewTaskToReadyList+0xbc>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a062:	4b1d      	ldr	r3, [pc, #116]	@ (800a0d8 <prvAddNewTaskToReadyList+0xc4>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3301      	adds	r3, #1
 800a068:	4a1b      	ldr	r2, [pc, #108]	@ (800a0d8 <prvAddNewTaskToReadyList+0xc4>)
 800a06a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	2201      	movs	r2, #1
 800a072:	409a      	lsls	r2, r3
 800a074:	4b19      	ldr	r3, [pc, #100]	@ (800a0dc <prvAddNewTaskToReadyList+0xc8>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4313      	orrs	r3, r2
 800a07a:	4a18      	ldr	r2, [pc, #96]	@ (800a0dc <prvAddNewTaskToReadyList+0xc8>)
 800a07c:	6013      	str	r3, [r2, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4a15      	ldr	r2, [pc, #84]	@ (800a0e0 <prvAddNewTaskToReadyList+0xcc>)
 800a08c:	441a      	add	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	4619      	mov	r1, r3
 800a094:	4610      	mov	r0, r2
 800a096:	f7ff fbf4 	bl	8009882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a09a:	f7ff fddf 	bl	8009c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <prvAddNewTaskToReadyList+0xc0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00e      	beq.n	800a0c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <prvAddNewTaskToReadyList+0xbc>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d207      	bcs.n	800a0c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e4 <prvAddNewTaskToReadyList+0xd0>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20004620 	.word	0x20004620
 800a0d0:	20004520 	.word	0x20004520
 800a0d4:	2000462c 	.word	0x2000462c
 800a0d8:	2000463c 	.word	0x2000463c
 800a0dc:	20004628 	.word	0x20004628
 800a0e0:	20004524 	.word	0x20004524
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d018      	beq.n	800a12c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a0fa:	4b14      	ldr	r3, [pc, #80]	@ (800a14c <vTaskDelay+0x64>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00b      	beq.n	800a11a <vTaskDelay+0x32>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60bb      	str	r3, [r7, #8]
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	e7fd      	b.n	800a116 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a11a:	f000 f87d 	bl	800a218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a11e:	2100      	movs	r1, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fb11 	bl	800a748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a126:	f000 f885 	bl	800a234 <xTaskResumeAll>
 800a12a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d107      	bne.n	800a142 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a132:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <vTaskDelay+0x68>)
 800a134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	20004648 	.word	0x20004648
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	@ 0x28
 800a158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a162:	463a      	mov	r2, r7
 800a164:	1d39      	adds	r1, r7, #4
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7f7 f83a 	bl	80011e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	9202      	str	r2, [sp, #8]
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	2300      	movs	r3, #0
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	2300      	movs	r3, #0
 800a180:	460a      	mov	r2, r1
 800a182:	491f      	ldr	r1, [pc, #124]	@ (800a200 <vTaskStartScheduler+0xac>)
 800a184:	481f      	ldr	r0, [pc, #124]	@ (800a204 <vTaskStartScheduler+0xb0>)
 800a186:	f7ff fe17 	bl	8009db8 <xTaskCreateStatic>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4a1e      	ldr	r2, [pc, #120]	@ (800a208 <vTaskStartScheduler+0xb4>)
 800a18e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a190:	4b1d      	ldr	r3, [pc, #116]	@ (800a208 <vTaskStartScheduler+0xb4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a198:	2301      	movs	r3, #1
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	e001      	b.n	800a1a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d116      	bne.n	800a1d6 <vTaskStartScheduler+0x82>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	613b      	str	r3, [r7, #16]
}
 800a1ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1bc:	4b13      	ldr	r3, [pc, #76]	@ (800a20c <vTaskStartScheduler+0xb8>)
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1c4:	4b12      	ldr	r3, [pc, #72]	@ (800a210 <vTaskStartScheduler+0xbc>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1ca:	4b12      	ldr	r3, [pc, #72]	@ (800a214 <vTaskStartScheduler+0xc0>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1d0:	f7ff fc6e 	bl	8009ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1d4:	e00f      	b.n	800a1f6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1dc:	d10b      	bne.n	800a1f6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	60fb      	str	r3, [r7, #12]
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <vTaskStartScheduler+0x9e>
}
 800a1f6:	bf00      	nop
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	0800fd1c 	.word	0x0800fd1c
 800a204:	0800a59d 	.word	0x0800a59d
 800a208:	20004644 	.word	0x20004644
 800a20c:	20004640 	.word	0x20004640
 800a210:	2000462c 	.word	0x2000462c
 800a214:	20004624 	.word	0x20004624

0800a218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a21c:	4b04      	ldr	r3, [pc, #16]	@ (800a230 <vTaskSuspendAll+0x18>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	4a03      	ldr	r2, [pc, #12]	@ (800a230 <vTaskSuspendAll+0x18>)
 800a224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	20004648 	.word	0x20004648

0800a234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a242:	4b42      	ldr	r3, [pc, #264]	@ (800a34c <xTaskResumeAll+0x118>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10b      	bne.n	800a262 <xTaskResumeAll+0x2e>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	603b      	str	r3, [r7, #0]
}
 800a25c:	bf00      	nop
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a262:	f7ff fcc9 	bl	8009bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a266:	4b39      	ldr	r3, [pc, #228]	@ (800a34c <xTaskResumeAll+0x118>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	4a37      	ldr	r2, [pc, #220]	@ (800a34c <xTaskResumeAll+0x118>)
 800a26e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a270:	4b36      	ldr	r3, [pc, #216]	@ (800a34c <xTaskResumeAll+0x118>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d161      	bne.n	800a33c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a278:	4b35      	ldr	r3, [pc, #212]	@ (800a350 <xTaskResumeAll+0x11c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d05d      	beq.n	800a33c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a280:	e02e      	b.n	800a2e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b34      	ldr	r3, [pc, #208]	@ (800a354 <xTaskResumeAll+0x120>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3318      	adds	r3, #24
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff fb54 	bl	800993c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3304      	adds	r3, #4
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fb4f 	bl	800993c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	409a      	lsls	r2, r3
 800a2a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a358 <xTaskResumeAll+0x124>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	4a2a      	ldr	r2, [pc, #168]	@ (800a358 <xTaskResumeAll+0x124>)
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4a27      	ldr	r2, [pc, #156]	@ (800a35c <xTaskResumeAll+0x128>)
 800a2be:	441a      	add	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7ff fadb 	bl	8009882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d0:	4b23      	ldr	r3, [pc, #140]	@ (800a360 <xTaskResumeAll+0x12c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d302      	bcc.n	800a2e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2da:	4b22      	ldr	r3, [pc, #136]	@ (800a364 <xTaskResumeAll+0x130>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a354 <xTaskResumeAll+0x120>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1cc      	bne.n	800a282 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2ee:	f000 fa0b 	bl	800a708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800a368 <xTaskResumeAll+0x134>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d010      	beq.n	800a320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2fe:	f000 f837 	bl	800a370 <xTaskIncrementTick>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a308:	4b16      	ldr	r3, [pc, #88]	@ (800a364 <xTaskResumeAll+0x130>)
 800a30a:	2201      	movs	r2, #1
 800a30c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3b01      	subs	r3, #1
 800a312:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f1      	bne.n	800a2fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a31a:	4b13      	ldr	r3, [pc, #76]	@ (800a368 <xTaskResumeAll+0x134>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a320:	4b10      	ldr	r3, [pc, #64]	@ (800a364 <xTaskResumeAll+0x130>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <xTaskResumeAll+0x138>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a33c:	f7ff fc8e 	bl	8009c5c <vPortExitCritical>

	return xAlreadyYielded;
 800a340:	68bb      	ldr	r3, [r7, #8]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20004648 	.word	0x20004648
 800a350:	20004620 	.word	0x20004620
 800a354:	200045e0 	.word	0x200045e0
 800a358:	20004628 	.word	0x20004628
 800a35c:	20004524 	.word	0x20004524
 800a360:	20004520 	.word	0x20004520
 800a364:	20004634 	.word	0x20004634
 800a368:	20004630 	.word	0x20004630
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a376:	2300      	movs	r3, #0
 800a378:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a37a:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b8 <xTaskIncrementTick+0x148>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f040 808f 	bne.w	800a4a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a384:	4b4d      	ldr	r3, [pc, #308]	@ (800a4bc <xTaskIncrementTick+0x14c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3301      	adds	r3, #1
 800a38a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a38c:	4a4b      	ldr	r2, [pc, #300]	@ (800a4bc <xTaskIncrementTick+0x14c>)
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d121      	bne.n	800a3dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a398:	4b49      	ldr	r3, [pc, #292]	@ (800a4c0 <xTaskIncrementTick+0x150>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00b      	beq.n	800a3ba <xTaskIncrementTick+0x4a>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	603b      	str	r3, [r7, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	e7fd      	b.n	800a3b6 <xTaskIncrementTick+0x46>
 800a3ba:	4b41      	ldr	r3, [pc, #260]	@ (800a4c0 <xTaskIncrementTick+0x150>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	4b40      	ldr	r3, [pc, #256]	@ (800a4c4 <xTaskIncrementTick+0x154>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a3e      	ldr	r2, [pc, #248]	@ (800a4c0 <xTaskIncrementTick+0x150>)
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	4a3e      	ldr	r2, [pc, #248]	@ (800a4c4 <xTaskIncrementTick+0x154>)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	4b3e      	ldr	r3, [pc, #248]	@ (800a4c8 <xTaskIncrementTick+0x158>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c8 <xTaskIncrementTick+0x158>)
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	f000 f996 	bl	800a708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a4cc <xTaskIncrementTick+0x15c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d348      	bcc.n	800a478 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3e6:	4b36      	ldr	r3, [pc, #216]	@ (800a4c0 <xTaskIncrementTick+0x150>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d104      	bne.n	800a3fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3f0:	4b36      	ldr	r3, [pc, #216]	@ (800a4cc <xTaskIncrementTick+0x15c>)
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f6:	601a      	str	r2, [r3, #0]
					break;
 800a3f8:	e03e      	b.n	800a478 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fa:	4b31      	ldr	r3, [pc, #196]	@ (800a4c0 <xTaskIncrementTick+0x150>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d203      	bcs.n	800a41a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a412:	4a2e      	ldr	r2, [pc, #184]	@ (800a4cc <xTaskIncrementTick+0x15c>)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a418:	e02e      	b.n	800a478 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	3304      	adds	r3, #4
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fa8c 	bl	800993c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3318      	adds	r3, #24
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fa83 	bl	800993c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43a:	2201      	movs	r2, #1
 800a43c:	409a      	lsls	r2, r3
 800a43e:	4b24      	ldr	r3, [pc, #144]	@ (800a4d0 <xTaskIncrementTick+0x160>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4313      	orrs	r3, r2
 800a444:	4a22      	ldr	r2, [pc, #136]	@ (800a4d0 <xTaskIncrementTick+0x160>)
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4a1f      	ldr	r2, [pc, #124]	@ (800a4d4 <xTaskIncrementTick+0x164>)
 800a456:	441a      	add	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	3304      	adds	r3, #4
 800a45c:	4619      	mov	r1, r3
 800a45e:	4610      	mov	r0, r2
 800a460:	f7ff fa0f 	bl	8009882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a468:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d8 <xTaskIncrementTick+0x168>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46e:	429a      	cmp	r2, r3
 800a470:	d3b9      	bcc.n	800a3e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a472:	2301      	movs	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a476:	e7b6      	b.n	800a3e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a478:	4b17      	ldr	r3, [pc, #92]	@ (800a4d8 <xTaskIncrementTick+0x168>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47e:	4915      	ldr	r1, [pc, #84]	@ (800a4d4 <xTaskIncrementTick+0x164>)
 800a480:	4613      	mov	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	440b      	add	r3, r1
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d901      	bls.n	800a494 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a494:	4b11      	ldr	r3, [pc, #68]	@ (800a4dc <xTaskIncrementTick+0x16c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a49c:	2301      	movs	r3, #1
 800a49e:	617b      	str	r3, [r7, #20]
 800a4a0:	e004      	b.n	800a4ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a4e0 <xTaskIncrementTick+0x170>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	4a0d      	ldr	r2, [pc, #52]	@ (800a4e0 <xTaskIncrementTick+0x170>)
 800a4aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4ac:	697b      	ldr	r3, [r7, #20]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20004648 	.word	0x20004648
 800a4bc:	20004624 	.word	0x20004624
 800a4c0:	200045d8 	.word	0x200045d8
 800a4c4:	200045dc 	.word	0x200045dc
 800a4c8:	20004638 	.word	0x20004638
 800a4cc:	20004640 	.word	0x20004640
 800a4d0:	20004628 	.word	0x20004628
 800a4d4:	20004524 	.word	0x20004524
 800a4d8:	20004520 	.word	0x20004520
 800a4dc:	20004634 	.word	0x20004634
 800a4e0:	20004630 	.word	0x20004630

0800a4e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4ea:	4b27      	ldr	r3, [pc, #156]	@ (800a588 <vTaskSwitchContext+0xa4>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4f2:	4b26      	ldr	r3, [pc, #152]	@ (800a58c <vTaskSwitchContext+0xa8>)
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4f8:	e040      	b.n	800a57c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a4fa:	4b24      	ldr	r3, [pc, #144]	@ (800a58c <vTaskSwitchContext+0xa8>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a500:	4b23      	ldr	r3, [pc, #140]	@ (800a590 <vTaskSwitchContext+0xac>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	fab3 f383 	clz	r3, r3
 800a50c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a50e:	7afb      	ldrb	r3, [r7, #11]
 800a510:	f1c3 031f 	rsb	r3, r3, #31
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	491f      	ldr	r1, [pc, #124]	@ (800a594 <vTaskSwitchContext+0xb0>)
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10b      	bne.n	800a542 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	607b      	str	r3, [r7, #4]
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	e7fd      	b.n	800a53e <vTaskSwitchContext+0x5a>
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4a11      	ldr	r2, [pc, #68]	@ (800a594 <vTaskSwitchContext+0xb0>)
 800a54e:	4413      	add	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	605a      	str	r2, [r3, #4]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3308      	adds	r3, #8
 800a564:	429a      	cmp	r2, r3
 800a566:	d104      	bne.n	800a572 <vTaskSwitchContext+0x8e>
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	605a      	str	r2, [r3, #4]
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	4a07      	ldr	r2, [pc, #28]	@ (800a598 <vTaskSwitchContext+0xb4>)
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20004648 	.word	0x20004648
 800a58c:	20004634 	.word	0x20004634
 800a590:	20004628 	.word	0x20004628
 800a594:	20004524 	.word	0x20004524
 800a598:	20004520 	.word	0x20004520

0800a59c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5a4:	f000 f852 	bl	800a64c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5a8:	4b06      	ldr	r3, [pc, #24]	@ (800a5c4 <prvIdleTask+0x28>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d9f9      	bls.n	800a5a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5b0:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <prvIdleTask+0x2c>)
 800a5b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5c0:	e7f0      	b.n	800a5a4 <prvIdleTask+0x8>
 800a5c2:	bf00      	nop
 800a5c4:	20004524 	.word	0x20004524
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	607b      	str	r3, [r7, #4]
 800a5d6:	e00c      	b.n	800a5f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4a12      	ldr	r2, [pc, #72]	@ (800a62c <prvInitialiseTaskLists+0x60>)
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff f91e 	bl	8009828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	607b      	str	r3, [r7, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b06      	cmp	r3, #6
 800a5f6:	d9ef      	bls.n	800a5d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5f8:	480d      	ldr	r0, [pc, #52]	@ (800a630 <prvInitialiseTaskLists+0x64>)
 800a5fa:	f7ff f915 	bl	8009828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5fe:	480d      	ldr	r0, [pc, #52]	@ (800a634 <prvInitialiseTaskLists+0x68>)
 800a600:	f7ff f912 	bl	8009828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a604:	480c      	ldr	r0, [pc, #48]	@ (800a638 <prvInitialiseTaskLists+0x6c>)
 800a606:	f7ff f90f 	bl	8009828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a60a:	480c      	ldr	r0, [pc, #48]	@ (800a63c <prvInitialiseTaskLists+0x70>)
 800a60c:	f7ff f90c 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a610:	480b      	ldr	r0, [pc, #44]	@ (800a640 <prvInitialiseTaskLists+0x74>)
 800a612:	f7ff f909 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a616:	4b0b      	ldr	r3, [pc, #44]	@ (800a644 <prvInitialiseTaskLists+0x78>)
 800a618:	4a05      	ldr	r2, [pc, #20]	@ (800a630 <prvInitialiseTaskLists+0x64>)
 800a61a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a61c:	4b0a      	ldr	r3, [pc, #40]	@ (800a648 <prvInitialiseTaskLists+0x7c>)
 800a61e:	4a05      	ldr	r2, [pc, #20]	@ (800a634 <prvInitialiseTaskLists+0x68>)
 800a620:	601a      	str	r2, [r3, #0]
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20004524 	.word	0x20004524
 800a630:	200045b0 	.word	0x200045b0
 800a634:	200045c4 	.word	0x200045c4
 800a638:	200045e0 	.word	0x200045e0
 800a63c:	200045f4 	.word	0x200045f4
 800a640:	2000460c 	.word	0x2000460c
 800a644:	200045d8 	.word	0x200045d8
 800a648:	200045dc 	.word	0x200045dc

0800a64c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a652:	e019      	b.n	800a688 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a654:	f7ff fad0 	bl	8009bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a658:	4b10      	ldr	r3, [pc, #64]	@ (800a69c <prvCheckTasksWaitingTermination+0x50>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3304      	adds	r3, #4
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff f969 	bl	800993c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <prvCheckTasksWaitingTermination+0x54>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3b01      	subs	r3, #1
 800a670:	4a0b      	ldr	r2, [pc, #44]	@ (800a6a0 <prvCheckTasksWaitingTermination+0x54>)
 800a672:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a674:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a4 <prvCheckTasksWaitingTermination+0x58>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3b01      	subs	r3, #1
 800a67a:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a4 <prvCheckTasksWaitingTermination+0x58>)
 800a67c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a67e:	f7ff faed 	bl	8009c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f810 	bl	800a6a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a688:	4b06      	ldr	r3, [pc, #24]	@ (800a6a4 <prvCheckTasksWaitingTermination+0x58>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e1      	bne.n	800a654 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	200045f4 	.word	0x200045f4
 800a6a0:	20004620 	.word	0x20004620
 800a6a4:	20004608 	.word	0x20004608

0800a6a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d108      	bne.n	800a6cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe ff92 	bl	80095e8 <vPortFree>
				vPortFree( pxTCB );
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7fe ff8f 	bl	80095e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6ca:	e019      	b.n	800a700 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d103      	bne.n	800a6de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7fe ff86 	bl	80095e8 <vPortFree>
	}
 800a6dc:	e010      	b.n	800a700 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d00b      	beq.n	800a700 <prvDeleteTCB+0x58>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <prvDeleteTCB+0x54>
	}
 800a700:	bf00      	nop
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a70e:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <prvResetNextTaskUnblockTime+0x38>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a718:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <prvResetNextTaskUnblockTime+0x3c>)
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a720:	e008      	b.n	800a734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a722:	4b07      	ldr	r3, [pc, #28]	@ (800a740 <prvResetNextTaskUnblockTime+0x38>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4a04      	ldr	r2, [pc, #16]	@ (800a744 <prvResetNextTaskUnblockTime+0x3c>)
 800a732:	6013      	str	r3, [r2, #0]
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	200045d8 	.word	0x200045d8
 800a744:	20004640 	.word	0x20004640

0800a748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a752:	4b29      	ldr	r3, [pc, #164]	@ (800a7f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a758:	4b28      	ldr	r3, [pc, #160]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff f8ec 	bl	800993c <uxListRemove>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a76a:	4b24      	ldr	r3, [pc, #144]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a770:	2201      	movs	r2, #1
 800a772:	fa02 f303 	lsl.w	r3, r2, r3
 800a776:	43da      	mvns	r2, r3
 800a778:	4b21      	ldr	r3, [pc, #132]	@ (800a800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4013      	ands	r3, r2
 800a77e:	4a20      	ldr	r2, [pc, #128]	@ (800a800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d10a      	bne.n	800a7a0 <prvAddCurrentTaskToDelayedList+0x58>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a790:	4b1a      	ldr	r3, [pc, #104]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	481a      	ldr	r0, [pc, #104]	@ (800a804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a79a:	f7ff f872 	bl	8009882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a79e:	e026      	b.n	800a7ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7a8:	4b14      	ldr	r3, [pc, #80]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d209      	bcs.n	800a7cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b8:	4b13      	ldr	r3, [pc, #76]	@ (800a808 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f7ff f880 	bl	80098ca <vListInsert>
}
 800a7ca:	e010      	b.n	800a7ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a80c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f7ff f876 	bl	80098ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7de:	4b0c      	ldr	r3, [pc, #48]	@ (800a810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d202      	bcs.n	800a7ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a7e8:	4a09      	ldr	r2, [pc, #36]	@ (800a810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6013      	str	r3, [r2, #0]
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004624 	.word	0x20004624
 800a7fc:	20004520 	.word	0x20004520
 800a800:	20004628 	.word	0x20004628
 800a804:	2000460c 	.word	0x2000460c
 800a808:	200045dc 	.word	0x200045dc
 800a80c:	200045d8 	.word	0x200045d8
 800a810:	20004640 	.word	0x20004640

0800a814 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                          0, -1, 0,
                                          0, 0, 1};

static unsigned short inv_row_2_scale(const signed char *row) {
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  unsigned short b;
  if (row[0] > 0)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f993 3000 	ldrsb.w	r3, [r3]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd02      	ble.n	800a82c <inv_row_2_scale+0x18>
    b = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	81fb      	strh	r3, [r7, #14]
 800a82a:	e02d      	b.n	800a888 <inv_row_2_scale+0x74>
  else if (row[0] < 0)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f993 3000 	ldrsb.w	r3, [r3]
 800a832:	2b00      	cmp	r3, #0
 800a834:	da02      	bge.n	800a83c <inv_row_2_scale+0x28>
    b = 4;
 800a836:	2304      	movs	r3, #4
 800a838:	81fb      	strh	r3, [r7, #14]
 800a83a:	e025      	b.n	800a888 <inv_row_2_scale+0x74>
  else if (row[1] > 0)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3301      	adds	r3, #1
 800a840:	f993 3000 	ldrsb.w	r3, [r3]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd02      	ble.n	800a84e <inv_row_2_scale+0x3a>
    b = 1;
 800a848:	2301      	movs	r3, #1
 800a84a:	81fb      	strh	r3, [r7, #14]
 800a84c:	e01c      	b.n	800a888 <inv_row_2_scale+0x74>
  else if (row[1] < 0)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3301      	adds	r3, #1
 800a852:	f993 3000 	ldrsb.w	r3, [r3]
 800a856:	2b00      	cmp	r3, #0
 800a858:	da02      	bge.n	800a860 <inv_row_2_scale+0x4c>
    b = 5;
 800a85a:	2305      	movs	r3, #5
 800a85c:	81fb      	strh	r3, [r7, #14]
 800a85e:	e013      	b.n	800a888 <inv_row_2_scale+0x74>
  else if (row[2] > 0)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3302      	adds	r3, #2
 800a864:	f993 3000 	ldrsb.w	r3, [r3]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	dd02      	ble.n	800a872 <inv_row_2_scale+0x5e>
    b = 2;
 800a86c:	2302      	movs	r3, #2
 800a86e:	81fb      	strh	r3, [r7, #14]
 800a870:	e00a      	b.n	800a888 <inv_row_2_scale+0x74>
  else if (row[2] < 0)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3302      	adds	r3, #2
 800a876:	f993 3000 	ldrsb.w	r3, [r3]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da02      	bge.n	800a884 <inv_row_2_scale+0x70>
    b = 6;
 800a87e:	2306      	movs	r3, #6
 800a880:	81fb      	strh	r3, [r7, #14]
 800a882:	e001      	b.n	800a888 <inv_row_2_scale+0x74>
  else
    b = 7;
 800a884:	2307      	movs	r3, #7
 800a886:	81fb      	strh	r3, [r7, #14]
  return b;
 800a888:	89fb      	ldrh	r3, [r7, #14]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  unsigned short scalar;

  scalar = inv_row_2_scale(mtx);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff ffb8 	bl	800a814 <inv_row_2_scale>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 3) << 3;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3303      	adds	r3, #3
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff ffb1 	bl	800a814 <inv_row_2_scale>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	b21a      	sxth	r2, r3
 800a8b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	b21b      	sxth	r3, r3
 800a8c0:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 6) << 6;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3306      	adds	r3, #6
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff ffa4 	bl	800a814 <inv_row_2_scale>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	019b      	lsls	r3, r3, #6
 800a8d0:	b21a      	sxth	r2, r3
 800a8d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	b21b      	sxth	r3, r3
 800a8da:	81fb      	strh	r3, [r7, #14]

  return scalar;
 800a8dc:	89fb      	ldrh	r3, [r7, #14]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
	...

0800a8e8 <MPU_6500_Init>:
    return -1;
  }
  return 0;
}

int MPU_6500_Init(void) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
  int result;
  struct int_param_s int_param;

  result = mpu_init(&int_param);
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fddb 	bl	800b4ac <mpu_init>
 800a8f6:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <MPU_6500_Init+0x1c>
    return -1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	e054      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800a904:	2078      	movs	r0, #120	@ 0x78
 800a906:	f001 faff 	bl	800bf08 <mpu_set_sensors>
 800a90a:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <MPU_6500_Init+0x30>
    return -2;
 800a912:	f06f 0301 	mvn.w	r3, #1
 800a916:	e04a      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800a918:	2078      	movs	r0, #120	@ 0x78
 800a91a:	f001 faa3 	bl	800be64 <mpu_configure_fifo>
 800a91e:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <MPU_6500_Init+0x44>
    return -3;
 800a926:	f06f 0302 	mvn.w	r3, #2
 800a92a:	e040      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 800a92c:	2064      	movs	r0, #100	@ 0x64
 800a92e:	f001 fa29 	bl	800bd84 <mpu_set_sample_rate>
 800a932:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <MPU_6500_Init+0x58>
    return -4;
 800a93a:	f06f 0303 	mvn.w	r3, #3
 800a93e:	e036      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }


  result = dmp_load_motion_driver_firmware();
 800a940:	f001 ff20 	bl	800c784 <dmp_load_motion_driver_firmware>
 800a944:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <MPU_6500_Init+0x6a>
    return -5;
 800a94c:	f06f 0304 	mvn.w	r3, #4
 800a950:	e02d      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800a952:	4819      	ldr	r0, [pc, #100]	@ (800a9b8 <MPU_6500_Init+0xd0>)
 800a954:	f7ff ff9f 	bl	800a896 <inv_orientation_matrix_to_scalar>
 800a958:	4603      	mov	r3, r0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 ff22 	bl	800c7a4 <dmp_set_orientation>
 800a960:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <MPU_6500_Init+0x86>
    return -6;
 800a968:	f06f 0305 	mvn.w	r3, #5
 800a96c:	e01f      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800a96e:	f240 1073 	movw	r0, #371	@ 0x173
 800a972:	f002 fa8d 	bl	800ce90 <dmp_enable_feature>
 800a976:	6078      	str	r0, [r7, #4]
                              DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
                              DMP_FEATURE_GYRO_CAL);
  if (result != 0) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <MPU_6500_Init+0x9c>
    return -7;
 800a97e:	f06f 0306 	mvn.w	r3, #6
 800a982:	e014      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 800a984:	2064      	movs	r0, #100	@ 0x64
 800a986:	f001 fff9 	bl	800c97c <dmp_set_fifo_rate>
 800a98a:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <MPU_6500_Init+0xb0>
    return -8;
 800a992:	f06f 0307 	mvn.w	r3, #7
 800a996:	e00a      	b.n	800a9ae <MPU_6500_Init+0xc6>
//	result = run_self_test();
//	if(result != 0){
//		return -9;
//	}

  result = mpu_set_dmp_state(1);
 800a998:	2001      	movs	r0, #1
 800a99a:	f001 fe8d 	bl	800c6b8 <mpu_set_dmp_state>
 800a99e:	6078      	str	r0, [r7, #4]
  if (result != 0) {
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <MPU_6500_Init+0xc4>
    return -10;
 800a9a6:	f06f 0309 	mvn.w	r3, #9
 800a9aa:	e000      	b.n	800a9ae <MPU_6500_Init+0xc6>
  }

  return 0;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000010 	.word	0x20000010
 800a9bc:	00000000 	.word	0x00000000

0800a9c0 <MPU6500_DMP_Get_Data>:

#define Q30 (1073741824.0f)

int
MPU6500_DMP_Get_Data(float *pitch, float *roll, float *yaw, float *ax, float *ay, float *az, float *gyrox, float *gyroy,
                     float *gyroz) {
 800a9c0:	b5b0      	push	{r4, r5, r7, lr}
 800a9c2:	b094      	sub	sp, #80	@ 0x50
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
  float q0 = 0.0f;
 800a9ce:	f04f 0300 	mov.w	r3, #0
 800a9d2:	647b      	str	r3, [r7, #68]	@ 0x44
  float q1 = 0.0f;
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	643b      	str	r3, [r7, #64]	@ 0x40
  float q2 = 0.0f;
 800a9da:	f04f 0300 	mov.w	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float q3 = 0.0f;
 800a9e0:	f04f 0300 	mov.w	r3, #0
 800a9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  short accel[3];
  long quat[4];
  unsigned long timestamp;
  short sensors;
  unsigned char more;
  dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more);
 800a9e6:	f107 0414 	add.w	r4, r7, #20
 800a9ea:	f107 0218 	add.w	r2, r7, #24
 800a9ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a9f2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800a9f6:	f107 0311 	add.w	r3, r7, #17
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	f107 0312 	add.w	r3, r7, #18
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4623      	mov	r3, r4
 800aa04:	f002 fc2e 	bl	800d264 <dmp_read_fifo>


  if (sensors & INV_WXYZ_QUAT) {
 800aa08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 80ee 	beq.w	800abf4 <MPU6500_DMP_Get_Data+0x234>
    q0 = quat[0] / Q30;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa22:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 800acc0 <MPU6500_DMP_Get_Data+0x300>
 800aa26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa2a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    q1 = quat[1] / Q30;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	ee07 3a90 	vmov	s15, r3
 800aa34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa38:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800acc0 <MPU6500_DMP_Get_Data+0x300>
 800aa3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa40:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q2 = quat[2] / Q30;
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa4e:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 800acc0 <MPU6500_DMP_Get_Data+0x300>
 800aa52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa56:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    q3 = quat[3] / Q30;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	ee07 3a90 	vmov	s15, r3
 800aa60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa64:	eddf 6a96 	vldr	s13, [pc, #600]	@ 800acc0 <MPU6500_DMP_Get_Data+0x300>
 800aa68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa6c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    *pitch = asin(-2 * q1 * q3 + 2 * q0 * q2) * 57.3;
 800aa70:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800aa74:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800aa78:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa7c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800aa80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa84:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800aa88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800aa8c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800aa90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa98:	ee17 0a90 	vmov	r0, s15
 800aa9c:	f7f5 fd54 	bl	8000548 <__aeabi_f2d>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	ec43 2b10 	vmov	d0, r2, r3
 800aaa8:	f004 fb5c 	bl	800f164 <asin>
 800aaac:	ec51 0b10 	vmov	r0, r1, d0
 800aab0:	a381      	add	r3, pc, #516	@ (adr r3, 800acb8 <MPU6500_DMP_Get_Data+0x2f8>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f7f5 fd9f 	bl	80005f8 <__aeabi_dmul>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4610      	mov	r0, r2
 800aac0:	4619      	mov	r1, r3
 800aac2:	f7f6 f849 	bl	8000b58 <__aeabi_d2f>
 800aac6:	4602      	mov	r2, r0
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	601a      	str	r2, [r3, #0]
    *roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1) * 57.3;
 800aacc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800aad0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800aad4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800aad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aadc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800aae0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800aae4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800aae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf0:	ee17 0a90 	vmov	r0, s15
 800aaf4:	f7f5 fd28 	bl	8000548 <__aeabi_f2d>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ab00:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800ab04:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab08:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ab0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab10:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ab14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ab18:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ab1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab2c:	ee17 0a90 	vmov	r0, s15
 800ab30:	f7f5 fd0a 	bl	8000548 <__aeabi_f2d>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	ec43 2b11 	vmov	d1, r2, r3
 800ab3c:	ec45 4b10 	vmov	d0, r4, r5
 800ab40:	f004 fb44 	bl	800f1cc <atan2>
 800ab44:	ec51 0b10 	vmov	r0, r1, d0
 800ab48:	a35b      	add	r3, pc, #364	@ (adr r3, 800acb8 <MPU6500_DMP_Get_Data+0x2f8>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fd53 	bl	80005f8 <__aeabi_dmul>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f7f5 fffd 	bl	8000b58 <__aeabi_d2f>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	601a      	str	r2, [r3, #0]
    *yaw = atan2(2 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3;
 800ab64:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800ab68:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ab6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab70:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800ab74:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800ab78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ab84:	ee17 0a90 	vmov	r0, s15
 800ab88:	f7f5 fcde 	bl	8000548 <__aeabi_f2d>
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ab94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ab98:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ab9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aba4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800aba8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800abac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800abb0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800abb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800abb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abbc:	ee17 0a90 	vmov	r0, s15
 800abc0:	f7f5 fcc2 	bl	8000548 <__aeabi_f2d>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	ec43 2b11 	vmov	d1, r2, r3
 800abcc:	ec45 4b10 	vmov	d0, r4, r5
 800abd0:	f004 fafc 	bl	800f1cc <atan2>
 800abd4:	ec51 0b10 	vmov	r0, r1, d0
 800abd8:	a337      	add	r3, pc, #220	@ (adr r3, 800acb8 <MPU6500_DMP_Get_Data+0x2f8>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f7f5 fd0b 	bl	80005f8 <__aeabi_dmul>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4610      	mov	r0, r2
 800abe8:	4619      	mov	r1, r3
 800abea:	f7f5 ffb5 	bl	8000b58 <__aeabi_d2f>
 800abee:	4602      	mov	r2, r0
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	601a      	str	r2, [r3, #0]
  }
  if (sensors & INV_XYZ_ACCEL) {
 800abf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d026      	beq.n	800ac50 <MPU6500_DMP_Get_Data+0x290>
    *ax = (float) accel[0] / 16384.0f;
 800ac02:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac0e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800acc4 <MPU6500_DMP_Get_Data+0x304>
 800ac12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	edc3 7a00 	vstr	s15, [r3]
    *ay = (float) accel[1] / 16384.0f;
 800ac1c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800ac20:	ee07 3a90 	vmov	s15, r3
 800ac24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac28:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800acc4 <MPU6500_DMP_Get_Data+0x304>
 800ac2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac32:	edc3 7a00 	vstr	s15, [r3]
    *az = (float) accel[2] / 16384.0f;
 800ac36:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac42:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800acc4 <MPU6500_DMP_Get_Data+0x304>
 800ac46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac4c:	edc3 7a00 	vstr	s15, [r3]
  }
  if (sensors & INV_XYZ_GYRO) {
 800ac50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d026      	beq.n	800acac <MPU6500_DMP_Get_Data+0x2ec>
    *gyrox = (float) gyro[0] / 65.5f;;
 800ac5e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac6a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800acc8 <MPU6500_DMP_Get_Data+0x308>
 800ac6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ac74:	edc3 7a00 	vstr	s15, [r3]
    *gyroy = (float) gyro[1] / 65.5f;;
 800ac78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac84:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800acc8 <MPU6500_DMP_Get_Data+0x308>
 800ac88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac8e:	edc3 7a00 	vstr	s15, [r3]
    *gyroy = (float) gyro[2] / 65.5f;;
 800ac92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac9e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800acc8 <MPU6500_DMP_Get_Data+0x308>
 800aca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aca8:	edc3 7a00 	vstr	s15, [r3]
  }

  return 0;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3748      	adds	r7, #72	@ 0x48
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bdb0      	pop	{r4, r5, r7, pc}
 800acb6:	bf00      	nop
 800acb8:	66666666 	.word	0x66666666
 800acbc:	404ca666 	.word	0x404ca666
 800acc0:	4e800000 	.word	0x4e800000
 800acc4:	46800000 	.word	0x46800000
 800acc8:	42830000 	.word	0x42830000

0800accc <OLED_W_SCL>:
/**
 * @brief 向 OLED_SCL 写高低电平
 * 根据 BitValue 的值，将 OLED_SCL 置高电平或低电平。
 * @param BitValue 位值，0 或 1
 */
void OLED_W_SCL(uint8_t BitValue) {
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]
  /*根据BitValue的值，将SCL置高电平或者低电平*/
  HAL_GPIO_WritePin(OLED_SCL_GPIO_Port, OLED_SCL, (GPIO_PinState) BitValue);
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	461a      	mov	r2, r3
 800acda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800acde:	4805      	ldr	r0, [pc, #20]	@ (800acf4 <OLED_W_SCL+0x28>)
 800ace0:	f7f8 ff5c 	bl	8003b9c <HAL_GPIO_WritePin>
  /*如果单片机速度过快，可在此添加适量延时，以避免超出I2C通信的最大速度*/
  for (volatile uint16_t i = 0; i < Delay_time; i++) {
 800ace4:	2300      	movs	r3, #0
 800ace6:	81fb      	strh	r3, [r7, #14]
 800ace8:	bf00      	nop
 800acea:	89fb      	ldrh	r3, [r7, #14]
    //for (uint16_t j = 0; j < 10; j++);
  }
}
 800acec:	bf00      	nop
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	40020800 	.word	0x40020800

0800acf8 <OLED_W_SDA>:
  * @return 无
  * @note 当上层函数需要写SDA时，此函数会被调用
  *           用户需要根据参数传入的值，将SDA置为高电平或者低电平
  *           当参数传入0时，置SDA为低电平，当参数传入1时，置SDA为高电平
  */
void OLED_W_SDA(uint8_t BitValue) {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  /*根据BitValue的值，将SDA置高电平或者低电平*/
  HAL_GPIO_WritePin(OLED_SDA_GPIO_Port, OLED_SDA, (GPIO_PinState) BitValue);
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	461a      	mov	r2, r3
 800ad06:	2140      	movs	r1, #64	@ 0x40
 800ad08:	4805      	ldr	r0, [pc, #20]	@ (800ad20 <OLED_W_SDA+0x28>)
 800ad0a:	f7f8 ff47 	bl	8003b9c <HAL_GPIO_WritePin>
  /*如果单片机速度过快，可在此添加适量延时，以避免超出I2C通信的最大速度*/
  for (volatile uint16_t i = 0; i < Delay_time; i++) {
 800ad0e:	2300      	movs	r3, #0
 800ad10:	81fb      	strh	r3, [r7, #14]
 800ad12:	bf00      	nop
 800ad14:	89fb      	ldrh	r3, [r7, #14]
    //for (uint16_t j = 0; j < 10; j++);
  }
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	40020800 	.word	0x40020800

0800ad24 <OLED_GPIO_Init>:
 * @param  无
 * @retval 无
 * @note 当上层函数需要初始化时，此函数会被调用,
 *       用户需要将SCL和SDA引脚初始化为开漏模式，并释放引脚
 */
void OLED_GPIO_Init(void) {
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08a      	sub	sp, #40	@ 0x28
 800ad28:	af00      	add	r7, sp, #0
  uint32_t i, j;

  /*在初始化前，加入适量延时，待OLED供电稳定*/
  for (i = 0; i < 1000; i++) {
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad2e:	e00c      	b.n	800ad4a <OLED_GPIO_Init+0x26>
    for (j = 0; j < 1000; j++);
 800ad30:	2300      	movs	r3, #0
 800ad32:	623b      	str	r3, [r7, #32]
 800ad34:	e002      	b.n	800ad3c <OLED_GPIO_Init+0x18>
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	623b      	str	r3, [r7, #32]
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad42:	d3f8      	bcc.n	800ad36 <OLED_GPIO_Init+0x12>
  for (i = 0; i < 1000; i++) {
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	3301      	adds	r3, #1
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad50:	d3ee      	bcc.n	800ad30 <OLED_GPIO_Init+0xc>
  }
#ifdef OLED_USE_SW_I2C
  __HAL_RCC_GPIOC_CLK_ENABLE();    // 使能GPIOC时钟
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	4b21      	ldr	r3, [pc, #132]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad5a:	4a20      	ldr	r2, [pc, #128]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad5c:	f043 0304 	orr.w	r3, r3, #4
 800ad60:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad62:	4b1e      	ldr	r3, [pc, #120]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	60bb      	str	r3, [r7, #8]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();       // 使能GPIOA时钟
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	4b1a      	ldr	r3, [pc, #104]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad76:	4a19      	ldr	r2, [pc, #100]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad78:	f043 0301 	orr.w	r3, r3, #1
 800ad7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad7e:	4b17      	ldr	r3, [pc, #92]	@ (800addc <OLED_GPIO_Init+0xb8>)
 800ad80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	607b      	str	r3, [r7, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};              // 定义结构体配置GPIO
 800ad8a:	f107 030c 	add.w	r3, r7, #12
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	605a      	str	r2, [r3, #4]
 800ad94:	609a      	str	r2, [r3, #8]
 800ad96:	60da      	str	r2, [r3, #12]
 800ad98:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;          // 设置GPIO模式为开漏输出模式
 800ad9a:	2311      	movs	r3, #17
 800ad9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;                 // 内部上拉电阻
 800ad9e:	2301      	movs	r3, #1
 800ada0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;  // 设置GPIO速度为高速
 800ada2:	2303      	movs	r3, #3
 800ada4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;                 // 设置引脚
 800ada6:	2340      	movs	r3, #64	@ 0x40
 800ada8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);// 初始化GPIO
 800adaa:	f107 030c 	add.w	r3, r7, #12
 800adae:	4619      	mov	r1, r3
 800adb0:	480b      	ldr	r0, [pc, #44]	@ (800ade0 <OLED_GPIO_Init+0xbc>)
 800adb2:	f7f8 fd57 	bl	8003864 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800adb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800adbc:	f107 030c 	add.w	r3, r7, #12
 800adc0:	4619      	mov	r1, r3
 800adc2:	4807      	ldr	r0, [pc, #28]	@ (800ade0 <OLED_GPIO_Init+0xbc>)
 800adc4:	f7f8 fd4e 	bl	8003864 <HAL_GPIO_Init>

  /*释放SCL和SDA*/
  OLED_W_SCL(1);
 800adc8:	2001      	movs	r0, #1
 800adca:	f7ff ff7f 	bl	800accc <OLED_W_SCL>
  OLED_W_SDA(1);
 800adce:	2001      	movs	r0, #1
 800add0:	f7ff ff92 	bl	800acf8 <OLED_W_SDA>
#endif
}
 800add4:	bf00      	nop
 800add6:	3728      	adds	r7, #40	@ 0x28
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	40023800 	.word	0x40023800
 800ade0:	40020800 	.word	0x40020800

0800ade4 <OLED_I2C_Start>:
/**
 * @brief I2C起始
 * @param  无
 * @return 无
 */
void OLED_I2C_Start(void) {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
#ifdef OLED_USE_SW_I2C
  OLED_W_SDA(1);    //释放SDA，确保SDA为高电平
 800ade8:	2001      	movs	r0, #1
 800adea:	f7ff ff85 	bl	800acf8 <OLED_W_SDA>
  OLED_W_SCL(1);    //释放SCL，确保SCL为高电平
 800adee:	2001      	movs	r0, #1
 800adf0:	f7ff ff6c 	bl	800accc <OLED_W_SCL>
  OLED_W_SDA(0);    //在SCL高电平期间，拉低SDA，产生起始信号
 800adf4:	2000      	movs	r0, #0
 800adf6:	f7ff ff7f 	bl	800acf8 <OLED_W_SDA>
  OLED_W_SCL(0);    //起始后把SCL也拉低，即为了占用总线，也为了方便总线时序的拼接
 800adfa:	2000      	movs	r0, #0
 800adfc:	f7ff ff66 	bl	800accc <OLED_W_SCL>
#endif
}
 800ae00:	bf00      	nop
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <OLED_I2C_Stop>:
/**
 * @brief I2C终止
 * @param  无
 * @return 无
 */
void OLED_I2C_Stop(void) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
#ifdef OLED_USE_SW_I2C
  OLED_W_SDA(0);    //拉低SDA，确保SDA为低电平
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f7ff ff75 	bl	800acf8 <OLED_W_SDA>
  OLED_W_SCL(1);    //释放SCL，使SCL呈现高电平
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f7ff ff5c 	bl	800accc <OLED_W_SCL>
  OLED_W_SDA(1);    //在SCL高电平期间，释放SDA，产生终止信号
 800ae14:	2001      	movs	r0, #1
 800ae16:	f7ff ff6f 	bl	800acf8 <OLED_W_SDA>
#endif
}
 800ae1a:	bf00      	nop
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <OLED_I2C_SendByte>:
/**
 * @brief I2C发送一个字节
 * @param Byte 要发送的一个字节数据，范围：0x00~0xFF
 * @return 无
 */
void OLED_I2C_SendByte(uint8_t Byte) {
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	4603      	mov	r3, r0
 800ae26:	71fb      	strb	r3, [r7, #7]
#ifdef OLED_USE_SW_I2C
  uint8_t i;
  /*循环8次，主机依次发送数据的每一位*/
  for (i = 0; i < 8; i++) {
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
 800ae2c:	e016      	b.n	800ae5c <OLED_I2C_SendByte+0x3e>
    /*使用掩码的方式取出Byte的指定一位数据并写入到SDA线*/
    /*两个!的作用是，让所有非零的值变为1*/
    OLED_W_SDA(!!(Byte & (0x80 >> i)));
 800ae2e:	79fa      	ldrb	r2, [r7, #7]
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2180      	movs	r1, #128	@ 0x80
 800ae34:	fa41 f303 	asr.w	r3, r1, r3
 800ae38:	4013      	ands	r3, r2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	bf14      	ite	ne
 800ae3e:	2301      	movne	r3, #1
 800ae40:	2300      	moveq	r3, #0
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff ff57 	bl	800acf8 <OLED_W_SDA>
    OLED_W_SCL(1);  //释放SCL，从机在SCL高电平期间读取SDA
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	f7ff ff3e 	bl	800accc <OLED_W_SCL>
    OLED_W_SCL(0);  //拉低SCL，主机开始发送下一位数据
 800ae50:	2000      	movs	r0, #0
 800ae52:	f7ff ff3b 	bl	800accc <OLED_W_SCL>
  for (i = 0; i < 8; i++) {
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
 800ae5e:	2b07      	cmp	r3, #7
 800ae60:	d9e5      	bls.n	800ae2e <OLED_I2C_SendByte+0x10>
  }
  OLED_W_SCL(1);    //额外的一个时钟，不处理应答信号
 800ae62:	2001      	movs	r0, #1
 800ae64:	f7ff ff32 	bl	800accc <OLED_W_SCL>
  OLED_W_SCL(0);
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f7ff ff2f 	bl	800accc <OLED_W_SCL>
#endif
}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <OLED_WriteCommand>:
/**
 * @brief OLED写命令
 * @param Command 要写入的命令值，范围：0x00~0xFF
 * @return 无
 */
void OLED_WriteCommand(uint8_t Command) {
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	71fb      	strb	r3, [r7, #7]
#ifdef OLED_USE_SW_I2C
  OLED_I2C_Start();           // I2C起始
 800ae80:	f7ff ffb0 	bl	800ade4 <OLED_I2C_Start>
  OLED_I2C_SendByte(0x78);    //发送OLED的I2C从机地址
 800ae84:	2078      	movs	r0, #120	@ 0x78
 800ae86:	f7ff ffca 	bl	800ae1e <OLED_I2C_SendByte>
  OLED_I2C_SendByte(0x00);  //控制字节，给0x00，表示即将写命令
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	f7ff ffc7 	bl	800ae1e <OLED_I2C_SendByte>
  OLED_I2C_SendByte(Command); // 写入指定的命令
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff ffc3 	bl	800ae1e <OLED_I2C_SendByte>
  OLED_I2C_Stop();            // I2C终止
 800ae98:	f7ff ffb4 	bl	800ae04 <OLED_I2C_Stop>
#elif defined(OLED_USE_HW_I2C)
  uint8_t TxData[2] = {0x00, Command};
  HAL_I2C_Master_Transmit(&OLED_I2C, OLED_ADDRESS, (uint8_t*)TxData, 2, OLED_I2C_TIMEOUT);
#endif
}
 800ae9c:	bf00      	nop
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <OLED_WriteData>:
 * @brief OLED写数据
 * @param Data 要写入数据的起始地址
 * @param Count 要写入数据的数量
 * @return 无
 */
void OLED_WriteData(uint8_t *Data, uint8_t Count) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
#ifdef OLED_USE_SW_I2C
  OLED_I2C_Start();        // I2C起始
 800aeb0:	f7ff ff98 	bl	800ade4 <OLED_I2C_Start>
  OLED_I2C_SendByte(0x78);    //发送OLED的I2C从机地址
 800aeb4:	2078      	movs	r0, #120	@ 0x78
 800aeb6:	f7ff ffb2 	bl	800ae1e <OLED_I2C_SendByte>

  OLED_I2C_SendByte(0x40); // 控制字节，给0x40，表示即将写数据
 800aeba:	2040      	movs	r0, #64	@ 0x40
 800aebc:	f7ff ffaf 	bl	800ae1e <OLED_I2C_SendByte>
  /*循环Count次，进行连续的数据写入*/
  for (i = 0; i < Count; i++) {
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
 800aec4:	e009      	b.n	800aeda <OLED_WriteData+0x36>
    OLED_I2C_SendByte(Data[i]); // 依次发送Data的每一个数据
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	4413      	add	r3, r2
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff ffa5 	bl	800ae1e <OLED_I2C_SendByte>
  for (i = 0; i < Count; i++) {
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	3301      	adds	r3, #1
 800aed8:	73fb      	strb	r3, [r7, #15]
 800aeda:	7bfa      	ldrb	r2, [r7, #15]
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d3f1      	bcc.n	800aec6 <OLED_WriteData+0x22>
  }
  OLED_I2C_Stop(); // I2C终止
 800aee2:	f7ff ff8f 	bl	800ae04 <OLED_I2C_Stop>
  for (i = 0; i < Count; i++) {
      TxData[i + 1] = Data[i];
  }
  HAL_I2C_Master_Transmit(&OLED_I2C, OLED_ADDRESS, (uint8_t*)TxData, Count + 1, OLED_I2C_TIMEOUT);
#endif
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <OLED_Init>:
 * @brief OLED初始化
 * @param 无
 * @return 无
 * @note 使用前，需要调用此初始化函数
 */
void OLED_Init(void) {
 800aeee:	b580      	push	{r7, lr}
 800aef0:	af00      	add	r7, sp, #0
  OLED_GPIO_Init(); // 先调用底层的端口初始化
 800aef2:	f7ff ff17 	bl	800ad24 <OLED_GPIO_Init>

  /*写入一系列的命令，对OLED进行初始化配置*/
  OLED_WriteCommand(0xAE); // 设置显示开启/关闭，0xAE关闭，0xAF开启
 800aef6:	20ae      	movs	r0, #174	@ 0xae
 800aef8:	f7ff ffbd 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xD5); // 设置显示时钟分频比/振荡器频率
 800aefc:	20d5      	movs	r0, #213	@ 0xd5
 800aefe:	f7ff ffba 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x80); // 0x00~0xFF
 800af02:	2080      	movs	r0, #128	@ 0x80
 800af04:	f7ff ffb7 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xA8); // 设置多路复用率
 800af08:	20a8      	movs	r0, #168	@ 0xa8
 800af0a:	f7ff ffb4 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x3F); // 0x0E~0x3F
 800af0e:	203f      	movs	r0, #63	@ 0x3f
 800af10:	f7ff ffb1 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xD3); // 设置显示偏移
 800af14:	20d3      	movs	r0, #211	@ 0xd3
 800af16:	f7ff ffae 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x00); // 0x00~0x7F
 800af1a:	2000      	movs	r0, #0
 800af1c:	f7ff ffab 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0x40); // 设置显示开始行，0x40~0x7F
 800af20:	2040      	movs	r0, #64	@ 0x40
 800af22:	f7ff ffa8 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xA1); // 设置左右方向，0xA1正常，0xA0左右反置
 800af26:	20a1      	movs	r0, #161	@ 0xa1
 800af28:	f7ff ffa5 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xC8); // 设置上下方向，0xC8正常，0xC0上下反置
 800af2c:	20c8      	movs	r0, #200	@ 0xc8
 800af2e:	f7ff ffa2 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xDA); // 设置COM引脚硬件配置
 800af32:	20da      	movs	r0, #218	@ 0xda
 800af34:	f7ff ff9f 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x12);
 800af38:	2012      	movs	r0, #18
 800af3a:	f7ff ff9c 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0x81); // 设置对比度
 800af3e:	2081      	movs	r0, #129	@ 0x81
 800af40:	f7ff ff99 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0xCF); // 0x00~0xFF
 800af44:	20cf      	movs	r0, #207	@ 0xcf
 800af46:	f7ff ff96 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xD9); // 设置预充电周期
 800af4a:	20d9      	movs	r0, #217	@ 0xd9
 800af4c:	f7ff ff93 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0xF1);
 800af50:	20f1      	movs	r0, #241	@ 0xf1
 800af52:	f7ff ff90 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xDB); // 设置VCOMH取消选择级别
 800af56:	20db      	movs	r0, #219	@ 0xdb
 800af58:	f7ff ff8d 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x30);
 800af5c:	2030      	movs	r0, #48	@ 0x30
 800af5e:	f7ff ff8a 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xA4); // 设置整个显示打开/关闭
 800af62:	20a4      	movs	r0, #164	@ 0xa4
 800af64:	f7ff ff87 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xA6); // 设置正常/反色显示，0xA6正常，0xA7反色
 800af68:	20a6      	movs	r0, #166	@ 0xa6
 800af6a:	f7ff ff84 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0x8D); // 设置充电泵
 800af6e:	208d      	movs	r0, #141	@ 0x8d
 800af70:	f7ff ff81 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x14);
 800af74:	2014      	movs	r0, #20
 800af76:	f7ff ff7e 	bl	800ae76 <OLED_WriteCommand>

  OLED_WriteCommand(0xAF); // 开启显示
 800af7a:	20af      	movs	r0, #175	@ 0xaf
 800af7c:	f7ff ff7b 	bl	800ae76 <OLED_WriteCommand>

  OLED_Clear();  // 清空显存数组
 800af80:	f000 f848 	bl	800b014 <OLED_Clear>
  OLED_Update(); // 更新显示，清屏，防止初始化后未显示内容时花屏
 800af84:	f000 f826 	bl	800afd4 <OLED_Update>
}
 800af88:	bf00      	nop
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <OLED_SetCursor>:
 * @param Page 指定光标所在的页，范围：0-7
 * @param X 指定光标所在的X轴坐标，范围：0-127
 * @return 无
 * @note OLED默认的Y轴，只能8个Bit为一组写入，即1页等于8个Y轴坐标
 */
void OLED_SetCursor(uint8_t Page, uint8_t X) {
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	460a      	mov	r2, r1
 800af96:	71fb      	strb	r3, [r7, #7]
 800af98:	4613      	mov	r3, r2
 800af9a:	71bb      	strb	r3, [r7, #6]
  /*屏幕的起始列接在了第2列，而不是第0列*/
  /*所以需要将X加2，才能正常显示*/
  //	X += 2;

  /*通过指令设置页地址和列地址*/
  OLED_WriteCommand(0xB0 | Page);              // 设置页位置
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7ff ff66 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); // 设置X位置高4位
 800afaa:	79bb      	ldrb	r3, [r7, #6]
 800afac:	091b      	lsrs	r3, r3, #4
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f043 0310 	orr.w	r3, r3, #16
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff ff5d 	bl	800ae76 <OLED_WriteCommand>
  OLED_WriteCommand(0x00 | (X & 0x0F));        // 设置X位置低4位
 800afbc:	79bb      	ldrb	r3, [r7, #6]
 800afbe:	f003 030f 	and.w	r3, r3, #15
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff ff56 	bl	800ae76 <OLED_WriteCommand>
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <OLED_Update>:
 * @note 所有的显示函数，都只是对OLED显存数组进行读写
 *           随后调用OLED_Update函数或OLED_UpdateArea函数
 *           才会将显存数组的数据发送到OLED硬件，进行显示
 *           故调用显示函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_Update(void) {
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
  uint8_t j;
  /*遍历每一页*/
  for (j = 0; j < 8; j++) {
 800afda:	2300      	movs	r3, #0
 800afdc:	71fb      	strb	r3, [r7, #7]
 800afde:	e00f      	b.n	800b000 <OLED_Update+0x2c>
    /*设置光标位置为每一页的第一列*/
    OLED_SetCursor(j, 0);
 800afe0:	79fb      	ldrb	r3, [r7, #7]
 800afe2:	2100      	movs	r1, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff ffd1 	bl	800af8c <OLED_SetCursor>
    /*连续写入128个数据，将显存数组的数据写入到OLED硬件*/
    OLED_WriteData(OLED_DisplayBuf[j], 128);
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	01db      	lsls	r3, r3, #7
 800afee:	4a08      	ldr	r2, [pc, #32]	@ (800b010 <OLED_Update+0x3c>)
 800aff0:	4413      	add	r3, r2
 800aff2:	2180      	movs	r1, #128	@ 0x80
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ff55 	bl	800aea4 <OLED_WriteData>
  for (j = 0; j < 8; j++) {
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	3301      	adds	r3, #1
 800affe:	71fb      	strb	r3, [r7, #7]
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	2b07      	cmp	r3, #7
 800b004:	d9ec      	bls.n	800afe0 <OLED_Update+0xc>
  }
}
 800b006:	bf00      	nop
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	2000464c 	.word	0x2000464c

0800b014 <OLED_Clear>:
 * @brief 将OLED显存数组全部清零
 * @param 无
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_Clear(void) {
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
  uint8_t i, j;
  for (j = 0; j < 8; j++) // 遍历8页
 800b01a:	2300      	movs	r3, #0
 800b01c:	71bb      	strb	r3, [r7, #6]
 800b01e:	e014      	b.n	800b04a <OLED_Clear+0x36>
  {
    for (i = 0; i < 128; i++) // 遍历128列
 800b020:	2300      	movs	r3, #0
 800b022:	71fb      	strb	r3, [r7, #7]
 800b024:	e00a      	b.n	800b03c <OLED_Clear+0x28>
    {
      OLED_DisplayBuf[j][i] = 0x00; // 将显存数组数据全部清零
 800b026:	79ba      	ldrb	r2, [r7, #6]
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	490d      	ldr	r1, [pc, #52]	@ (800b060 <OLED_Clear+0x4c>)
 800b02c:	01d2      	lsls	r2, r2, #7
 800b02e:	440a      	add	r2, r1
 800b030:	4413      	add	r3, r2
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 128; i++) // 遍历128列
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	3301      	adds	r3, #1
 800b03a:	71fb      	strb	r3, [r7, #7]
 800b03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b040:	2b00      	cmp	r3, #0
 800b042:	daf0      	bge.n	800b026 <OLED_Clear+0x12>
  for (j = 0; j < 8; j++) // 遍历8页
 800b044:	79bb      	ldrb	r3, [r7, #6]
 800b046:	3301      	adds	r3, #1
 800b048:	71bb      	strb	r3, [r7, #6]
 800b04a:	79bb      	ldrb	r3, [r7, #6]
 800b04c:	2b07      	cmp	r3, #7
 800b04e:	d9e7      	bls.n	800b020 <OLED_Clear+0xc>
    }
  }
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	2000464c 	.word	0x2000464c

0800b064 <OLED_ClearArea>:
 * @param Width 指定区域的宽度，范围：0-128
 * @param Height 指定区域的高度，范围：0-64
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_ClearArea(uint8_t X, uint8_t Y, uint8_t Width, uint8_t Height) {
 800b064:	b490      	push	{r4, r7}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4623      	mov	r3, r4
 800b074:	71fb      	strb	r3, [r7, #7]
 800b076:	4603      	mov	r3, r0
 800b078:	71bb      	strb	r3, [r7, #6]
 800b07a:	460b      	mov	r3, r1
 800b07c:	717b      	strb	r3, [r7, #5]
 800b07e:	4613      	mov	r3, r2
 800b080:	713b      	strb	r3, [r7, #4]
  uint8_t i, j;

  /*参数检查，保证指定区域不会超出屏幕范围*/
  if (X > 127) { return; }
 800b082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b086:	2b00      	cmp	r3, #0
 800b088:	db4f      	blt.n	800b12a <OLED_ClearArea+0xc6>
  if (Y > 63) { return; }
 800b08a:	79bb      	ldrb	r3, [r7, #6]
 800b08c:	2b3f      	cmp	r3, #63	@ 0x3f
 800b08e:	d84e      	bhi.n	800b12e <OLED_ClearArea+0xca>
  if (X + Width > 128) { Width = 128 - X; }
 800b090:	79fa      	ldrb	r2, [r7, #7]
 800b092:	797b      	ldrb	r3, [r7, #5]
 800b094:	4413      	add	r3, r2
 800b096:	2b80      	cmp	r3, #128	@ 0x80
 800b098:	dd06      	ble.n	800b0a8 <OLED_ClearArea+0x44>
 800b09a:	79fb      	ldrb	r3, [r7, #7]
 800b09c:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800b0a0:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800b0a4:	3380      	adds	r3, #128	@ 0x80
 800b0a6:	717b      	strb	r3, [r7, #5]
  if (Y + Height > 64) { Height = 64 - Y; }
 800b0a8:	79ba      	ldrb	r2, [r7, #6]
 800b0aa:	793b      	ldrb	r3, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	2b40      	cmp	r3, #64	@ 0x40
 800b0b0:	dd03      	ble.n	800b0ba <OLED_ClearArea+0x56>
 800b0b2:	79bb      	ldrb	r3, [r7, #6]
 800b0b4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800b0b8:	713b      	strb	r3, [r7, #4]

  for (j = Y; j < Y + Height; j++) // 遍历指定页
 800b0ba:	79bb      	ldrb	r3, [r7, #6]
 800b0bc:	73bb      	strb	r3, [r7, #14]
 800b0be:	e02d      	b.n	800b11c <OLED_ClearArea+0xb8>
  {
    for (i = X; i < X + Width; i++) // 遍历指定列
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	73fb      	strb	r3, [r7, #15]
 800b0c4:	e021      	b.n	800b10a <OLED_ClearArea+0xa6>
    {
      OLED_DisplayBuf[j / 8][i] &= ~(0x01 << (j % 8)); // 将显存数组指定数据清零
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	08db      	lsrs	r3, r3, #3
 800b0ca:	b2d8      	uxtb	r0, r3
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	4919      	ldr	r1, [pc, #100]	@ (800b138 <OLED_ClearArea+0xd4>)
 800b0d2:	01d2      	lsls	r2, r2, #7
 800b0d4:	440a      	add	r2, r1
 800b0d6:	4413      	add	r3, r2
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	b25a      	sxtb	r2, r3
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	b259      	sxtb	r1, r3
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	b2c8      	uxtb	r0, r1
 800b0f8:	490f      	ldr	r1, [pc, #60]	@ (800b138 <OLED_ClearArea+0xd4>)
 800b0fa:	01d2      	lsls	r2, r2, #7
 800b0fc:	440a      	add	r2, r1
 800b0fe:	4413      	add	r3, r2
 800b100:	4602      	mov	r2, r0
 800b102:	701a      	strb	r2, [r3, #0]
    for (i = X; i < X + Width; i++) // 遍历指定列
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	3301      	adds	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
 800b10a:	7bfa      	ldrb	r2, [r7, #15]
 800b10c:	79f9      	ldrb	r1, [r7, #7]
 800b10e:	797b      	ldrb	r3, [r7, #5]
 800b110:	440b      	add	r3, r1
 800b112:	429a      	cmp	r2, r3
 800b114:	dbd7      	blt.n	800b0c6 <OLED_ClearArea+0x62>
  for (j = Y; j < Y + Height; j++) // 遍历指定页
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	3301      	adds	r3, #1
 800b11a:	73bb      	strb	r3, [r7, #14]
 800b11c:	7bba      	ldrb	r2, [r7, #14]
 800b11e:	79b9      	ldrb	r1, [r7, #6]
 800b120:	793b      	ldrb	r3, [r7, #4]
 800b122:	440b      	add	r3, r1
 800b124:	429a      	cmp	r2, r3
 800b126:	dbcb      	blt.n	800b0c0 <OLED_ClearArea+0x5c>
 800b128:	e002      	b.n	800b130 <OLED_ClearArea+0xcc>
  if (X > 127) { return; }
 800b12a:	bf00      	nop
 800b12c:	e000      	b.n	800b130 <OLED_ClearArea+0xcc>
  if (Y > 63) { return; }
 800b12e:	bf00      	nop
    }
  }
}
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bc90      	pop	{r4, r7}
 800b136:	4770      	bx	lr
 800b138:	2000464c 	.word	0x2000464c

0800b13c <OLED_ShowChar>:
 *           范围：OLED_8X16		宽8像素，高16像素
 *                 OLED_6X8		宽6像素，高8像素
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_ShowChar(uint8_t X, uint8_t Y, char Char, uint8_t FontSize) {
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b085      	sub	sp, #20
 800b140:	af02      	add	r7, sp, #8
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	4611      	mov	r1, r2
 800b148:	461a      	mov	r2, r3
 800b14a:	4623      	mov	r3, r4
 800b14c:	71fb      	strb	r3, [r7, #7]
 800b14e:	4603      	mov	r3, r0
 800b150:	71bb      	strb	r3, [r7, #6]
 800b152:	460b      	mov	r3, r1
 800b154:	717b      	strb	r3, [r7, #5]
 800b156:	4613      	mov	r3, r2
 800b158:	713b      	strb	r3, [r7, #4]
  if (FontSize == OLED_8X16) // 字体为宽8像素，高16像素
 800b15a:	793b      	ldrb	r3, [r7, #4]
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d10c      	bne.n	800b17a <OLED_ShowChar+0x3e>
  {
    /*将ASCII字模库OLED_F8x16的指定数据以8*16的图像格式显示*/
    OLED_ShowImage(X, Y, 8, 16, OLED_F8x16[Char - ' ']);
 800b160:	797b      	ldrb	r3, [r7, #5]
 800b162:	3b20      	subs	r3, #32
 800b164:	011b      	lsls	r3, r3, #4
 800b166:	4a10      	ldr	r2, [pc, #64]	@ (800b1a8 <OLED_ShowChar+0x6c>)
 800b168:	4413      	add	r3, r2
 800b16a:	79b9      	ldrb	r1, [r7, #6]
 800b16c:	79f8      	ldrb	r0, [r7, #7]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2310      	movs	r3, #16
 800b172:	2208      	movs	r2, #8
 800b174:	f000 f848 	bl	800b208 <OLED_ShowImage>
  } else if (FontSize == OLED_6X8) // 字体为宽6像素，高8像素
  {
    /*将ASCII字模库OLED_F6x8的指定数据以6*8的图像格式显示*/
    OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
  }
}
 800b178:	e012      	b.n	800b1a0 <OLED_ShowChar+0x64>
  } else if (FontSize == OLED_6X8) // 字体为宽6像素，高8像素
 800b17a:	793b      	ldrb	r3, [r7, #4]
 800b17c:	2b06      	cmp	r3, #6
 800b17e:	d10f      	bne.n	800b1a0 <OLED_ShowChar+0x64>
    OLED_ShowImage(X, Y, 6, 8, OLED_F6x8[Char - ' ']);
 800b180:	797b      	ldrb	r3, [r7, #5]
 800b182:	f1a3 0220 	sub.w	r2, r3, #32
 800b186:	4613      	mov	r3, r2
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	4413      	add	r3, r2
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	4a07      	ldr	r2, [pc, #28]	@ (800b1ac <OLED_ShowChar+0x70>)
 800b190:	4413      	add	r3, r2
 800b192:	79b9      	ldrb	r1, [r7, #6]
 800b194:	79f8      	ldrb	r0, [r7, #7]
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	2308      	movs	r3, #8
 800b19a:	2206      	movs	r2, #6
 800b19c:	f000 f834 	bl	800b208 <OLED_ShowImage>
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd90      	pop	{r4, r7, pc}
 800b1a8:	0800ff18 	.word	0x0800ff18
 800b1ac:	08010508 	.word	0x08010508

0800b1b0 <OLED_ShowString>:
 *           范围：OLED_8X16		宽8像素，高16像素
 *                 OLED_6X8		宽6像素，高8像素
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_ShowString(uint8_t X, uint8_t Y, char *String, uint8_t FontSize) {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	603a      	str	r2, [r7, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	71fb      	strb	r3, [r7, #7]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	71bb      	strb	r3, [r7, #6]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  for (i = 0; String[i] != '\0'; i++) // 遍历字符串的每个字符
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]
 800b1ca:	e012      	b.n	800b1f2 <OLED_ShowString+0x42>
  {
    /*调用OLED_ShowChar函数，依次显示每个字符*/
    OLED_ShowChar(X + i * FontSize, Y, String[i], FontSize);
 800b1cc:	7bfa      	ldrb	r2, [r7, #15]
 800b1ce:	797b      	ldrb	r3, [r7, #5]
 800b1d0:	fb12 f303 	smulbb	r3, r2, r3
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	4413      	add	r3, r2
 800b1da:	b2d8      	uxtb	r0, r3
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	781a      	ldrb	r2, [r3, #0]
 800b1e4:	797b      	ldrb	r3, [r7, #5]
 800b1e6:	79b9      	ldrb	r1, [r7, #6]
 800b1e8:	f7ff ffa8 	bl	800b13c <OLED_ShowChar>
  for (i = 0; String[i] != '\0'; i++) // 遍历字符串的每个字符
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	73fb      	strb	r3, [r7, #15]
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1e6      	bne.n	800b1cc <OLED_ShowString+0x1c>
  }
}
 800b1fe:	bf00      	nop
 800b200:	bf00      	nop
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <OLED_ShowImage>:
 * @param Height 指定图像的高度，范围：0-64
 * @param Image 指定要显示的图像
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_ShowImage(uint8_t X, uint8_t Y, uint8_t Width, uint8_t Height, const uint8_t *Image) {
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	461a      	mov	r2, r3
 800b216:	4623      	mov	r3, r4
 800b218:	71fb      	strb	r3, [r7, #7]
 800b21a:	4603      	mov	r3, r0
 800b21c:	71bb      	strb	r3, [r7, #6]
 800b21e:	460b      	mov	r3, r1
 800b220:	717b      	strb	r3, [r7, #5]
 800b222:	4613      	mov	r3, r2
 800b224:	713b      	strb	r3, [r7, #4]
  uint8_t i, j;

  /*参数检查，保证指定图像不会超出屏幕范围*/
  if (X > 127) { return; }
 800b226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f2c0 80a3 	blt.w	800b376 <OLED_ShowImage+0x16e>
  if (Y > 63) { return; }
 800b230:	79bb      	ldrb	r3, [r7, #6]
 800b232:	2b3f      	cmp	r3, #63	@ 0x3f
 800b234:	f200 80a1 	bhi.w	800b37a <OLED_ShowImage+0x172>

  /*将图像所在区域清空*/
  OLED_ClearArea(X, Y, Width, Height);
 800b238:	793b      	ldrb	r3, [r7, #4]
 800b23a:	797a      	ldrb	r2, [r7, #5]
 800b23c:	79b9      	ldrb	r1, [r7, #6]
 800b23e:	79f8      	ldrb	r0, [r7, #7]
 800b240:	f7ff ff10 	bl	800b064 <OLED_ClearArea>

  /*遍历指定图像涉及的相关页*/
  /*(Height - 1) / 8 + 1的目的是Height / 8并向上取整*/
  for (j = 0; j < (Height - 1) / 8 + 1; j++) {
 800b244:	2300      	movs	r3, #0
 800b246:	73bb      	strb	r3, [r7, #14]
 800b248:	e089      	b.n	800b35e <OLED_ShowImage+0x156>
    /*遍历指定图像涉及的相关列*/
    for (i = 0; i < Width; i++) {
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
 800b24e:	e07c      	b.n	800b34a <OLED_ShowImage+0x142>
      /*超出边界，则跳过显示*/
      if (X + i > 127) { break; }
 800b250:	79fa      	ldrb	r2, [r7, #7]
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	4413      	add	r3, r2
 800b256:	2b7f      	cmp	r3, #127	@ 0x7f
 800b258:	dc7d      	bgt.n	800b356 <OLED_ShowImage+0x14e>
      if (Y / 8 + j > 7) { return; }
 800b25a:	79bb      	ldrb	r3, [r7, #6]
 800b25c:	08db      	lsrs	r3, r3, #3
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	461a      	mov	r2, r3
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	4413      	add	r3, r2
 800b266:	2b07      	cmp	r3, #7
 800b268:	f300 8089 	bgt.w	800b37e <OLED_ShowImage+0x176>

      /*显示图像在当前页的内容*/
      OLED_DisplayBuf[Y / 8 + j][X + i] |= Image[j * Width + i] << (Y % 8);
 800b26c:	79bb      	ldrb	r3, [r7, #6]
 800b26e:	08db      	lsrs	r3, r3, #3
 800b270:	b2d8      	uxtb	r0, r3
 800b272:	4602      	mov	r2, r0
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	441a      	add	r2, r3
 800b278:	79f9      	ldrb	r1, [r7, #7]
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	440b      	add	r3, r1
 800b27e:	4942      	ldr	r1, [pc, #264]	@ (800b388 <OLED_ShowImage+0x180>)
 800b280:	01d2      	lsls	r2, r2, #7
 800b282:	440a      	add	r2, r1
 800b284:	4413      	add	r3, r2
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	b25a      	sxtb	r2, r3
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	7979      	ldrb	r1, [r7, #5]
 800b28e:	fb03 f101 	mul.w	r1, r3, r1
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	440b      	add	r3, r1
 800b296:	4619      	mov	r1, r3
 800b298:	6a3b      	ldr	r3, [r7, #32]
 800b29a:	440b      	add	r3, r1
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	79bb      	ldrb	r3, [r7, #6]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2aa:	b25b      	sxtb	r3, r3
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	b25c      	sxtb	r4, r3
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	79f9      	ldrb	r1, [r7, #7]
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	440b      	add	r3, r1
 800b2bc:	b2e0      	uxtb	r0, r4
 800b2be:	4932      	ldr	r1, [pc, #200]	@ (800b388 <OLED_ShowImage+0x180>)
 800b2c0:	01d2      	lsls	r2, r2, #7
 800b2c2:	440a      	add	r2, r1
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	701a      	strb	r2, [r3, #0]

      /*超出边界，则跳过显示*/
      /*使用continue的目的是，下一页超出边界时，上一页的后续内容还需要继续显示*/
      if (Y / 8 + j + 1 > 7) { continue; }
 800b2ca:	79bb      	ldrb	r3, [r7, #6]
 800b2cc:	08db      	lsrs	r3, r3, #3
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	2b06      	cmp	r3, #6
 800b2d8:	dc33      	bgt.n	800b342 <OLED_ShowImage+0x13a>

      /*显示图像在下一页的内容*/
      OLED_DisplayBuf[Y / 8 + j + 1][X + i] |= Image[j * Width + i] >> (8 - Y % 8);
 800b2da:	79bb      	ldrb	r3, [r7, #6]
 800b2dc:	08db      	lsrs	r3, r3, #3
 800b2de:	b2d8      	uxtb	r0, r3
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	79f9      	ldrb	r1, [r7, #7]
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	440b      	add	r3, r1
 800b2ee:	4926      	ldr	r1, [pc, #152]	@ (800b388 <OLED_ShowImage+0x180>)
 800b2f0:	01d2      	lsls	r2, r2, #7
 800b2f2:	440a      	add	r2, r1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	b25a      	sxtb	r2, r3
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	7979      	ldrb	r1, [r7, #5]
 800b2fe:	fb03 f101 	mul.w	r1, r3, r1
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	440b      	add	r3, r1
 800b306:	4619      	mov	r1, r3
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	440b      	add	r3, r1
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	79bb      	ldrb	r3, [r7, #6]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	f1c3 0308 	rsb	r3, r3, #8
 800b31a:	fa41 f303 	asr.w	r3, r1, r3
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	4313      	orrs	r3, r2
 800b322:	b25c      	sxtb	r4, r3
 800b324:	4602      	mov	r2, r0
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	4413      	add	r3, r2
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	79f9      	ldrb	r1, [r7, #7]
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	440b      	add	r3, r1
 800b332:	b2e0      	uxtb	r0, r4
 800b334:	4914      	ldr	r1, [pc, #80]	@ (800b388 <OLED_ShowImage+0x180>)
 800b336:	01d2      	lsls	r2, r2, #7
 800b338:	440a      	add	r2, r1
 800b33a:	4413      	add	r3, r2
 800b33c:	4602      	mov	r2, r0
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	e000      	b.n	800b344 <OLED_ShowImage+0x13c>
      if (Y / 8 + j + 1 > 7) { continue; }
 800b342:	bf00      	nop
    for (i = 0; i < Width; i++) {
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	3301      	adds	r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	7bfa      	ldrb	r2, [r7, #15]
 800b34c:	797b      	ldrb	r3, [r7, #5]
 800b34e:	429a      	cmp	r2, r3
 800b350:	f4ff af7e 	bcc.w	800b250 <OLED_ShowImage+0x48>
 800b354:	e000      	b.n	800b358 <OLED_ShowImage+0x150>
      if (X + i > 127) { break; }
 800b356:	bf00      	nop
  for (j = 0; j < (Height - 1) / 8 + 1; j++) {
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	3301      	adds	r3, #1
 800b35c:	73bb      	strb	r3, [r7, #14]
 800b35e:	793b      	ldrb	r3, [r7, #4]
 800b360:	3b01      	subs	r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	da00      	bge.n	800b368 <OLED_ShowImage+0x160>
 800b366:	3307      	adds	r3, #7
 800b368:	10db      	asrs	r3, r3, #3
 800b36a:	461a      	mov	r2, r3
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	429a      	cmp	r2, r3
 800b370:	f6bf af6b 	bge.w	800b24a <OLED_ShowImage+0x42>
 800b374:	e004      	b.n	800b380 <OLED_ShowImage+0x178>
  if (X > 127) { return; }
 800b376:	bf00      	nop
 800b378:	e002      	b.n	800b380 <OLED_ShowImage+0x178>
  if (Y > 63) { return; }
 800b37a:	bf00      	nop
 800b37c:	e000      	b.n	800b380 <OLED_ShowImage+0x178>
      if (Y / 8 + j > 7) { return; }
 800b37e:	bf00      	nop
    }
  }
}
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	2000464c 	.word	0x2000464c

0800b38c <OLED_Printf>:
 * @param format 指定要显示的格式化字符串，范围：ASCII码可见字符组成的字符串
 * @param ... 格式化字符串参数列表
 * @return 无
 * @note 调用此函数后，要想真正地呈现在屏幕上，还需调用更新函数
 */
void OLED_Printf(uint8_t X, uint8_t Y, uint8_t FontSize, char *format, ...) {
 800b38c:	b408      	push	{r3}
 800b38e:	b580      	push	{r7, lr}
 800b390:	b08d      	sub	sp, #52	@ 0x34
 800b392:	af00      	add	r7, sp, #0
 800b394:	4603      	mov	r3, r0
 800b396:	71fb      	strb	r3, [r7, #7]
 800b398:	460b      	mov	r3, r1
 800b39a:	71bb      	strb	r3, [r7, #6]
 800b39c:	4613      	mov	r3, r2
 800b39e:	717b      	strb	r3, [r7, #5]
  char String[30];                         // 定义字符数组
  va_list arg;                             // 定义可变参数列表数据类型的变量arg
  va_start(arg, format);                   // 从format开始，接收参数列表到arg变量
 800b3a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b3a4:	60fb      	str	r3, [r7, #12]
  vsprintf(String, format, arg);           // 使用vsprintf打印格式化字符串和参数列表到字符数组中
 800b3a6:	f107 0310 	add.w	r3, r7, #16
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f003 fa40 	bl	800e834 <vsiprintf>
  va_end(arg);                             // 结束变量arg
  OLED_ShowString(X, Y, String, FontSize); // OLED显示字符数组（字符串）
 800b3b4:	797b      	ldrb	r3, [r7, #5]
 800b3b6:	f107 0210 	add.w	r2, r7, #16
 800b3ba:	79b9      	ldrb	r1, [r7, #6]
 800b3bc:	79f8      	ldrb	r0, [r7, #7]
 800b3be:	f7ff fef7 	bl	800b1b0 <OLED_ShowString>
}
 800b3c2:	bf00      	nop
 800b3c4:	3734      	adds	r7, #52	@ 0x34
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3cc:	b001      	add	sp, #4
 800b3ce:	4770      	bx	lr

0800b3d0 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af04      	add	r7, sp, #16
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800b3da:	4b32      	ldr	r3, [pc, #200]	@ (800b4a4 <set_int_enable+0xd4>)
 800b3dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d025      	beq.n	800b430 <set_int_enable+0x60>
        if (enable)
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	73fb      	strb	r3, [r7, #15]
 800b3ee:	e001      	b.n	800b3f4 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800b3f4:	4b2b      	ldr	r3, [pc, #172]	@ (800b4a4 <set_int_enable+0xd4>)
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	b299      	uxth	r1, r3
 800b3fe:	4b29      	ldr	r3, [pc, #164]	@ (800b4a4 <set_int_enable+0xd4>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	7c5b      	ldrb	r3, [r3, #17]
 800b404:	461a      	mov	r2, r3
 800b406:	2364      	movs	r3, #100	@ 0x64
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	2301      	movs	r3, #1
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	f107 030f 	add.w	r3, r7, #15
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2301      	movs	r3, #1
 800b416:	4824      	ldr	r0, [pc, #144]	@ (800b4a8 <set_int_enable+0xd8>)
 800b418:	f7f8 fd66 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <set_int_enable+0x58>
            return -1;
 800b422:	f04f 33ff 	mov.w	r3, #4294967295
 800b426:	e039      	b.n	800b49c <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 800b428:	7bfa      	ldrb	r2, [r7, #15]
 800b42a:	4b1e      	ldr	r3, [pc, #120]	@ (800b4a4 <set_int_enable+0xd4>)
 800b42c:	745a      	strb	r2, [r3, #17]
 800b42e:	e034      	b.n	800b49a <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 800b430:	4b1c      	ldr	r3, [pc, #112]	@ (800b4a4 <set_int_enable+0xd4>)
 800b432:	7a9b      	ldrb	r3, [r3, #10]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <set_int_enable+0x6e>
            return -1;
 800b438:	f04f 33ff 	mov.w	r3, #4294967295
 800b43c:	e02e      	b.n	800b49c <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d005      	beq.n	800b450 <set_int_enable+0x80>
 800b444:	4b17      	ldr	r3, [pc, #92]	@ (800b4a4 <set_int_enable+0xd4>)
 800b446:	7c5b      	ldrb	r3, [r3, #17]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <set_int_enable+0x80>
            return 0;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e025      	b.n	800b49c <set_int_enable+0xcc>
        if (enable)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d002      	beq.n	800b45c <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 800b456:	2301      	movs	r3, #1
 800b458:	73fb      	strb	r3, [r7, #15]
 800b45a:	e001      	b.n	800b460 <set_int_enable+0x90>
        else
            tmp = 0x00;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800b460:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <set_int_enable+0xd4>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	005b      	lsls	r3, r3, #1
 800b468:	b299      	uxth	r1, r3
 800b46a:	4b0e      	ldr	r3, [pc, #56]	@ (800b4a4 <set_int_enable+0xd4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	7c5b      	ldrb	r3, [r3, #17]
 800b470:	461a      	mov	r2, r3
 800b472:	2364      	movs	r3, #100	@ 0x64
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	2301      	movs	r3, #1
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	f107 030f 	add.w	r3, r7, #15
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	2301      	movs	r3, #1
 800b482:	4809      	ldr	r0, [pc, #36]	@ (800b4a8 <set_int_enable+0xd8>)
 800b484:	f7f8 fd30 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <set_int_enable+0xc4>
            return -1;
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295
 800b492:	e003      	b.n	800b49c <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 800b494:	7bfa      	ldrb	r2, [r7, #15]
 800b496:	4b03      	ldr	r3, [pc, #12]	@ (800b4a4 <set_int_enable+0xd4>)
 800b498:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	2000001c 	.word	0x2000001c
 800b4a8:	200003d4 	.word	0x200003d4

0800b4ac <mpu_init>:
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */

int mpu_init(struct int_param_s *int_param)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af04      	add	r7, sp, #16
 800b4b2:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 800b4b4:	2380      	movs	r3, #128	@ 0x80
 800b4b6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800b4b8:	4b66      	ldr	r3, [pc, #408]	@ (800b654 <mpu_init+0x1a8>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	b299      	uxth	r1, r3
 800b4c2:	4b64      	ldr	r3, [pc, #400]	@ (800b654 <mpu_init+0x1a8>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	7d5b      	ldrb	r3, [r3, #21]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	2364      	movs	r3, #100	@ 0x64
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f107 0308 	add.w	r3, r7, #8
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	2301      	movs	r3, #1
 800b4da:	485f      	ldr	r0, [pc, #380]	@ (800b658 <mpu_init+0x1ac>)
 800b4dc:	f7f8 fd04 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <mpu_init+0x40>
        return -1;
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	e0af      	b.n	800b64c <mpu_init+0x1a0>
    delay_ms(100);
 800b4ec:	2064      	movs	r0, #100	@ 0x64
 800b4ee:	f002 ff95 	bl	800e41c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800b4f6:	4b57      	ldr	r3, [pc, #348]	@ (800b654 <mpu_init+0x1a8>)
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	b299      	uxth	r1, r3
 800b500:	4b54      	ldr	r3, [pc, #336]	@ (800b654 <mpu_init+0x1a8>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	7d5b      	ldrb	r3, [r3, #21]
 800b506:	461a      	mov	r2, r3
 800b508:	2364      	movs	r3, #100	@ 0x64
 800b50a:	9302      	str	r3, [sp, #8]
 800b50c:	2301      	movs	r3, #1
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	f107 0308 	add.w	r3, r7, #8
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	2301      	movs	r3, #1
 800b518:	484f      	ldr	r0, [pc, #316]	@ (800b658 <mpu_init+0x1ac>)
 800b51a:	f7f8 fce5 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <mpu_init+0x7e>
        return -1;
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	e090      	b.n	800b64c <mpu_init+0x1a0>

   st.chip_cfg.accel_half = 0;
 800b52a:	4b4a      	ldr	r3, [pc, #296]	@ (800b654 <mpu_init+0x1a8>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800b530:	2348      	movs	r3, #72	@ 0x48
 800b532:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800b534:	4b47      	ldr	r3, [pc, #284]	@ (800b654 <mpu_init+0x1a8>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	b299      	uxth	r1, r3
 800b53e:	4b45      	ldr	r3, [pc, #276]	@ (800b654 <mpu_init+0x1a8>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	7a1b      	ldrb	r3, [r3, #8]
 800b544:	461a      	mov	r2, r3
 800b546:	2364      	movs	r3, #100	@ 0x64
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	2301      	movs	r3, #1
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2301      	movs	r3, #1
 800b556:	4840      	ldr	r0, [pc, #256]	@ (800b658 <mpu_init+0x1ac>)
 800b558:	f7f8 fcc6 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <mpu_init+0xbc>
        return -1;
 800b562:	f04f 33ff 	mov.w	r3, #4294967295
 800b566:	e071      	b.n	800b64c <mpu_init+0x1a0>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800b568:	4b3a      	ldr	r3, [pc, #232]	@ (800b654 <mpu_init+0x1a8>)
 800b56a:	22ff      	movs	r2, #255	@ 0xff
 800b56c:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800b56e:	4b39      	ldr	r3, [pc, #228]	@ (800b654 <mpu_init+0x1a8>)
 800b570:	22ff      	movs	r2, #255	@ 0xff
 800b572:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800b574:	4b37      	ldr	r3, [pc, #220]	@ (800b654 <mpu_init+0x1a8>)
 800b576:	22ff      	movs	r2, #255	@ 0xff
 800b578:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800b57a:	4b36      	ldr	r3, [pc, #216]	@ (800b654 <mpu_init+0x1a8>)
 800b57c:	22ff      	movs	r2, #255	@ 0xff
 800b57e:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800b580:	4b34      	ldr	r3, [pc, #208]	@ (800b654 <mpu_init+0x1a8>)
 800b582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b586:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800b588:	4b32      	ldr	r3, [pc, #200]	@ (800b654 <mpu_init+0x1a8>)
 800b58a:	22ff      	movs	r2, #255	@ 0xff
 800b58c:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800b58e:	4b31      	ldr	r3, [pc, #196]	@ (800b654 <mpu_init+0x1a8>)
 800b590:	22ff      	movs	r2, #255	@ 0xff
 800b592:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800b594:	4b2f      	ldr	r3, [pc, #188]	@ (800b654 <mpu_init+0x1a8>)
 800b596:	2201      	movs	r2, #1
 800b598:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800b59a:	4b2e      	ldr	r3, [pc, #184]	@ (800b654 <mpu_init+0x1a8>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 800b5a2:	4b2c      	ldr	r3, [pc, #176]	@ (800b654 <mpu_init+0x1a8>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 800b5aa:	4b2a      	ldr	r3, [pc, #168]	@ (800b654 <mpu_init+0x1a8>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800b5b0:	4b28      	ldr	r3, [pc, #160]	@ (800b654 <mpu_init+0x1a8>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800b5b6:	220c      	movs	r2, #12
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	4828      	ldr	r0, [pc, #160]	@ (800b65c <mpu_init+0x1b0>)
 800b5bc:	f003 f954 	bl	800e868 <memset>
    st.chip_cfg.dmp_on = 0;
 800b5c0:	4b24      	ldr	r3, [pc, #144]	@ (800b654 <mpu_init+0x1a8>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 800b5c8:	4b22      	ldr	r3, [pc, #136]	@ (800b654 <mpu_init+0x1a8>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800b5d0:	4b20      	ldr	r3, [pc, #128]	@ (800b654 <mpu_init+0x1a8>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 800b5d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b5da:	f000 fa6d 	bl	800bab8 <mpu_set_gyro_fsr>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <mpu_init+0x13e>
        return -1;
 800b5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e8:	e030      	b.n	800b64c <mpu_init+0x1a0>
    if (mpu_set_accel_fsr(2))
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	f000 fafe 	bl	800bbec <mpu_set_accel_fsr>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <mpu_init+0x150>
        return -1;
 800b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fa:	e027      	b.n	800b64c <mpu_init+0x1a0>
    if (mpu_set_lpf(42))
 800b5fc:	202a      	movs	r0, #42	@ 0x2a
 800b5fe:	f000 fb67 	bl	800bcd0 <mpu_set_lpf>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <mpu_init+0x162>
        return -1;
 800b608:	f04f 33ff 	mov.w	r3, #4294967295
 800b60c:	e01e      	b.n	800b64c <mpu_init+0x1a0>
    if (mpu_set_sample_rate(50))
 800b60e:	2032      	movs	r0, #50	@ 0x32
 800b610:	f000 fbb8 	bl	800bd84 <mpu_set_sample_rate>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <mpu_init+0x174>
        return -1;
 800b61a:	f04f 33ff 	mov.w	r3, #4294967295
 800b61e:	e015      	b.n	800b64c <mpu_init+0x1a0>
    if (mpu_configure_fifo(0))
 800b620:	2000      	movs	r0, #0
 800b622:	f000 fc1f 	bl	800be64 <mpu_configure_fifo>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <mpu_init+0x186>
        return -1;
 800b62c:	f04f 33ff 	mov.w	r3, #4294967295
 800b630:	e00c      	b.n	800b64c <mpu_init+0x1a0>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800b632:	2000      	movs	r0, #0
 800b634:	f000 fd9e 	bl	800c174 <mpu_set_bypass>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <mpu_init+0x198>
        return -1;
 800b63e:	f04f 33ff 	mov.w	r3, #4294967295
 800b642:	e003      	b.n	800b64c <mpu_init+0x1a0>
#endif

    mpu_set_sensors(0);
 800b644:	2000      	movs	r0, #0
 800b646:	f000 fc5f 	bl	800bf08 <mpu_set_sensors>
    return 0;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	2000001c 	.word	0x2000001c
 800b658:	200003d4 	.word	0x200003d4
 800b65c:	20000032 	.word	0x20000032

0800b660 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af04      	add	r7, sp, #16
 800b666:	4603      	mov	r3, r0
 800b668:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 800b66a:	88fb      	ldrh	r3, [r7, #6]
 800b66c:	2b28      	cmp	r3, #40	@ 0x28
 800b66e:	d902      	bls.n	800b676 <mpu_lp_accel_mode+0x16>
        return -1;
 800b670:	f04f 33ff 	mov.w	r3, #4294967295
 800b674:	e0a7      	b.n	800b7c6 <mpu_lp_accel_mode+0x166>

    if (!rate) {
 800b676:	88fb      	ldrh	r3, [r7, #6]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d125      	bne.n	800b6c8 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 800b67c:	2000      	movs	r0, #0
 800b67e:	f000 fe77 	bl	800c370 <mpu_set_int_latched>
        tmp[0] = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800b686:	2307      	movs	r3, #7
 800b688:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800b68a:	4b51      	ldr	r3, [pc, #324]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	b299      	uxth	r1, r3
 800b694:	4b4e      	ldr	r3, [pc, #312]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	7d5b      	ldrb	r3, [r3, #21]
 800b69a:	461a      	mov	r2, r3
 800b69c:	2364      	movs	r3, #100	@ 0x64
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	f107 030c 	add.w	r3, r7, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4849      	ldr	r0, [pc, #292]	@ (800b7d4 <mpu_lp_accel_mode+0x174>)
 800b6ae:	f7f8 fc1b 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <mpu_lp_accel_mode+0x5e>
            return -1;
 800b6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6bc:	e083      	b.n	800b7c6 <mpu_lp_accel_mode+0x166>
        st.chip_cfg.lp_accel_mode = 0;
 800b6be:	4b44      	ldr	r3, [pc, #272]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	751a      	strb	r2, [r3, #20]
        return 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	e07e      	b.n	800b7c6 <mpu_lp_accel_mode+0x166>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f000 fe51 	bl	800c370 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 800b6ce:	88fb      	ldrh	r3, [r7, #6]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d102      	bne.n	800b6da <mpu_lp_accel_mode+0x7a>
        tmp[0] = INV_LPA_1_25HZ;
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	733b      	strb	r3, [r7, #12]
 800b6d8:	e032      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate == 2)
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d102      	bne.n	800b6e6 <mpu_lp_accel_mode+0x86>
        tmp[0] = INV_LPA_2_5HZ;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	733b      	strb	r3, [r7, #12]
 800b6e4:	e02c      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 5)
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	2b05      	cmp	r3, #5
 800b6ea:	d802      	bhi.n	800b6f2 <mpu_lp_accel_mode+0x92>
        tmp[0] = INV_LPA_5HZ;
 800b6ec:	2304      	movs	r3, #4
 800b6ee:	733b      	strb	r3, [r7, #12]
 800b6f0:	e026      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 10)
 800b6f2:	88fb      	ldrh	r3, [r7, #6]
 800b6f4:	2b0a      	cmp	r3, #10
 800b6f6:	d802      	bhi.n	800b6fe <mpu_lp_accel_mode+0x9e>
        tmp[0] = INV_LPA_10HZ;
 800b6f8:	2305      	movs	r3, #5
 800b6fa:	733b      	strb	r3, [r7, #12]
 800b6fc:	e020      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 20)
 800b6fe:	88fb      	ldrh	r3, [r7, #6]
 800b700:	2b14      	cmp	r3, #20
 800b702:	d802      	bhi.n	800b70a <mpu_lp_accel_mode+0xaa>
        tmp[0] = INV_LPA_20HZ;
 800b704:	2306      	movs	r3, #6
 800b706:	733b      	strb	r3, [r7, #12]
 800b708:	e01a      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 40)
 800b70a:	88fb      	ldrh	r3, [r7, #6]
 800b70c:	2b28      	cmp	r3, #40	@ 0x28
 800b70e:	d802      	bhi.n	800b716 <mpu_lp_accel_mode+0xb6>
        tmp[0] = INV_LPA_40HZ;
 800b710:	2307      	movs	r3, #7
 800b712:	733b      	strb	r3, [r7, #12]
 800b714:	e014      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 80)
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	2b50      	cmp	r3, #80	@ 0x50
 800b71a:	d802      	bhi.n	800b722 <mpu_lp_accel_mode+0xc2>
        tmp[0] = INV_LPA_80HZ;
 800b71c:	2308      	movs	r3, #8
 800b71e:	733b      	strb	r3, [r7, #12]
 800b720:	e00e      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 160)
 800b722:	88fb      	ldrh	r3, [r7, #6]
 800b724:	2ba0      	cmp	r3, #160	@ 0xa0
 800b726:	d802      	bhi.n	800b72e <mpu_lp_accel_mode+0xce>
        tmp[0] = INV_LPA_160HZ;
 800b728:	2309      	movs	r3, #9
 800b72a:	733b      	strb	r3, [r7, #12]
 800b72c:	e008      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else if (rate <= 320)
 800b72e:	88fb      	ldrh	r3, [r7, #6]
 800b730:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b734:	d802      	bhi.n	800b73c <mpu_lp_accel_mode+0xdc>
        tmp[0] = INV_LPA_320HZ;
 800b736:	230a      	movs	r3, #10
 800b738:	733b      	strb	r3, [r7, #12]
 800b73a:	e001      	b.n	800b740 <mpu_lp_accel_mode+0xe0>
    else
        tmp[0] = INV_LPA_640HZ;
 800b73c:	230b      	movs	r3, #11
 800b73e:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800b740:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	b299      	uxth	r1, r3
 800b74a:	4b21      	ldr	r3, [pc, #132]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	7a5b      	ldrb	r3, [r3, #9]
 800b750:	461a      	mov	r2, r3
 800b752:	2364      	movs	r3, #100	@ 0x64
 800b754:	9302      	str	r3, [sp, #8]
 800b756:	2301      	movs	r3, #1
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2301      	movs	r3, #1
 800b762:	481c      	ldr	r0, [pc, #112]	@ (800b7d4 <mpu_lp_accel_mode+0x174>)
 800b764:	f7f8 fbc0 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <mpu_lp_accel_mode+0x114>
        return -1;
 800b76e:	f04f 33ff 	mov.w	r3, #4294967295
 800b772:	e028      	b.n	800b7c6 <mpu_lp_accel_mode+0x166>
    tmp[0] = BIT_LPA_CYCLE;
 800b774:	2320      	movs	r3, #32
 800b776:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800b778:	4b15      	ldr	r3, [pc, #84]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	b299      	uxth	r1, r3
 800b782:	4b13      	ldr	r3, [pc, #76]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	7d5b      	ldrb	r3, [r3, #21]
 800b788:	461a      	mov	r2, r3
 800b78a:	2364      	movs	r3, #100	@ 0x64
 800b78c:	9302      	str	r3, [sp, #8]
 800b78e:	2301      	movs	r3, #1
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	f107 030c 	add.w	r3, r7, #12
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2301      	movs	r3, #1
 800b79a:	480e      	ldr	r0, [pc, #56]	@ (800b7d4 <mpu_lp_accel_mode+0x174>)
 800b79c:	f7f8 fba4 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <mpu_lp_accel_mode+0x14c>
        return -1;
 800b7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7aa:	e00c      	b.n	800b7c6 <mpu_lp_accel_mode+0x166>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800b7ac:	4b08      	ldr	r3, [pc, #32]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b7ae:	2208      	movs	r2, #8
 800b7b0:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800b7b2:	4b07      	ldr	r3, [pc, #28]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800b7b8:	4b05      	ldr	r3, [pc, #20]	@ (800b7d0 <mpu_lp_accel_mode+0x170>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f000 fb50 	bl	800be64 <mpu_configure_fifo>

    return 0;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	2000001c 	.word	0x2000001c
 800b7d4:	200003d4 	.word	0x200003d4

0800b7d8 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b7de:	4ba2      	ldr	r3, [pc, #648]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b7e0:	7a9b      	ldrb	r3, [r3, #10]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <mpu_reset_fifo+0x14>
        return -1;
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	e15b      	b.n	800baa4 <mpu_reset_fifo+0x2cc>

    data = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800b7f0:	4b9d      	ldr	r3, [pc, #628]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	b299      	uxth	r1, r3
 800b7fa:	4b9b      	ldr	r3, [pc, #620]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	7c5b      	ldrb	r3, [r3, #17]
 800b800:	461a      	mov	r2, r3
 800b802:	2364      	movs	r3, #100	@ 0x64
 800b804:	9302      	str	r3, [sp, #8]
 800b806:	2301      	movs	r3, #1
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	1dfb      	adds	r3, r7, #7
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	2301      	movs	r3, #1
 800b810:	4896      	ldr	r0, [pc, #600]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b812:	f7f8 fb69 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <mpu_reset_fifo+0x4a>
        return -1;
 800b81c:	f04f 33ff 	mov.w	r3, #4294967295
 800b820:	e140      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800b822:	4b91      	ldr	r3, [pc, #580]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	b299      	uxth	r1, r3
 800b82c:	4b8e      	ldr	r3, [pc, #568]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	795b      	ldrb	r3, [r3, #5]
 800b832:	461a      	mov	r2, r3
 800b834:	2364      	movs	r3, #100	@ 0x64
 800b836:	9302      	str	r3, [sp, #8]
 800b838:	2301      	movs	r3, #1
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	1dfb      	adds	r3, r7, #7
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	2301      	movs	r3, #1
 800b842:	488a      	ldr	r0, [pc, #552]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b844:	f7f8 fb50 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <mpu_reset_fifo+0x7c>
        return -1;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	e127      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b854:	4b84      	ldr	r3, [pc, #528]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	b299      	uxth	r1, r3
 800b85e:	4b82      	ldr	r3, [pc, #520]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	791b      	ldrb	r3, [r3, #4]
 800b864:	461a      	mov	r2, r3
 800b866:	2364      	movs	r3, #100	@ 0x64
 800b868:	9302      	str	r3, [sp, #8]
 800b86a:	2301      	movs	r3, #1
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	1dfb      	adds	r3, r7, #7
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	2301      	movs	r3, #1
 800b874:	487d      	ldr	r0, [pc, #500]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b876:	f7f8 fb37 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <mpu_reset_fifo+0xae>
        return -1;
 800b880:	f04f 33ff 	mov.w	r3, #4294967295
 800b884:	e10e      	b.n	800baa4 <mpu_reset_fifo+0x2cc>

    if (st.chip_cfg.dmp_on) {
 800b886:	4b78      	ldr	r3, [pc, #480]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 8082 	beq.w	800b996 <mpu_reset_fifo+0x1be>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800b892:	230c      	movs	r3, #12
 800b894:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b896:	4b74      	ldr	r3, [pc, #464]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	b299      	uxth	r1, r3
 800b8a0:	4b71      	ldr	r3, [pc, #452]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	791b      	ldrb	r3, [r3, #4]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	2364      	movs	r3, #100	@ 0x64
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	1dfb      	adds	r3, r7, #7
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	486d      	ldr	r0, [pc, #436]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b8b8:	f7f8 fb16 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <mpu_reset_fifo+0xf0>
            return -1;
 800b8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c6:	e0ed      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
        delay_ms(50);
 800b8c8:	2032      	movs	r0, #50	@ 0x32
 800b8ca:	f002 fda7 	bl	800e41c <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800b8ce:	23c0      	movs	r3, #192	@ 0xc0
 800b8d0:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800b8d2:	4b65      	ldr	r3, [pc, #404]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b8d4:	7a9b      	ldrb	r3, [r3, #10]
 800b8d6:	f003 0301 	and.w	r3, r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d004      	beq.n	800b8e8 <mpu_reset_fifo+0x110>
            data |= BIT_AUX_IF_EN;
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	f043 0320 	orr.w	r3, r3, #32
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b8e8:	4b5f      	ldr	r3, [pc, #380]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	b299      	uxth	r1, r3
 800b8f2:	4b5d      	ldr	r3, [pc, #372]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	791b      	ldrb	r3, [r3, #4]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	2364      	movs	r3, #100	@ 0x64
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	2301      	movs	r3, #1
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	1dfb      	adds	r3, r7, #7
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	2301      	movs	r3, #1
 800b908:	4858      	ldr	r0, [pc, #352]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b90a:	f7f8 faed 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <mpu_reset_fifo+0x142>
            return -1;
 800b914:	f04f 33ff 	mov.w	r3, #4294967295
 800b918:	e0c4      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
        if (st.chip_cfg.int_enable)
 800b91a:	4b53      	ldr	r3, [pc, #332]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b91c:	7c5b      	ldrb	r3, [r3, #17]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <mpu_reset_fifo+0x150>
            data = BIT_DMP_INT_EN;
 800b922:	2302      	movs	r3, #2
 800b924:	71fb      	strb	r3, [r7, #7]
 800b926:	e001      	b.n	800b92c <mpu_reset_fifo+0x154>
        else
            data = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800b92c:	4b4e      	ldr	r3, [pc, #312]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	b299      	uxth	r1, r3
 800b936:	4b4c      	ldr	r3, [pc, #304]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	7c5b      	ldrb	r3, [r3, #17]
 800b93c:	461a      	mov	r2, r3
 800b93e:	2364      	movs	r3, #100	@ 0x64
 800b940:	9302      	str	r3, [sp, #8]
 800b942:	2301      	movs	r3, #1
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	1dfb      	adds	r3, r7, #7
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	2301      	movs	r3, #1
 800b94c:	4847      	ldr	r0, [pc, #284]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b94e:	f7f8 facb 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <mpu_reset_fifo+0x186>
            return -1;
 800b958:	f04f 33ff 	mov.w	r3, #4294967295
 800b95c:	e0a2      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
        data = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800b962:	4b41      	ldr	r3, [pc, #260]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	005b      	lsls	r3, r3, #1
 800b96a:	b299      	uxth	r1, r3
 800b96c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	461a      	mov	r2, r3
 800b974:	2364      	movs	r3, #100	@ 0x64
 800b976:	9302      	str	r3, [sp, #8]
 800b978:	2301      	movs	r3, #1
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	1dfb      	adds	r3, r7, #7
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	2301      	movs	r3, #1
 800b982:	483a      	ldr	r0, [pc, #232]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b984:	f7f8 fab0 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 8089 	beq.w	800baa2 <mpu_reset_fifo+0x2ca>
            return -1;
 800b990:	f04f 33ff 	mov.w	r3, #4294967295
 800b994:	e086      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
    } else {
        data = BIT_FIFO_RST;
 800b996:	2304      	movs	r3, #4
 800b998:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b99a:	4b33      	ldr	r3, [pc, #204]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	005b      	lsls	r3, r3, #1
 800b9a2:	b299      	uxth	r1, r3
 800b9a4:	4b30      	ldr	r3, [pc, #192]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	791b      	ldrb	r3, [r3, #4]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	2364      	movs	r3, #100	@ 0x64
 800b9ae:	9302      	str	r3, [sp, #8]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	1dfb      	adds	r3, r7, #7
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	482c      	ldr	r0, [pc, #176]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800b9bc:	f7f8 fa94 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <mpu_reset_fifo+0x1f4>
            return -1;
 800b9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ca:	e06b      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800b9cc:	4b26      	ldr	r3, [pc, #152]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b9ce:	7c9b      	ldrb	r3, [r3, #18]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d105      	bne.n	800b9e0 <mpu_reset_fifo+0x208>
 800b9d4:	4b24      	ldr	r3, [pc, #144]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b9d6:	7a9b      	ldrb	r3, [r3, #10]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <mpu_reset_fifo+0x20e>
            data = BIT_FIFO_EN;
 800b9e0:	2340      	movs	r3, #64	@ 0x40
 800b9e2:	71fb      	strb	r3, [r7, #7]
 800b9e4:	e001      	b.n	800b9ea <mpu_reset_fifo+0x212>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800b9e6:	2360      	movs	r3, #96	@ 0x60
 800b9e8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800b9ea:	4b1f      	ldr	r3, [pc, #124]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	b299      	uxth	r1, r3
 800b9f4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	2364      	movs	r3, #100	@ 0x64
 800b9fe:	9302      	str	r3, [sp, #8]
 800ba00:	2301      	movs	r3, #1
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	1dfb      	adds	r3, r7, #7
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	4818      	ldr	r0, [pc, #96]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800ba0c:	f7f8 fa6c 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <mpu_reset_fifo+0x244>
            return -1;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1a:	e043      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
        delay_ms(50);
 800ba1c:	2032      	movs	r0, #50	@ 0x32
 800ba1e:	f002 fcfd 	bl	800e41c <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800ba22:	4b11      	ldr	r3, [pc, #68]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800ba24:	7c5b      	ldrb	r3, [r3, #17]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <mpu_reset_fifo+0x258>
            data = BIT_DATA_RDY_EN;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	71fb      	strb	r3, [r7, #7]
 800ba2e:	e001      	b.n	800ba34 <mpu_reset_fifo+0x25c>
        else
            data = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800ba34:	4b0c      	ldr	r3, [pc, #48]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	b299      	uxth	r1, r3
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <mpu_reset_fifo+0x290>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	7c5b      	ldrb	r3, [r3, #17]
 800ba44:	461a      	mov	r2, r3
 800ba46:	2364      	movs	r3, #100	@ 0x64
 800ba48:	9302      	str	r3, [sp, #8]
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	1dfb      	adds	r3, r7, #7
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	2301      	movs	r3, #1
 800ba54:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <mpu_reset_fifo+0x294>)
 800ba56:	f7f8 fa47 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d007      	beq.n	800ba70 <mpu_reset_fifo+0x298>
            return -1;
 800ba60:	f04f 33ff 	mov.w	r3, #4294967295
 800ba64:	e01e      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
 800ba66:	bf00      	nop
 800ba68:	2000001c 	.word	0x2000001c
 800ba6c:	200003d4 	.word	0x200003d4
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800ba70:	4b0e      	ldr	r3, [pc, #56]	@ (800baac <mpu_reset_fifo+0x2d4>)
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	b299      	uxth	r1, r3
 800ba7a:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <mpu_reset_fifo+0x2d4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	795b      	ldrb	r3, [r3, #5]
 800ba80:	461a      	mov	r2, r3
 800ba82:	2364      	movs	r3, #100	@ 0x64
 800ba84:	9302      	str	r3, [sp, #8]
 800ba86:	2301      	movs	r3, #1
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	4b09      	ldr	r3, [pc, #36]	@ (800bab0 <mpu_reset_fifo+0x2d8>)
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	2301      	movs	r3, #1
 800ba90:	4808      	ldr	r0, [pc, #32]	@ (800bab4 <mpu_reset_fifo+0x2dc>)
 800ba92:	f7f8 fa29 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <mpu_reset_fifo+0x2ca>
            return -1;
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	e000      	b.n	800baa4 <mpu_reset_fifo+0x2cc>
    }
    return 0;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	2000001c 	.word	0x2000001c
 800bab0:	2000002c 	.word	0x2000002c
 800bab4:	200003d4 	.word	0x200003d4

0800bab8 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b088      	sub	sp, #32
 800babc:	af04      	add	r7, sp, #16
 800babe:	4603      	mov	r3, r0
 800bac0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800bac2:	4b2b      	ldr	r3, [pc, #172]	@ (800bb70 <mpu_set_gyro_fsr+0xb8>)
 800bac4:	7a9b      	ldrb	r3, [r3, #10]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d102      	bne.n	800bad0 <mpu_set_gyro_fsr+0x18>
        return -1;
 800baca:	f04f 33ff 	mov.w	r3, #4294967295
 800bace:	e04a      	b.n	800bb66 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800bad6:	d017      	beq.n	800bb08 <mpu_set_gyro_fsr+0x50>
 800bad8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800badc:	dc17      	bgt.n	800bb0e <mpu_set_gyro_fsr+0x56>
 800bade:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bae2:	d00e      	beq.n	800bb02 <mpu_set_gyro_fsr+0x4a>
 800bae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bae8:	dc11      	bgt.n	800bb0e <mpu_set_gyro_fsr+0x56>
 800baea:	2bfa      	cmp	r3, #250	@ 0xfa
 800baec:	d003      	beq.n	800baf6 <mpu_set_gyro_fsr+0x3e>
 800baee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800baf2:	d003      	beq.n	800bafc <mpu_set_gyro_fsr+0x44>
 800baf4:	e00b      	b.n	800bb0e <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
        break;
 800bafa:	e00b      	b.n	800bb14 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800bafc:	2308      	movs	r3, #8
 800bafe:	73fb      	strb	r3, [r7, #15]
        break;
 800bb00:	e008      	b.n	800bb14 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800bb02:	2310      	movs	r3, #16
 800bb04:	73fb      	strb	r3, [r7, #15]
        break;
 800bb06:	e005      	b.n	800bb14 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800bb08:	2318      	movs	r3, #24
 800bb0a:	73fb      	strb	r3, [r7, #15]
        break;
 800bb0c:	e002      	b.n	800bb14 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	e028      	b.n	800bb66 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800bb14:	4b16      	ldr	r3, [pc, #88]	@ (800bb70 <mpu_set_gyro_fsr+0xb8>)
 800bb16:	7a1a      	ldrb	r2, [r3, #8]
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
 800bb1a:	08db      	lsrs	r3, r3, #3
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d101      	bne.n	800bb26 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	e01f      	b.n	800bb66 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800bb26:	4b12      	ldr	r3, [pc, #72]	@ (800bb70 <mpu_set_gyro_fsr+0xb8>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	b299      	uxth	r1, r3
 800bb30:	4b0f      	ldr	r3, [pc, #60]	@ (800bb70 <mpu_set_gyro_fsr+0xb8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	799b      	ldrb	r3, [r3, #6]
 800bb36:	461a      	mov	r2, r3
 800bb38:	2364      	movs	r3, #100	@ 0x64
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	f107 030f 	add.w	r3, r7, #15
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2301      	movs	r3, #1
 800bb48:	480a      	ldr	r0, [pc, #40]	@ (800bb74 <mpu_set_gyro_fsr+0xbc>)
 800bb4a:	f7f8 f9cd 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <mpu_set_gyro_fsr+0xa2>
        return -1;
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	e005      	b.n	800bb66 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	08db      	lsrs	r3, r3, #3
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b03      	ldr	r3, [pc, #12]	@ (800bb70 <mpu_set_gyro_fsr+0xb8>)
 800bb62:	721a      	strb	r2, [r3, #8]
    return 0;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	2000001c 	.word	0x2000001c
 800bb74:	200003d4 	.word	0x200003d4

0800bb78 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800bb80:	4b19      	ldr	r3, [pc, #100]	@ (800bbe8 <mpu_get_accel_fsr+0x70>)
 800bb82:	7a5b      	ldrb	r3, [r3, #9]
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d81b      	bhi.n	800bbc0 <mpu_get_accel_fsr+0x48>
 800bb88:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <mpu_get_accel_fsr+0x18>)
 800bb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8e:	bf00      	nop
 800bb90:	0800bba1 	.word	0x0800bba1
 800bb94:	0800bba9 	.word	0x0800bba9
 800bb98:	0800bbb1 	.word	0x0800bbb1
 800bb9c:	0800bbb9 	.word	0x0800bbb9
    case INV_FSR_2G:
        fsr[0] = 2;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	701a      	strb	r2, [r3, #0]
        break;
 800bba6:	e00e      	b.n	800bbc6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2204      	movs	r2, #4
 800bbac:	701a      	strb	r2, [r3, #0]
        break;
 800bbae:	e00a      	b.n	800bbc6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2208      	movs	r2, #8
 800bbb4:	701a      	strb	r2, [r3, #0]
        break;
 800bbb6:	e006      	b.n	800bbc6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2210      	movs	r2, #16
 800bbbc:	701a      	strb	r2, [r3, #0]
        break;
 800bbbe:	e002      	b.n	800bbc6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc4:	e00a      	b.n	800bbdc <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800bbc6:	4b08      	ldr	r3, [pc, #32]	@ (800bbe8 <mpu_get_accel_fsr+0x70>)
 800bbc8:	7cdb      	ldrb	r3, [r3, #19]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	701a      	strb	r2, [r3, #0]
    return 0;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	2000001c 	.word	0x2000001c

0800bbec <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b088      	sub	sp, #32
 800bbf0:	af04      	add	r7, sp, #16
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800bbf6:	4b34      	ldr	r3, [pc, #208]	@ (800bcc8 <mpu_set_accel_fsr+0xdc>)
 800bbf8:	7a9b      	ldrb	r3, [r3, #10]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d102      	bne.n	800bc04 <mpu_set_accel_fsr+0x18>
        return -1;
 800bbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800bc02:	e05d      	b.n	800bcc0 <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 800bc04:	79fb      	ldrb	r3, [r7, #7]
 800bc06:	3b02      	subs	r3, #2
 800bc08:	2b0e      	cmp	r3, #14
 800bc0a:	d82d      	bhi.n	800bc68 <mpu_set_accel_fsr+0x7c>
 800bc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <mpu_set_accel_fsr+0x28>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bc51 	.word	0x0800bc51
 800bc18:	0800bc69 	.word	0x0800bc69
 800bc1c:	0800bc57 	.word	0x0800bc57
 800bc20:	0800bc69 	.word	0x0800bc69
 800bc24:	0800bc69 	.word	0x0800bc69
 800bc28:	0800bc69 	.word	0x0800bc69
 800bc2c:	0800bc5d 	.word	0x0800bc5d
 800bc30:	0800bc69 	.word	0x0800bc69
 800bc34:	0800bc69 	.word	0x0800bc69
 800bc38:	0800bc69 	.word	0x0800bc69
 800bc3c:	0800bc69 	.word	0x0800bc69
 800bc40:	0800bc69 	.word	0x0800bc69
 800bc44:	0800bc69 	.word	0x0800bc69
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc63 	.word	0x0800bc63
    case 2:
        data = INV_FSR_2G << 3;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
        break;
 800bc54:	e00b      	b.n	800bc6e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800bc56:	2308      	movs	r3, #8
 800bc58:	73fb      	strb	r3, [r7, #15]
        break;
 800bc5a:	e008      	b.n	800bc6e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 800bc5c:	2310      	movs	r3, #16
 800bc5e:	73fb      	strb	r3, [r7, #15]
        break;
 800bc60:	e005      	b.n	800bc6e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800bc62:	2318      	movs	r3, #24
 800bc64:	73fb      	strb	r3, [r7, #15]
        break;
 800bc66:	e002      	b.n	800bc6e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 800bc68:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6c:	e028      	b.n	800bcc0 <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800bc6e:	4b16      	ldr	r3, [pc, #88]	@ (800bcc8 <mpu_set_accel_fsr+0xdc>)
 800bc70:	7a5a      	ldrb	r2, [r3, #9]
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	08db      	lsrs	r3, r3, #3
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d101      	bne.n	800bc80 <mpu_set_accel_fsr+0x94>
        return 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e01f      	b.n	800bcc0 <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800bc80:	4b11      	ldr	r3, [pc, #68]	@ (800bcc8 <mpu_set_accel_fsr+0xdc>)
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	b299      	uxth	r1, r3
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <mpu_set_accel_fsr+0xdc>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	79db      	ldrb	r3, [r3, #7]
 800bc90:	461a      	mov	r2, r3
 800bc92:	2364      	movs	r3, #100	@ 0x64
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	2301      	movs	r3, #1
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	f107 030f 	add.w	r3, r7, #15
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	2301      	movs	r3, #1
 800bca2:	480a      	ldr	r0, [pc, #40]	@ (800bccc <mpu_set_accel_fsr+0xe0>)
 800bca4:	f7f8 f920 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <mpu_set_accel_fsr+0xc8>
        return -1;
 800bcae:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb2:	e005      	b.n	800bcc0 <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 800bcb4:	7bfb      	ldrb	r3, [r7, #15]
 800bcb6:	08db      	lsrs	r3, r3, #3
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	4b03      	ldr	r3, [pc, #12]	@ (800bcc8 <mpu_set_accel_fsr+0xdc>)
 800bcbc:	725a      	strb	r2, [r3, #9]
    return 0;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	2000001c 	.word	0x2000001c
 800bccc:	200003d4 	.word	0x200003d4

0800bcd0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af04      	add	r7, sp, #16
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800bcda:	4b28      	ldr	r3, [pc, #160]	@ (800bd7c <mpu_set_lpf+0xac>)
 800bcdc:	7a9b      	ldrb	r3, [r3, #10]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <mpu_set_lpf+0x18>
        return -1;
 800bce2:	f04f 33ff 	mov.w	r3, #4294967295
 800bce6:	e044      	b.n	800bd72 <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 800bce8:	88fb      	ldrh	r3, [r7, #6]
 800bcea:	2bbb      	cmp	r3, #187	@ 0xbb
 800bcec:	d902      	bls.n	800bcf4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	e019      	b.n	800bd28 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 800bcf4:	88fb      	ldrh	r3, [r7, #6]
 800bcf6:	2b61      	cmp	r3, #97	@ 0x61
 800bcf8:	d902      	bls.n	800bd00 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	73fb      	strb	r3, [r7, #15]
 800bcfe:	e013      	b.n	800bd28 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	2b29      	cmp	r3, #41	@ 0x29
 800bd04:	d902      	bls.n	800bd0c <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800bd06:	2303      	movs	r3, #3
 800bd08:	73fb      	strb	r3, [r7, #15]
 800bd0a:	e00d      	b.n	800bd28 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b13      	cmp	r3, #19
 800bd10:	d902      	bls.n	800bd18 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 800bd12:	2304      	movs	r3, #4
 800bd14:	73fb      	strb	r3, [r7, #15]
 800bd16:	e007      	b.n	800bd28 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800bd18:	88fb      	ldrh	r3, [r7, #6]
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d902      	bls.n	800bd24 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800bd1e:	2305      	movs	r3, #5
 800bd20:	73fb      	strb	r3, [r7, #15]
 800bd22:	e001      	b.n	800bd28 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 800bd24:	2306      	movs	r3, #6
 800bd26:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800bd28:	4b14      	ldr	r3, [pc, #80]	@ (800bd7c <mpu_set_lpf+0xac>)
 800bd2a:	7ada      	ldrb	r2, [r3, #11]
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d101      	bne.n	800bd36 <mpu_set_lpf+0x66>
        return 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e01d      	b.n	800bd72 <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800bd36:	4b11      	ldr	r3, [pc, #68]	@ (800bd7c <mpu_set_lpf+0xac>)
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	b299      	uxth	r1, r3
 800bd40:	4b0e      	ldr	r3, [pc, #56]	@ (800bd7c <mpu_set_lpf+0xac>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	789b      	ldrb	r3, [r3, #2]
 800bd46:	461a      	mov	r2, r3
 800bd48:	2364      	movs	r3, #100	@ 0x64
 800bd4a:	9302      	str	r3, [sp, #8]
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	f107 030f 	add.w	r3, r7, #15
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	2301      	movs	r3, #1
 800bd58:	4809      	ldr	r0, [pc, #36]	@ (800bd80 <mpu_set_lpf+0xb0>)
 800bd5a:	f7f8 f8c5 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d002      	beq.n	800bd6a <mpu_set_lpf+0x9a>
        return -1;
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	e003      	b.n	800bd72 <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 800bd6a:	7bfa      	ldrb	r2, [r7, #15]
 800bd6c:	4b03      	ldr	r3, [pc, #12]	@ (800bd7c <mpu_set_lpf+0xac>)
 800bd6e:	72da      	strb	r2, [r3, #11]
    return 0;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2000001c 	.word	0x2000001c
 800bd80:	200003d4 	.word	0x200003d4

0800bd84 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af04      	add	r7, sp, #16
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800bd8e:	4b33      	ldr	r3, [pc, #204]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800bd90:	7a9b      	ldrb	r3, [r3, #10]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <mpu_set_sample_rate+0x18>
        return -1;
 800bd96:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9a:	e05b      	b.n	800be54 <mpu_set_sample_rate+0xd0>

    if (st.chip_cfg.dmp_on)
 800bd9c:	4b2f      	ldr	r3, [pc, #188]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800bd9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <mpu_set_sample_rate+0x28>
        return -1;
 800bda6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdaa:	e053      	b.n	800be54 <mpu_set_sample_rate+0xd0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 800bdac:	4b2b      	ldr	r3, [pc, #172]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800bdae:	7d1b      	ldrb	r3, [r3, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00e      	beq.n	800bdd2 <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 800bdb4:	88fb      	ldrh	r3, [r7, #6]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d008      	beq.n	800bdcc <mpu_set_sample_rate+0x48>
 800bdba:	88fb      	ldrh	r3, [r7, #6]
 800bdbc:	2b28      	cmp	r3, #40	@ 0x28
 800bdbe:	d805      	bhi.n	800bdcc <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff fc4c 	bl	800b660 <mpu_lp_accel_mode>
                return 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e043      	b.n	800be54 <mpu_set_sample_rate+0xd0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800bdcc:	2000      	movs	r0, #0
 800bdce:	f7ff fc47 	bl	800b660 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d802      	bhi.n	800bdde <mpu_set_sample_rate+0x5a>
            rate = 4;
 800bdd8:	2304      	movs	r3, #4
 800bdda:	80fb      	strh	r3, [r7, #6]
 800bddc:	e006      	b.n	800bdec <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bde4:	d902      	bls.n	800bdec <mpu_set_sample_rate+0x68>
            rate = 1000;
 800bde6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bdea:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800bdec:	88fb      	ldrh	r3, [r7, #6]
 800bdee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bdf2:	fb92 f3f3 	sdiv	r3, r2, r3
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800bdfe:	4b17      	ldr	r3, [pc, #92]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	b299      	uxth	r1, r3
 800be08:	4b14      	ldr	r3, [pc, #80]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	461a      	mov	r2, r3
 800be10:	2364      	movs	r3, #100	@ 0x64
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	2301      	movs	r3, #1
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	f107 030f 	add.w	r3, r7, #15
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	2301      	movs	r3, #1
 800be20:	480f      	ldr	r0, [pc, #60]	@ (800be60 <mpu_set_sample_rate+0xdc>)
 800be22:	f7f8 f861 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <mpu_set_sample_rate+0xae>
            return -1;
 800be2c:	f04f 33ff 	mov.w	r3, #4294967295
 800be30:	e010      	b.n	800be54 <mpu_set_sample_rate+0xd0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800be32:	7bfb      	ldrb	r3, [r7, #15]
 800be34:	3301      	adds	r3, #1
 800be36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be3a:	fb92 f3f3 	sdiv	r3, r2, r3
 800be3e:	b29a      	uxth	r2, r3
 800be40:	4b06      	ldr	r3, [pc, #24]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800be42:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800be44:	4b05      	ldr	r3, [pc, #20]	@ (800be5c <mpu_set_sample_rate+0xd8>)
 800be46:	89db      	ldrh	r3, [r3, #14]
 800be48:	085b      	lsrs	r3, r3, #1
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff ff3f 	bl	800bcd0 <mpu_set_lpf>
        return 0;
 800be52:	2300      	movs	r3, #0
    }
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	2000001c 	.word	0x2000001c
 800be60:	200003d4 	.word	0x200003d4

0800be64 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800be72:	79fb      	ldrb	r3, [r7, #7]
 800be74:	f023 0301 	bic.w	r3, r3, #1
 800be78:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800be7a:	4b22      	ldr	r3, [pc, #136]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800be7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <mpu_configure_fifo+0x24>
        return 0;
 800be84:	2300      	movs	r3, #0
 800be86:	e038      	b.n	800befa <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800be88:	4b1e      	ldr	r3, [pc, #120]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800be8a:	7a9b      	ldrb	r3, [r3, #10]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <mpu_configure_fifo+0x32>
            return -1;
 800be90:	f04f 33ff 	mov.w	r3, #4294967295
 800be94:	e031      	b.n	800befa <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800be96:	4b1b      	ldr	r3, [pc, #108]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800be98:	7c1b      	ldrb	r3, [r3, #16]
 800be9a:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800be9c:	4b19      	ldr	r3, [pc, #100]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800be9e:	7a9a      	ldrb	r2, [r3, #10]
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	4013      	ands	r3, r2
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	4b17      	ldr	r3, [pc, #92]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800bea8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800beaa:	4b16      	ldr	r3, [pc, #88]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800beac:	7c1b      	ldrb	r3, [r3, #16]
 800beae:	79fa      	ldrb	r2, [r7, #7]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d003      	beq.n	800bebc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800beb4:	f04f 33ff 	mov.w	r3, #4294967295
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	e001      	b.n	800bec0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d103      	bne.n	800bece <mpu_configure_fifo+0x6a>
 800bec6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800bec8:	7d1b      	ldrb	r3, [r3, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800bece:	2001      	movs	r0, #1
 800bed0:	f7ff fa7e 	bl	800b3d0 <set_int_enable>
 800bed4:	e002      	b.n	800bedc <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800bed6:	2000      	movs	r0, #0
 800bed8:	f7ff fa7a 	bl	800b3d0 <set_int_enable>
        if (sensors) {
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00a      	beq.n	800bef8 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 800bee2:	f7ff fc79 	bl	800b7d8 <mpu_reset_fifo>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 800beec:	4a05      	ldr	r2, [pc, #20]	@ (800bf04 <mpu_configure_fifo+0xa0>)
 800beee:	7afb      	ldrb	r3, [r7, #11]
 800bef0:	7413      	strb	r3, [r2, #16]
                return -1;
 800bef2:	f04f 33ff 	mov.w	r3, #4294967295
 800bef6:	e000      	b.n	800befa <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	2000001c 	.word	0x2000001c

0800bf08 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af04      	add	r7, sp, #16
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	73fb      	strb	r3, [r7, #15]
 800bf20:	e007      	b.n	800bf32 <mpu_set_sensors+0x2a>
    else if (sensors)
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <mpu_set_sensors+0x26>
        data = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	73fb      	strb	r3, [r7, #15]
 800bf2c:	e001      	b.n	800bf32 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800bf2e:	2340      	movs	r3, #64	@ 0x40
 800bf30:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800bf32:	4b40      	ldr	r3, [pc, #256]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	b299      	uxth	r1, r3
 800bf3c:	4b3d      	ldr	r3, [pc, #244]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	7d5b      	ldrb	r3, [r3, #21]
 800bf42:	461a      	mov	r2, r3
 800bf44:	2364      	movs	r3, #100	@ 0x64
 800bf46:	9302      	str	r3, [sp, #8]
 800bf48:	2301      	movs	r3, #1
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	f107 030f 	add.w	r3, r7, #15
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	2301      	movs	r3, #1
 800bf54:	4838      	ldr	r0, [pc, #224]	@ (800c038 <mpu_set_sensors+0x130>)
 800bf56:	f7f7 ffc7 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 800bf60:	4b34      	ldr	r3, [pc, #208]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bf62:	2200      	movs	r2, #0
 800bf64:	729a      	strb	r2, [r3, #10]
        return -1;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	e05f      	b.n	800c02c <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	4b2f      	ldr	r3, [pc, #188]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bf76:	731a      	strb	r2, [r3, #12]

    data = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d104      	bne.n	800bf90 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
 800bf88:	f043 0304 	orr.w	r3, r3, #4
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d104      	bne.n	800bfa4 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	f043 0302 	orr.w	r3, r3, #2
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	f003 0310 	and.w	r3, r3, #16
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d104      	bne.n	800bfb8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	f043 0301 	orr.w	r3, r3, #1
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d104      	bne.n	800bfcc <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800bfcc:	4b19      	ldr	r3, [pc, #100]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	b299      	uxth	r1, r3
 800bfd6:	4b17      	ldr	r3, [pc, #92]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	7d9b      	ldrb	r3, [r3, #22]
 800bfdc:	461a      	mov	r2, r3
 800bfde:	2364      	movs	r3, #100	@ 0x64
 800bfe0:	9302      	str	r3, [sp, #8]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	f107 030f 	add.w	r3, r7, #15
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	2301      	movs	r3, #1
 800bfee:	4812      	ldr	r0, [pc, #72]	@ (800c038 <mpu_set_sensors+0x130>)
 800bff0:	f7f7 ff7a 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 800bffa:	4b0e      	ldr	r3, [pc, #56]	@ (800c034 <mpu_set_sensors+0x12c>)
 800bffc:	2200      	movs	r2, #0
 800bffe:	729a      	strb	r2, [r3, #10]
        return -1;
 800c000:	f04f 33ff 	mov.w	r3, #4294967295
 800c004:	e012      	b.n	800c02c <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d005      	beq.n	800c018 <mpu_set_sensors+0x110>
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	2b08      	cmp	r3, #8
 800c010:	d002      	beq.n	800c018 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800c012:	2000      	movs	r0, #0
 800c014:	f000 f9ac 	bl	800c370 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800c018:	4a06      	ldr	r2, [pc, #24]	@ (800c034 <mpu_set_sensors+0x12c>)
 800c01a:	79fb      	ldrb	r3, [r7, #7]
 800c01c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800c01e:	4b05      	ldr	r3, [pc, #20]	@ (800c034 <mpu_set_sensors+0x12c>)
 800c020:	2200      	movs	r2, #0
 800c022:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800c024:	2032      	movs	r0, #50	@ 0x32
 800c026:	f002 f9f9 	bl	800e41c <HAL_Delay>
    return 0;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	2000001c 	.word	0x2000001c
 800c038:	200003d4 	.word	0x200003d4

0800c03c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	@ 0x28
 800c040:	af04      	add	r7, sp, #16
 800c042:	4603      	mov	r3, r0
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800c04a:	4b48      	ldr	r3, [pc, #288]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c04c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <mpu_read_fifo_stream+0x1e>
        return -1;
 800c054:	f04f 33ff 	mov.w	r3, #4294967295
 800c058:	e083      	b.n	800c162 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 800c05a:	4b44      	ldr	r3, [pc, #272]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c05c:	7a9b      	ldrb	r3, [r3, #10]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <mpu_read_fifo_stream+0x2c>
        return -1;
 800c062:	f04f 33ff 	mov.w	r3, #4294967295
 800c066:	e07c      	b.n	800c162 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800c068:	4b40      	ldr	r3, [pc, #256]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	b299      	uxth	r1, r3
 800c072:	4b3e      	ldr	r3, [pc, #248]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	7b1b      	ldrb	r3, [r3, #12]
 800c078:	461a      	mov	r2, r3
 800c07a:	2364      	movs	r3, #100	@ 0x64
 800c07c:	9302      	str	r3, [sp, #8]
 800c07e:	2302      	movs	r3, #2
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	f107 0314 	add.w	r3, r7, #20
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2301      	movs	r3, #1
 800c08a:	4839      	ldr	r0, [pc, #228]	@ (800c170 <mpu_read_fifo_stream+0x134>)
 800c08c:	f7f8 f826 	bl	80040dc <HAL_I2C_Mem_Read>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <mpu_read_fifo_stream+0x60>
        return -1;
 800c096:	f04f 33ff 	mov.w	r3, #4294967295
 800c09a:	e062      	b.n	800c162 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800c09c:	7d3b      	ldrb	r3, [r7, #20]
 800c09e:	b21b      	sxth	r3, r3
 800c0a0:	021b      	lsls	r3, r3, #8
 800c0a2:	b21a      	sxth	r2, r3
 800c0a4:	7d7b      	ldrb	r3, [r7, #21]
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 800c0ae:	8afa      	ldrh	r2, [r7, #22]
 800c0b0:	89fb      	ldrh	r3, [r7, #14]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d205      	bcs.n	800c0c2 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	701a      	strb	r2, [r3, #0]
        return -1;
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c0:	e04f      	b.n	800c162 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	885b      	ldrh	r3, [r3, #2]
 800c0c8:	085b      	lsrs	r3, r3, #1
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	8afa      	ldrh	r2, [r7, #22]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d923      	bls.n	800c11a <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800c0d2:	4b26      	ldr	r3, [pc, #152]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	b299      	uxth	r1, r3
 800c0dc:	4b23      	ldr	r3, [pc, #140]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	7cdb      	ldrb	r3, [r3, #19]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	2364      	movs	r3, #100	@ 0x64
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	f107 0314 	add.w	r3, r7, #20
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	481e      	ldr	r0, [pc, #120]	@ (800c170 <mpu_read_fifo_stream+0x134>)
 800c0f6:	f7f7 fff1 	bl	80040dc <HAL_I2C_Mem_Read>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <mpu_read_fifo_stream+0xca>
            return -1;
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	e02d      	b.n	800c162 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800c106:	7d3b      	ldrb	r3, [r7, #20]
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d004      	beq.n	800c11a <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 800c110:	f7ff fb62 	bl	800b7d8 <mpu_reset_fifo>
            return -2;
 800c114:	f06f 0301 	mvn.w	r3, #1
 800c118:	e023      	b.n	800c162 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800c11a:	4b14      	ldr	r3, [pc, #80]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	b299      	uxth	r1, r3
 800c124:	4b11      	ldr	r3, [pc, #68]	@ (800c16c <mpu_read_fifo_stream+0x130>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	7b5b      	ldrb	r3, [r3, #13]
 800c12a:	461a      	mov	r2, r3
 800c12c:	2364      	movs	r3, #100	@ 0x64
 800c12e:	9302      	str	r3, [sp, #8]
 800c130:	89fb      	ldrh	r3, [r7, #14]
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	2301      	movs	r3, #1
 800c13a:	480d      	ldr	r0, [pc, #52]	@ (800c170 <mpu_read_fifo_stream+0x134>)
 800c13c:	f7f7 ffce 	bl	80040dc <HAL_I2C_Mem_Read>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <mpu_read_fifo_stream+0x110>
        return -1;
 800c146:	f04f 33ff 	mov.w	r3, #4294967295
 800c14a:	e00a      	b.n	800c162 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800c14c:	8afa      	ldrh	r2, [r7, #22]
 800c14e:	89fb      	ldrh	r3, [r7, #14]
 800c150:	fbb2 f3f3 	udiv	r3, r2, r3
 800c154:	b29b      	uxth	r3, r3
 800c156:	b2db      	uxtb	r3, r3
 800c158:	3b01      	subs	r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	701a      	strb	r2, [r3, #0]
    return 0;
 800c160:	2300      	movs	r3, #0
}
 800c162:	4618      	mov	r0, r3
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2000001c 	.word	0x2000001c
 800c170:	200003d4 	.word	0x200003d4

0800c174 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af04      	add	r7, sp, #16
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800c17e:	4b7a      	ldr	r3, [pc, #488]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c180:	7c9b      	ldrb	r3, [r3, #18]
 800c182:	79fa      	ldrb	r2, [r7, #7]
 800c184:	429a      	cmp	r2, r3
 800c186:	d101      	bne.n	800c18c <mpu_set_bypass+0x18>
        return 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	e0e8      	b.n	800c35e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d06b      	beq.n	800c26a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c192:	4b75      	ldr	r3, [pc, #468]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	b299      	uxth	r1, r3
 800c19c:	4b72      	ldr	r3, [pc, #456]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	791b      	ldrb	r3, [r3, #4]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	2364      	movs	r3, #100	@ 0x64
 800c1a6:	9302      	str	r3, [sp, #8]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	f107 030f 	add.w	r3, r7, #15
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	486d      	ldr	r0, [pc, #436]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c1b6:	f7f7 ff91 	bl	80040dc <HAL_I2C_Mem_Read>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <mpu_set_bypass+0x52>
            return -1;
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c4:	e0cb      	b.n	800c35e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	f023 0320 	bic.w	r3, r3, #32
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c1d0:	4b65      	ldr	r3, [pc, #404]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	b299      	uxth	r1, r3
 800c1da:	4b63      	ldr	r3, [pc, #396]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	791b      	ldrb	r3, [r3, #4]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2364      	movs	r3, #100	@ 0x64
 800c1e4:	9302      	str	r3, [sp, #8]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	f107 030f 	add.w	r3, r7, #15
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	485e      	ldr	r0, [pc, #376]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c1f4:	f7f7 fe78 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <mpu_set_bypass+0x90>
            return -1;
 800c1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c202:	e0ac      	b.n	800c35e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 800c204:	2003      	movs	r0, #3
 800c206:	f002 f909 	bl	800e41c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800c20a:	2302      	movs	r3, #2
 800c20c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800c20e:	4b56      	ldr	r3, [pc, #344]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c210:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c214:	2b00      	cmp	r3, #0
 800c216:	d004      	beq.n	800c222 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800c222:	4b51      	ldr	r3, [pc, #324]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c224:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800c232:	b2db      	uxtb	r3, r3
 800c234:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c236:	4b4c      	ldr	r3, [pc, #304]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	b299      	uxth	r1, r3
 800c240:	4b49      	ldr	r3, [pc, #292]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	7ddb      	ldrb	r3, [r3, #23]
 800c246:	461a      	mov	r2, r3
 800c248:	2364      	movs	r3, #100	@ 0x64
 800c24a:	9302      	str	r3, [sp, #8]
 800c24c:	2301      	movs	r3, #1
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	f107 030f 	add.w	r3, r7, #15
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	2301      	movs	r3, #1
 800c258:	4844      	ldr	r0, [pc, #272]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c25a:	f7f7 fe45 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d078      	beq.n	800c356 <mpu_set_bypass+0x1e2>
            return -1;
 800c264:	f04f 33ff 	mov.w	r3, #4294967295
 800c268:	e079      	b.n	800c35e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c26a:	4b3f      	ldr	r3, [pc, #252]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	b299      	uxth	r1, r3
 800c274:	4b3c      	ldr	r3, [pc, #240]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	791b      	ldrb	r3, [r3, #4]
 800c27a:	461a      	mov	r2, r3
 800c27c:	2364      	movs	r3, #100	@ 0x64
 800c27e:	9302      	str	r3, [sp, #8]
 800c280:	2301      	movs	r3, #1
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	f107 030f 	add.w	r3, r7, #15
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	2301      	movs	r3, #1
 800c28c:	4837      	ldr	r0, [pc, #220]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c28e:	f7f7 ff25 	bl	80040dc <HAL_I2C_Mem_Read>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <mpu_set_bypass+0x12a>
            return -1;
 800c298:	f04f 33ff 	mov.w	r3, #4294967295
 800c29c:	e05f      	b.n	800c35e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800c29e:	4b32      	ldr	r3, [pc, #200]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c2a0:	7a9b      	ldrb	r3, [r3, #10]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d005      	beq.n	800c2b6 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	f043 0320 	orr.w	r3, r3, #32
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	73fb      	strb	r3, [r7, #15]
 800c2b4:	e004      	b.n	800c2c0 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
 800c2b8:	f023 0320 	bic.w	r3, r3, #32
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800c2c0:	4b29      	ldr	r3, [pc, #164]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	b299      	uxth	r1, r3
 800c2ca:	4b27      	ldr	r3, [pc, #156]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	2364      	movs	r3, #100	@ 0x64
 800c2d4:	9302      	str	r3, [sp, #8]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f107 030f 	add.w	r3, r7, #15
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	4822      	ldr	r0, [pc, #136]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c2e4:	f7f7 fe00 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <mpu_set_bypass+0x180>
            return -1;
 800c2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f2:	e034      	b.n	800c35e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 800c2f4:	2003      	movs	r0, #3
 800c2f6:	f002 f891 	bl	800e41c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800c2fa:	4b1b      	ldr	r3, [pc, #108]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c2fc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	73fb      	strb	r3, [r7, #15]
 800c308:	e001      	b.n	800c30e <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800c30e:	4b16      	ldr	r3, [pc, #88]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c310:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c314:	2b00      	cmp	r3, #0
 800c316:	d004      	beq.n	800c322 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c322:	4b11      	ldr	r3, [pc, #68]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	b299      	uxth	r1, r3
 800c32c:	4b0e      	ldr	r3, [pc, #56]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	7ddb      	ldrb	r3, [r3, #23]
 800c332:	461a      	mov	r2, r3
 800c334:	2364      	movs	r3, #100	@ 0x64
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	2301      	movs	r3, #1
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	f107 030f 	add.w	r3, r7, #15
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	2301      	movs	r3, #1
 800c344:	4809      	ldr	r0, [pc, #36]	@ (800c36c <mpu_set_bypass+0x1f8>)
 800c346:	f7f7 fdcf 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <mpu_set_bypass+0x1e2>
            return -1;
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	e003      	b.n	800c35e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800c356:	4a04      	ldr	r2, [pc, #16]	@ (800c368 <mpu_set_bypass+0x1f4>)
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	7493      	strb	r3, [r2, #18]
    return 0;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	2000001c 	.word	0x2000001c
 800c36c:	200003d4 	.word	0x200003d4

0800c370 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af04      	add	r7, sp, #16
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800c37a:	4b23      	ldr	r3, [pc, #140]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c37c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c380:	79fa      	ldrb	r2, [r7, #7]
 800c382:	429a      	cmp	r2, r3
 800c384:	d101      	bne.n	800c38a <mpu_set_int_latched+0x1a>
        return 0;
 800c386:	2300      	movs	r3, #0
 800c388:	e039      	b.n	800c3fe <mpu_set_int_latched+0x8e>

    if (enable)
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800c390:	2330      	movs	r3, #48	@ 0x30
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	e001      	b.n	800c39a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800c39a:	4b1b      	ldr	r3, [pc, #108]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c39c:	7c9b      	ldrb	r3, [r3, #18]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d004      	beq.n	800c3ac <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	f043 0302 	orr.w	r3, r3, #2
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800c3ac:	4b16      	ldr	r3, [pc, #88]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c3ae:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800c3c0:	4b11      	ldr	r3, [pc, #68]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	b299      	uxth	r1, r3
 800c3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	7ddb      	ldrb	r3, [r3, #23]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	2364      	movs	r3, #100	@ 0x64
 800c3d4:	9302      	str	r3, [sp, #8]
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	f107 030f 	add.w	r3, r7, #15
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	480a      	ldr	r0, [pc, #40]	@ (800c40c <mpu_set_int_latched+0x9c>)
 800c3e4:	f7f7 fd80 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <mpu_set_int_latched+0x84>
        return -1;
 800c3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f2:	e004      	b.n	800c3fe <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 800c3f4:	4a04      	ldr	r2, [pc, #16]	@ (800c408 <mpu_set_int_latched+0x98>)
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	2000001c 	.word	0x2000001c
 800c40c:	200003d4 	.word	0x200003d4

0800c410 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af04      	add	r7, sp, #16
 800c416:	4603      	mov	r3, r0
 800c418:	603a      	str	r2, [r7, #0]
 800c41a:	80fb      	strh	r3, [r7, #6]
 800c41c:	460b      	mov	r3, r1
 800c41e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <mpu_write_mem+0x1c>
        return -1;
 800c426:	f04f 33ff 	mov.w	r3, #4294967295
 800c42a:	e04e      	b.n	800c4ca <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 800c42c:	4b29      	ldr	r3, [pc, #164]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c42e:	7a9b      	ldrb	r3, [r3, #10]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d102      	bne.n	800c43a <mpu_write_mem+0x2a>
        return -1;
 800c434:	f04f 33ff 	mov.w	r3, #4294967295
 800c438:	e047      	b.n	800c4ca <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	0a1b      	lsrs	r3, r3, #8
 800c43e:	b29b      	uxth	r3, r3
 800c440:	b2db      	uxtb	r3, r3
 800c442:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800c444:	88fb      	ldrh	r3, [r7, #6]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800c44a:	7b7b      	ldrb	r3, [r7, #13]
 800c44c:	461a      	mov	r2, r3
 800c44e:	88bb      	ldrh	r3, [r7, #4]
 800c450:	4413      	add	r3, r2
 800c452:	4a20      	ldr	r2, [pc, #128]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c454:	6852      	ldr	r2, [r2, #4]
 800c456:	8952      	ldrh	r2, [r2, #10]
 800c458:	4293      	cmp	r3, r2
 800c45a:	dd02      	ble.n	800c462 <mpu_write_mem+0x52>
        return -1;
 800c45c:	f04f 33ff 	mov.w	r3, #4294967295
 800c460:	e033      	b.n	800c4ca <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800c462:	4b1c      	ldr	r3, [pc, #112]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	b299      	uxth	r1, r3
 800c46c:	4b19      	ldr	r3, [pc, #100]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	7edb      	ldrb	r3, [r3, #27]
 800c472:	461a      	mov	r2, r3
 800c474:	2364      	movs	r3, #100	@ 0x64
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	2302      	movs	r3, #2
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	f107 030c 	add.w	r3, r7, #12
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	2301      	movs	r3, #1
 800c484:	4814      	ldr	r0, [pc, #80]	@ (800c4d8 <mpu_write_mem+0xc8>)
 800c486:	f7f7 fd2f 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <mpu_write_mem+0x86>
        return -1;
 800c490:	f04f 33ff 	mov.w	r3, #4294967295
 800c494:	e019      	b.n	800c4ca <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800c496:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	b299      	uxth	r1, r3
 800c4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c4d4 <mpu_write_mem+0xc4>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	7e1b      	ldrb	r3, [r3, #24]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	2364      	movs	r3, #100	@ 0x64
 800c4aa:	9302      	str	r3, [sp, #8]
 800c4ac:	88bb      	ldrh	r3, [r7, #4]
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	4808      	ldr	r0, [pc, #32]	@ (800c4d8 <mpu_write_mem+0xc8>)
 800c4b8:	f7f7 fd16 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <mpu_write_mem+0xb8>
        return -1;
 800c4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c6:	e000      	b.n	800c4ca <mpu_write_mem+0xba>
    return 0;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	2000001c 	.word	0x2000001c
 800c4d8:	200003d4 	.word	0x200003d4

0800c4dc <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	603a      	str	r2, [r7, #0]
 800c4e6:	80fb      	strh	r3, [r7, #6]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d102      	bne.n	800c4f8 <mpu_read_mem+0x1c>
        return -1;
 800c4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f6:	e04e      	b.n	800c596 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 800c4f8:	4b29      	ldr	r3, [pc, #164]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c4fa:	7a9b      	ldrb	r3, [r3, #10]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d102      	bne.n	800c506 <mpu_read_mem+0x2a>
        return -1;
 800c500:	f04f 33ff 	mov.w	r3, #4294967295
 800c504:	e047      	b.n	800c596 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	0a1b      	lsrs	r3, r3, #8
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800c510:	88fb      	ldrh	r3, [r7, #6]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800c516:	7b7b      	ldrb	r3, [r7, #13]
 800c518:	461a      	mov	r2, r3
 800c51a:	88bb      	ldrh	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	4a20      	ldr	r2, [pc, #128]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c520:	6852      	ldr	r2, [r2, #4]
 800c522:	8952      	ldrh	r2, [r2, #10]
 800c524:	4293      	cmp	r3, r2
 800c526:	dd02      	ble.n	800c52e <mpu_read_mem+0x52>
        return -1;
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
 800c52c:	e033      	b.n	800c596 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800c52e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	b299      	uxth	r1, r3
 800c538:	4b19      	ldr	r3, [pc, #100]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	7edb      	ldrb	r3, [r3, #27]
 800c53e:	461a      	mov	r2, r3
 800c540:	2364      	movs	r3, #100	@ 0x64
 800c542:	9302      	str	r3, [sp, #8]
 800c544:	2302      	movs	r3, #2
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	f107 030c 	add.w	r3, r7, #12
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	2301      	movs	r3, #1
 800c550:	4814      	ldr	r0, [pc, #80]	@ (800c5a4 <mpu_read_mem+0xc8>)
 800c552:	f7f7 fcc9 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <mpu_read_mem+0x86>
        return -1;
 800c55c:	f04f 33ff 	mov.w	r3, #4294967295
 800c560:	e019      	b.n	800c596 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800c562:	4b0f      	ldr	r3, [pc, #60]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	b299      	uxth	r1, r3
 800c56c:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a0 <mpu_read_mem+0xc4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	7e1b      	ldrb	r3, [r3, #24]
 800c572:	461a      	mov	r2, r3
 800c574:	2364      	movs	r3, #100	@ 0x64
 800c576:	9302      	str	r3, [sp, #8]
 800c578:	88bb      	ldrh	r3, [r7, #4]
 800c57a:	9301      	str	r3, [sp, #4]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	2301      	movs	r3, #1
 800c582:	4808      	ldr	r0, [pc, #32]	@ (800c5a4 <mpu_read_mem+0xc8>)
 800c584:	f7f7 fdaa 	bl	80040dc <HAL_I2C_Mem_Read>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d002      	beq.n	800c594 <mpu_read_mem+0xb8>
        return -1;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295
 800c592:	e000      	b.n	800c596 <mpu_read_mem+0xba>
    return 0;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	2000001c 	.word	0x2000001c
 800c5a4:	200003d4 	.word	0x200003d4

0800c5a8 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08e      	sub	sp, #56	@ 0x38
 800c5ac:	af04      	add	r7, sp, #16
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	81fb      	strh	r3, [r7, #14]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	81bb      	strh	r3, [r7, #12]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800c5c0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6b0 <mpu_load_firmware+0x108>)
 800c5c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800c5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ce:	e06b      	b.n	800c6a8 <mpu_load_firmware+0x100>

    if (!firmware)
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d102      	bne.n	800c5dc <mpu_load_firmware+0x34>
        return -1;
 800c5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5da:	e065      	b.n	800c6a8 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800c5dc:	2300      	movs	r3, #0
 800c5de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c5e0:	e034      	b.n	800c64c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800c5e2:	89fa      	ldrh	r2, [r7, #14]
 800c5e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	2b10      	cmp	r3, #16
 800c5ea:	bfa8      	it	ge
 800c5ec:	2310      	movge	r3, #16
 800c5ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800c5f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	441a      	add	r2, r3
 800c5f6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800c5f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff ff08 	bl	800c410 <mpu_write_mem>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <mpu_load_firmware+0x64>
            return -1;
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
 800c60a:	e04d      	b.n	800c6a8 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 800c60c:	f107 0214 	add.w	r2, r7, #20
 800c610:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800c612:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ff61 	bl	800c4dc <mpu_read_mem>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <mpu_load_firmware+0x7e>
            return -1;
 800c620:	f04f 33ff 	mov.w	r3, #4294967295
 800c624:	e040      	b.n	800c6a8 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 800c626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	4413      	add	r3, r2
 800c62c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c62e:	f107 0114 	add.w	r1, r7, #20
 800c632:	4618      	mov	r0, r3
 800c634:	f002 f908 	bl	800e848 <memcmp>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <mpu_load_firmware+0x9c>
            return -2;
 800c63e:	f06f 0301 	mvn.w	r3, #1
 800c642:	e031      	b.n	800c6a8 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800c644:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c648:	4413      	add	r3, r2
 800c64a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c64c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c64e:	89fb      	ldrh	r3, [r7, #14]
 800c650:	429a      	cmp	r2, r3
 800c652:	d3c6      	bcc.n	800c5e2 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800c654:	89bb      	ldrh	r3, [r7, #12]
 800c656:	0a1b      	lsrs	r3, r3, #8
 800c658:	b29b      	uxth	r3, r3
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800c65e:	89bb      	ldrh	r3, [r7, #12]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800c664:	4b12      	ldr	r3, [pc, #72]	@ (800c6b0 <mpu_load_firmware+0x108>)
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	b299      	uxth	r1, r3
 800c66e:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <mpu_load_firmware+0x108>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	7f5b      	ldrb	r3, [r3, #29]
 800c674:	461a      	mov	r2, r3
 800c676:	2364      	movs	r3, #100	@ 0x64
 800c678:	9302      	str	r3, [sp, #8]
 800c67a:	2302      	movs	r3, #2
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	f107 0310 	add.w	r3, r7, #16
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	2301      	movs	r3, #1
 800c686:	480b      	ldr	r0, [pc, #44]	@ (800c6b4 <mpu_load_firmware+0x10c>)
 800c688:	f7f7 fc2e 	bl	8003ee8 <HAL_I2C_Mem_Write>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <mpu_load_firmware+0xf0>
        return -1;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	e007      	b.n	800c6a8 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 800c698:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <mpu_load_firmware+0x108>)
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800c6a0:	4a03      	ldr	r2, [pc, #12]	@ (800c6b0 <mpu_load_firmware+0x108>)
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3728      	adds	r7, #40	@ 0x28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	2000001c 	.word	0x2000001c
 800c6b4:	200003d4 	.word	0x200003d4

0800c6b8 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af04      	add	r7, sp, #16
 800c6be:	4603      	mov	r3, r0
 800c6c0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800c6c2:	4b2e      	ldr	r3, [pc, #184]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c6c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c6c8:	79fa      	ldrb	r2, [r7, #7]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d101      	bne.n	800c6d2 <mpu_set_dmp_state+0x1a>
        return 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e050      	b.n	800c774 <mpu_set_dmp_state+0xbc>

    if (enable) {
 800c6d2:	79fb      	ldrb	r3, [r7, #7]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d02f      	beq.n	800c738 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 800c6d8:	4b28      	ldr	r3, [pc, #160]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c6da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d102      	bne.n	800c6e8 <mpu_set_dmp_state+0x30>
            return -1;
 800c6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e6:	e045      	b.n	800c774 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	f7fe fe71 	bl	800b3d0 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	f7ff fd40 	bl	800c174 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800c6f4:	4b21      	ldr	r3, [pc, #132]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c6f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fb43 	bl	800bd84 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800c702:	4b1e      	ldr	r3, [pc, #120]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	b299      	uxth	r1, r3
 800c70c:	2364      	movs	r3, #100	@ 0x64
 800c70e:	9302      	str	r3, [sp, #8]
 800c710:	2301      	movs	r3, #1
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f107 030f 	add.w	r3, r7, #15
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	2301      	movs	r3, #1
 800c71c:	2223      	movs	r2, #35	@ 0x23
 800c71e:	4818      	ldr	r0, [pc, #96]	@ (800c780 <mpu_set_dmp_state+0xc8>)
 800c720:	f7f7 fbe2 	bl	8003ee8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 800c724:	4b15      	ldr	r3, [pc, #84]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c726:	2201      	movs	r2, #1
 800c728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800c72c:	2001      	movs	r0, #1
 800c72e:	f7fe fe4f 	bl	800b3d0 <set_int_enable>
        mpu_reset_fifo();
 800c732:	f7ff f851 	bl	800b7d8 <mpu_reset_fifo>
 800c736:	e01c      	b.n	800c772 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800c738:	2000      	movs	r0, #0
 800c73a:	f7fe fe49 	bl	800b3d0 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800c73e:	4b0f      	ldr	r3, [pc, #60]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c740:	7c1b      	ldrb	r3, [r3, #16]
 800c742:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800c744:	4b0d      	ldr	r3, [pc, #52]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	b299      	uxth	r1, r3
 800c74e:	2364      	movs	r3, #100	@ 0x64
 800c750:	9302      	str	r3, [sp, #8]
 800c752:	2301      	movs	r3, #1
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	f107 030f 	add.w	r3, r7, #15
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	2301      	movs	r3, #1
 800c75e:	2223      	movs	r2, #35	@ 0x23
 800c760:	4807      	ldr	r0, [pc, #28]	@ (800c780 <mpu_set_dmp_state+0xc8>)
 800c762:	f7f7 fbc1 	bl	8003ee8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 800c766:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <mpu_set_dmp_state+0xc4>)
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800c76e:	f7ff f833 	bl	800b7d8 <mpu_reset_fifo>
    }
    return 0;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	2000001c 	.word	0x2000001c
 800c780:	200003d4 	.word	0x200003d4

0800c784 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800c788:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c78c:	23c8      	movs	r3, #200	@ 0xc8
 800c78e:	4904      	ldr	r1, [pc, #16]	@ (800c7a0 <dmp_load_motion_driver_firmware+0x1c>)
 800c790:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 800c794:	f7ff ff08 	bl	800c5a8 <mpu_load_firmware>
 800c798:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	080107a0 	.word	0x080107a0

0800c7a4 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800c7ae:	4a6e      	ldr	r2, [pc, #440]	@ (800c968 <dmp_set_orientation+0x1c4>)
 800c7b0:	f107 0314 	add.w	r3, r7, #20
 800c7b4:	6812      	ldr	r2, [r2, #0]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	8019      	strh	r1, [r3, #0]
 800c7ba:	3302      	adds	r3, #2
 800c7bc:	0c12      	lsrs	r2, r2, #16
 800c7be:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800c7c0:	4a6a      	ldr	r2, [pc, #424]	@ (800c96c <dmp_set_orientation+0x1c8>)
 800c7c2:	f107 0310 	add.w	r3, r7, #16
 800c7c6:	6812      	ldr	r2, [r2, #0]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	8019      	strh	r1, [r3, #0]
 800c7cc:	3302      	adds	r3, #2
 800c7ce:	0c12      	lsrs	r2, r2, #16
 800c7d0:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800c7d2:	4a67      	ldr	r2, [pc, #412]	@ (800c970 <dmp_set_orientation+0x1cc>)
 800c7d4:	f107 030c 	add.w	r3, r7, #12
 800c7d8:	6812      	ldr	r2, [r2, #0]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	8019      	strh	r1, [r3, #0]
 800c7de:	3302      	adds	r3, #2
 800c7e0:	0c12      	lsrs	r2, r2, #16
 800c7e2:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800c7e4:	4a63      	ldr	r2, [pc, #396]	@ (800c974 <dmp_set_orientation+0x1d0>)
 800c7e6:	f107 0308 	add.w	r3, r7, #8
 800c7ea:	6812      	ldr	r2, [r2, #0]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	8019      	strh	r1, [r3, #0]
 800c7f0:	3302      	adds	r3, #2
 800c7f2:	0c12      	lsrs	r2, r2, #16
 800c7f4:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800c7f6:	88fb      	ldrh	r3, [r7, #6]
 800c7f8:	f003 0303 	and.w	r3, r3, #3
 800c7fc:	3320      	adds	r3, #32
 800c7fe:	443b      	add	r3, r7
 800c800:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c804:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800c806:	88fb      	ldrh	r3, [r7, #6]
 800c808:	08db      	lsrs	r3, r3, #3
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	f003 0303 	and.w	r3, r3, #3
 800c810:	3320      	adds	r3, #32
 800c812:	443b      	add	r3, r7
 800c814:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c818:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800c81a:	88fb      	ldrh	r3, [r7, #6]
 800c81c:	099b      	lsrs	r3, r3, #6
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	3320      	adds	r3, #32
 800c826:	443b      	add	r3, r7
 800c828:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c82c:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800c82e:	88fb      	ldrh	r3, [r7, #6]
 800c830:	f003 0303 	and.w	r3, r3, #3
 800c834:	3320      	adds	r3, #32
 800c836:	443b      	add	r3, r7
 800c838:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800c83c:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800c83e:	88fb      	ldrh	r3, [r7, #6]
 800c840:	08db      	lsrs	r3, r3, #3
 800c842:	b29b      	uxth	r3, r3
 800c844:	f003 0303 	and.w	r3, r3, #3
 800c848:	3320      	adds	r3, #32
 800c84a:	443b      	add	r3, r7
 800c84c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800c850:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800c852:	88fb      	ldrh	r3, [r7, #6]
 800c854:	099b      	lsrs	r3, r3, #6
 800c856:	b29b      	uxth	r3, r3
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	3320      	adds	r3, #32
 800c85e:	443b      	add	r3, r7
 800c860:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800c864:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800c866:	f107 031c 	add.w	r3, r7, #28
 800c86a:	461a      	mov	r2, r3
 800c86c:	2103      	movs	r1, #3
 800c86e:	f240 4026 	movw	r0, #1062	@ 0x426
 800c872:	f7ff fdcd 	bl	800c410 <mpu_write_mem>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <dmp_set_orientation+0xde>
        return -1;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	e06e      	b.n	800c960 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800c882:	f107 0318 	add.w	r3, r7, #24
 800c886:	461a      	mov	r2, r3
 800c888:	2103      	movs	r1, #3
 800c88a:	f240 402a 	movw	r0, #1066	@ 0x42a
 800c88e:	f7ff fdbf 	bl	800c410 <mpu_write_mem>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <dmp_set_orientation+0xfa>
        return -1;
 800c898:	f04f 33ff 	mov.w	r3, #4294967295
 800c89c:	e060      	b.n	800c960 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800c89e:	f107 031c 	add.w	r3, r7, #28
 800c8a2:	f107 020c 	add.w	r2, r7, #12
 800c8a6:	6812      	ldr	r2, [r2, #0]
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	8019      	strh	r1, [r3, #0]
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	0c12      	lsrs	r2, r2, #16
 800c8b0:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800c8b2:	f107 0318 	add.w	r3, r7, #24
 800c8b6:	f107 0208 	add.w	r2, r7, #8
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	8019      	strh	r1, [r3, #0]
 800c8c0:	3302      	adds	r3, #2
 800c8c2:	0c12      	lsrs	r2, r2, #16
 800c8c4:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d009      	beq.n	800c8e4 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800c8d0:	7f3b      	ldrb	r3, [r7, #28]
 800c8d2:	f043 0301 	orr.w	r3, r3, #1
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800c8da:	7e3b      	ldrb	r3, [r7, #24]
 800c8dc:	f043 0301 	orr.w	r3, r3, #1
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800c8ee:	7f7b      	ldrb	r3, [r7, #29]
 800c8f0:	f043 0301 	orr.w	r3, r3, #1
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800c8f8:	7e7b      	ldrb	r3, [r7, #25]
 800c8fa:	f043 0301 	orr.w	r3, r3, #1
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800c902:	88fb      	ldrh	r3, [r7, #6]
 800c904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d009      	beq.n	800c920 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 800c90c:	7fbb      	ldrb	r3, [r7, #30]
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800c916:	7ebb      	ldrb	r3, [r7, #26]
 800c918:	f043 0301 	orr.w	r3, r3, #1
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800c920:	f107 031c 	add.w	r3, r7, #28
 800c924:	461a      	mov	r2, r3
 800c926:	2103      	movs	r1, #3
 800c928:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 800c92c:	f7ff fd70 	bl	800c410 <mpu_write_mem>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <dmp_set_orientation+0x198>
        return -1;
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	e011      	b.n	800c960 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800c93c:	f107 0318 	add.w	r3, r7, #24
 800c940:	461a      	mov	r2, r3
 800c942:	2103      	movs	r1, #3
 800c944:	f240 4031 	movw	r0, #1073	@ 0x431
 800c948:	f7ff fd62 	bl	800c410 <mpu_write_mem>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <dmp_set_orientation+0x1b4>
        return -1;
 800c952:	f04f 33ff 	mov.w	r3, #4294967295
 800c956:	e003      	b.n	800c960 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800c958:	4a07      	ldr	r2, [pc, #28]	@ (800c978 <dmp_set_orientation+0x1d4>)
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	8113      	strh	r3, [r2, #8]
    return 0;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	0800fd24 	.word	0x0800fd24
 800c96c:	0800fd28 	.word	0x0800fd28
 800c970:	0800fd2c 	.word	0x0800fd2c
 800c974:	0800fd30 	.word	0x0800fd30
 800c978:	20004a4c 	.word	0x20004a4c

0800c97c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800c986:	4a1f      	ldr	r2, [pc, #124]	@ (800ca04 <dmp_set_fifo_rate+0x88>)
 800c988:	f107 0310 	add.w	r3, r7, #16
 800c98c:	ca07      	ldmia	r2, {r0, r1, r2}
 800c98e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800c992:	88fb      	ldrh	r3, [r7, #6]
 800c994:	2bc8      	cmp	r3, #200	@ 0xc8
 800c996:	d902      	bls.n	800c99e <dmp_set_fifo_rate+0x22>
        return -1;
 800c998:	f04f 33ff 	mov.w	r3, #4294967295
 800c99c:	e02e      	b.n	800c9fc <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800c99e:	88fb      	ldrh	r3, [r7, #6]
 800c9a0:	22c8      	movs	r2, #200	@ 0xc8
 800c9a2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800c9ac:	8bfb      	ldrh	r3, [r7, #30]
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800c9b6:	8bfb      	ldrh	r3, [r7, #30]
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800c9bc:	f107 0308 	add.w	r3, r7, #8
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	2102      	movs	r1, #2
 800c9c4:	f240 2016 	movw	r0, #534	@ 0x216
 800c9c8:	f7ff fd22 	bl	800c410 <mpu_write_mem>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <dmp_set_fifo_rate+0x5c>
        return -1;
 800c9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d6:	e011      	b.n	800c9fc <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800c9d8:	f107 0310 	add.w	r3, r7, #16
 800c9dc:	461a      	mov	r2, r3
 800c9de:	210c      	movs	r1, #12
 800c9e0:	f640 20c1 	movw	r0, #2753	@ 0xac1
 800c9e4:	f7ff fd14 	bl	800c410 <mpu_write_mem>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d002      	beq.n	800c9f4 <dmp_set_fifo_rate+0x78>
        return -1;
 800c9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f2:	e003      	b.n	800c9fc <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800c9f4:	4a04      	ldr	r2, [pc, #16]	@ (800ca08 <dmp_set_fifo_rate+0x8c>)
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	8193      	strh	r3, [r2, #12]
    return 0;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	0800fd34 	.word	0x0800fd34
 800ca08:	20004a4c 	.word	0x20004a4c

0800ca0c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	460a      	mov	r2, r1
 800ca16:	71fb      	strb	r3, [r7, #7]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
 800ca1e:	f003 0307 	and.w	r3, r3, #7
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <dmp_set_tap_thresh+0x22>
 800ca26:	88bb      	ldrh	r3, [r7, #4]
 800ca28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ca2c:	d902      	bls.n	800ca34 <dmp_set_tap_thresh+0x28>
        return -1;
 800ca2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca32:	e10b      	b.n	800cc4c <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800ca34:	88bb      	ldrh	r3, [r7, #4]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca3e:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800cc54 <dmp_set_tap_thresh+0x248>
 800ca42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca46:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800ca4a:	f107 030b 	add.w	r3, r7, #11
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff f892 	bl	800bb78 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800ca54:	7afb      	ldrb	r3, [r7, #11]
 800ca56:	3b02      	subs	r3, #2
 800ca58:	2b0e      	cmp	r3, #14
 800ca5a:	d87d      	bhi.n	800cb58 <dmp_set_tap_thresh+0x14c>
 800ca5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca64 <dmp_set_tap_thresh+0x58>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800caa1 	.word	0x0800caa1
 800ca68:	0800cb59 	.word	0x0800cb59
 800ca6c:	0800cacf 	.word	0x0800cacf
 800ca70:	0800cb59 	.word	0x0800cb59
 800ca74:	0800cb59 	.word	0x0800cb59
 800ca78:	0800cb59 	.word	0x0800cb59
 800ca7c:	0800cafd 	.word	0x0800cafd
 800ca80:	0800cb59 	.word	0x0800cb59
 800ca84:	0800cb59 	.word	0x0800cb59
 800ca88:	0800cb59 	.word	0x0800cb59
 800ca8c:	0800cb59 	.word	0x0800cb59
 800ca90:	0800cb59 	.word	0x0800cb59
 800ca94:	0800cb59 	.word	0x0800cb59
 800ca98:	0800cb59 	.word	0x0800cb59
 800ca9c:	0800cb2b 	.word	0x0800cb2b
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800caa0:	edd7 7a04 	vldr	s15, [r7, #16]
 800caa4:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800cc58 <dmp_set_tap_thresh+0x24c>
 800caa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800caac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cab0:	ee17 3a90 	vmov	r3, s15
 800cab4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800cab6:	edd7 7a04 	vldr	s15, [r7, #16]
 800caba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800cc5c <dmp_set_tap_thresh+0x250>
 800cabe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cac6:	ee17 3a90 	vmov	r3, s15
 800caca:	82bb      	strh	r3, [r7, #20]
        break;
 800cacc:	e047      	b.n	800cb5e <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800cace:	edd7 7a04 	vldr	s15, [r7, #16]
 800cad2:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800cc60 <dmp_set_tap_thresh+0x254>
 800cad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cade:	ee17 3a90 	vmov	r3, s15
 800cae2:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800cae4:	edd7 7a04 	vldr	s15, [r7, #16]
 800cae8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800cc64 <dmp_set_tap_thresh+0x258>
 800caec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800caf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caf4:	ee17 3a90 	vmov	r3, s15
 800caf8:	82bb      	strh	r3, [r7, #20]
        break;
 800cafa:	e030      	b.n	800cb5e <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800cafc:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb00:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800cc68 <dmp_set_tap_thresh+0x25c>
 800cb04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0c:	ee17 3a90 	vmov	r3, s15
 800cb10:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800cb12:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb16:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800cc6c <dmp_set_tap_thresh+0x260>
 800cb1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb22:	ee17 3a90 	vmov	r3, s15
 800cb26:	82bb      	strh	r3, [r7, #20]
        break;
 800cb28:	e019      	b.n	800cb5e <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800cb2a:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb2e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800cc70 <dmp_set_tap_thresh+0x264>
 800cb32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3a:	ee17 3a90 	vmov	r3, s15
 800cb3e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800cb40:	edd7 7a04 	vldr	s15, [r7, #16]
 800cb44:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800cc74 <dmp_set_tap_thresh+0x268>
 800cb48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb50:	ee17 3a90 	vmov	r3, s15
 800cb54:	82bb      	strh	r3, [r7, #20]
        break;
 800cb56:	e002      	b.n	800cb5e <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800cb58:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5c:	e076      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800cb5e:	8afb      	ldrh	r3, [r7, #22]
 800cb60:	0a1b      	lsrs	r3, r3, #8
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800cb68:	8afb      	ldrh	r3, [r7, #22]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800cb6e:	8abb      	ldrh	r3, [r7, #20]
 800cb70:	0a1b      	lsrs	r3, r3, #8
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800cb78:	8abb      	ldrh	r3, [r7, #20]
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01c      	beq.n	800cbc2 <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800cb88:	f107 030c 	add.w	r3, r7, #12
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2102      	movs	r1, #2
 800cb90:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 800cb94:	f7ff fc3c 	bl	800c410 <mpu_write_mem>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <dmp_set_tap_thresh+0x198>
            return -1;
 800cb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cba2:	e053      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	3302      	adds	r3, #2
 800cbaa:	461a      	mov	r2, r3
 800cbac:	2102      	movs	r1, #2
 800cbae:	f44f 7092 	mov.w	r0, #292	@ 0x124
 800cbb2:	f7ff fc2d 	bl	800c410 <mpu_write_mem>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <dmp_set_tap_thresh+0x1b6>
            return -1;
 800cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc0:	e044      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01c      	beq.n	800cc06 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	2102      	movs	r1, #2
 800cbd4:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 800cbd8:	f7ff fc1a 	bl	800c410 <mpu_write_mem>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800cbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe6:	e031      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800cbe8:	f107 030c 	add.w	r3, r7, #12
 800cbec:	3302      	adds	r3, #2
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2102      	movs	r1, #2
 800cbf2:	f44f 7094 	mov.w	r0, #296	@ 0x128
 800cbf6:	f7ff fc0b 	bl	800c410 <mpu_write_mem>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d002      	beq.n	800cc06 <dmp_set_tap_thresh+0x1fa>
            return -1;
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	e022      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01c      	beq.n	800cc4a <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800cc10:	f107 030c 	add.w	r3, r7, #12
 800cc14:	461a      	mov	r2, r3
 800cc16:	2102      	movs	r1, #2
 800cc18:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 800cc1c:	f7ff fbf8 	bl	800c410 <mpu_write_mem>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <dmp_set_tap_thresh+0x220>
            return -1;
 800cc26:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2a:	e00f      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	3302      	adds	r3, #2
 800cc32:	461a      	mov	r2, r3
 800cc34:	2102      	movs	r1, #2
 800cc36:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cc3a:	f7ff fbe9 	bl	800c410 <mpu_write_mem>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <dmp_set_tap_thresh+0x23e>
            return -1;
 800cc44:	f04f 33ff 	mov.w	r3, #4294967295
 800cc48:	e000      	b.n	800cc4c <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	43480000 	.word	0x43480000
 800cc58:	46800000 	.word	0x46800000
 800cc5c:	46400000 	.word	0x46400000
 800cc60:	46000000 	.word	0x46000000
 800cc64:	45c00000 	.word	0x45c00000
 800cc68:	45800000 	.word	0x45800000
 800cc6c:	45400000 	.word	0x45400000
 800cc70:	45000000 	.word	0x45000000
 800cc74:	44c00000 	.word	0x44c00000

0800cc78 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d004      	beq.n	800cc9a <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
 800cc92:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	f003 0302 	and.w	r3, r3, #2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	f043 030c 	orr.w	r3, r3, #12
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
 800ccba:	f043 0303 	orr.w	r3, r3, #3
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800ccc2:	f107 030f 	add.w	r3, r7, #15
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2101      	movs	r1, #1
 800ccca:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 800ccce:	f7ff fb9f 	bl	800c410 <mpu_write_mem>
 800ccd2:	4603      	mov	r3, r0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <dmp_set_tap_count+0x16>
        min_taps = 1;
 800ccec:	2301      	movs	r3, #1
 800ccee:	71fb      	strb	r3, [r7, #7]
 800ccf0:	e004      	b.n	800ccfc <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	2b04      	cmp	r3, #4
 800ccf6:	d901      	bls.n	800ccfc <dmp_set_tap_count+0x20>
        min_taps = 4;
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800cd04:	f107 030f 	add.w	r3, r7, #15
 800cd08:	461a      	mov	r2, r3
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	f240 104f 	movw	r0, #335	@ 0x14f
 800cd10:	f7ff fb7e 	bl	800c410 <mpu_write_mem>
 800cd14:	4603      	mov	r3, r0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
	...

0800cd20 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800cd2a:	88fb      	ldrh	r3, [r7, #6]
 800cd2c:	4a0c      	ldr	r2, [pc, #48]	@ (800cd60 <dmp_set_tap_time+0x40>)
 800cd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd32:	089b      	lsrs	r3, r3, #2
 800cd34:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800cd36:	89fb      	ldrh	r3, [r7, #14]
 800cd38:	0a1b      	lsrs	r3, r3, #8
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800cd40:	89fb      	ldrh	r3, [r7, #14]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800cd46:	f107 030c 	add.w	r3, r7, #12
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	2102      	movs	r1, #2
 800cd4e:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 800cd52:	f7ff fb5d 	bl	800c410 <mpu_write_mem>
 800cd56:	4603      	mov	r3, r0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	cccccccd 	.word	0xcccccccd

0800cd64 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800cd6e:	88fb      	ldrh	r3, [r7, #6]
 800cd70:	4a0c      	ldr	r2, [pc, #48]	@ (800cda4 <dmp_set_tap_time_multi+0x40>)
 800cd72:	fba2 2303 	umull	r2, r3, r2, r3
 800cd76:	089b      	lsrs	r3, r3, #2
 800cd78:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800cd7a:	89fb      	ldrh	r3, [r7, #14]
 800cd7c:	0a1b      	lsrs	r3, r3, #8
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800cd84:	89fb      	ldrh	r3, [r7, #14]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800cd8a:	f107 030c 	add.w	r3, r7, #12
 800cd8e:	461a      	mov	r2, r3
 800cd90:	2102      	movs	r1, #2
 800cd92:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 800cd96:	f7ff fb3b 	bl	800c410 <mpu_write_mem>
 800cd9a:	4603      	mov	r3, r0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	cccccccd 	.word	0xcccccccd

0800cda8 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4a13      	ldr	r2, [pc, #76]	@ (800ce04 <dmp_set_shake_reject_thresh+0x5c>)
 800cdb8:	fb82 1203 	smull	r1, r2, r2, r3
 800cdbc:	1192      	asrs	r2, r2, #6
 800cdbe:	17db      	asrs	r3, r3, #31
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	887a      	ldrh	r2, [r7, #2]
 800cdc4:	fb02 f303 	mul.w	r3, r2, r3
 800cdc8:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	161b      	asrs	r3, r3, #24
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	141b      	asrs	r3, r3, #16
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	121b      	asrs	r3, r3, #8
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800cde8:	f107 0308 	add.w	r3, r7, #8
 800cdec:	461a      	mov	r2, r3
 800cdee:	2104      	movs	r1, #4
 800cdf0:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 800cdf4:	f7ff fb0c 	bl	800c410 <mpu_write_mem>
 800cdf8:	4603      	mov	r3, r0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	10624dd3 	.word	0x10624dd3

0800ce08 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800ce12:	88fb      	ldrh	r3, [r7, #6]
 800ce14:	4a0c      	ldr	r2, [pc, #48]	@ (800ce48 <dmp_set_shake_reject_time+0x40>)
 800ce16:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1a:	089b      	lsrs	r3, r3, #2
 800ce1c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	0a1b      	lsrs	r3, r3, #8
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800ce2e:	f107 030c 	add.w	r3, r7, #12
 800ce32:	461a      	mov	r2, r3
 800ce34:	2102      	movs	r1, #2
 800ce36:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 800ce3a:	f7ff fae9 	bl	800c410 <mpu_write_mem>
 800ce3e:	4603      	mov	r3, r0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	cccccccd 	.word	0xcccccccd

0800ce4c <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	4a0c      	ldr	r2, [pc, #48]	@ (800ce8c <dmp_set_shake_reject_timeout+0x40>)
 800ce5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5e:	089b      	lsrs	r3, r3, #2
 800ce60:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800ce62:	88fb      	ldrh	r3, [r7, #6]
 800ce64:	0a1b      	lsrs	r3, r3, #8
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ce6c:	88fb      	ldrh	r3, [r7, #6]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800ce72:	f107 030c 	add.w	r3, r7, #12
 800ce76:	461a      	mov	r2, r3
 800ce78:	2102      	movs	r1, #2
 800ce7a:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 800ce7e:	f7ff fac7 	bl	800c410 <mpu_write_mem>
 800ce82:	4603      	mov	r3, r0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	cccccccd 	.word	0xcccccccd

0800ce90 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800ce9e:	23ca      	movs	r3, #202	@ 0xca
 800cea0:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800cea2:	23e3      	movs	r3, #227	@ 0xe3
 800cea4:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800cea6:	2309      	movs	r3, #9
 800cea8:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800ceaa:	f107 030c 	add.w	r3, r7, #12
 800ceae:	461a      	mov	r2, r3
 800ceb0:	2104      	movs	r1, #4
 800ceb2:	2068      	movs	r0, #104	@ 0x68
 800ceb4:	f7ff faac 	bl	800c410 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800ceb8:	23a3      	movs	r3, #163	@ 0xa3
 800ceba:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800cebc:	88fb      	ldrh	r3, [r7, #6]
 800cebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800cec6:	23c0      	movs	r3, #192	@ 0xc0
 800cec8:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800ceca:	23c8      	movs	r3, #200	@ 0xc8
 800cecc:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800cece:	23c2      	movs	r3, #194	@ 0xc2
 800ced0:	73fb      	strb	r3, [r7, #15]
 800ced2:	e005      	b.n	800cee0 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800ced4:	23a3      	movs	r3, #163	@ 0xa3
 800ced6:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800ced8:	23a3      	movs	r3, #163	@ 0xa3
 800ceda:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800cedc:	23a3      	movs	r3, #163	@ 0xa3
 800cede:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d006      	beq.n	800cef8 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800ceea:	23c4      	movs	r3, #196	@ 0xc4
 800ceec:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800ceee:	23cc      	movs	r3, #204	@ 0xcc
 800cef0:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800cef2:	23c6      	movs	r3, #198	@ 0xc6
 800cef4:	74bb      	strb	r3, [r7, #18]
 800cef6:	e005      	b.n	800cf04 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800cef8:	23a3      	movs	r3, #163	@ 0xa3
 800cefa:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800cefc:	23a3      	movs	r3, #163	@ 0xa3
 800cefe:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800cf00:	23a3      	movs	r3, #163	@ 0xa3
 800cf02:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800cf04:	23a3      	movs	r3, #163	@ 0xa3
 800cf06:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800cf08:	23a3      	movs	r3, #163	@ 0xa3
 800cf0a:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800cf0c:	23a3      	movs	r3, #163	@ 0xa3
 800cf0e:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800cf10:	f107 030c 	add.w	r3, r7, #12
 800cf14:	461a      	mov	r2, r3
 800cf16:	210a      	movs	r1, #10
 800cf18:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 800cf1c:	f7ff fa78 	bl	800c410 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800cf20:	88fb      	ldrh	r3, [r7, #6]
 800cf22:	f003 0303 	and.w	r3, r3, #3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800cf2a:	2320      	movs	r3, #32
 800cf2c:	733b      	strb	r3, [r7, #12]
 800cf2e:	e001      	b.n	800cf34 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800cf30:	23d8      	movs	r3, #216	@ 0xd8
 800cf32:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800cf34:	f107 030c 	add.w	r3, r7, #12
 800cf38:	461a      	mov	r2, r3
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800cf40:	f7ff fa66 	bl	800c410 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800cf44:	88fb      	ldrh	r3, [r7, #6]
 800cf46:	f003 0320 	and.w	r3, r3, #32
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800cf4e:	2001      	movs	r0, #1
 800cf50:	f000 f8c6 	bl	800d0e0 <dmp_enable_gyro_cal>
 800cf54:	e002      	b.n	800cf5c <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800cf56:	2000      	movs	r0, #0
 800cf58:	f000 f8c2 	bl	800d0e0 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800cf5c:	88fb      	ldrh	r3, [r7, #6]
 800cf5e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d01d      	beq.n	800cfa2 <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800cf66:	88fb      	ldrh	r3, [r7, #6]
 800cf68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d008      	beq.n	800cf82 <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800cf70:	23b2      	movs	r3, #178	@ 0xb2
 800cf72:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800cf74:	238b      	movs	r3, #139	@ 0x8b
 800cf76:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800cf78:	23b6      	movs	r3, #182	@ 0xb6
 800cf7a:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800cf7c:	239b      	movs	r3, #155	@ 0x9b
 800cf7e:	73fb      	strb	r3, [r7, #15]
 800cf80:	e007      	b.n	800cf92 <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800cf82:	23b0      	movs	r3, #176	@ 0xb0
 800cf84:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800cf86:	2380      	movs	r3, #128	@ 0x80
 800cf88:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800cf8a:	23b4      	movs	r3, #180	@ 0xb4
 800cf8c:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800cf8e:	2390      	movs	r3, #144	@ 0x90
 800cf90:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	461a      	mov	r2, r3
 800cf98:	2104      	movs	r1, #4
 800cf9a:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800cf9e:	f7ff fa37 	bl	800c410 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d025      	beq.n	800cff8 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800cfac:	23f8      	movs	r3, #248	@ 0xf8
 800cfae:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800cfb0:	f107 030c 	add.w	r3, r7, #12
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 800cfbc:	f7ff fa28 	bl	800c410 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800cfc0:	21fa      	movs	r1, #250	@ 0xfa
 800cfc2:	2007      	movs	r0, #7
 800cfc4:	f7ff fd22 	bl	800ca0c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800cfc8:	2007      	movs	r0, #7
 800cfca:	f7ff fe55 	bl	800cc78 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800cfce:	2001      	movs	r0, #1
 800cfd0:	f7ff fe84 	bl	800ccdc <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800cfd4:	2064      	movs	r0, #100	@ 0x64
 800cfd6:	f7ff fea3 	bl	800cd20 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800cfda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800cfde:	f7ff fec1 	bl	800cd64 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800cfe2:	21c8      	movs	r1, #200	@ 0xc8
 800cfe4:	483c      	ldr	r0, [pc, #240]	@ (800d0d8 <dmp_enable_feature+0x248>)
 800cfe6:	f7ff fedf 	bl	800cda8 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800cfea:	2028      	movs	r0, #40	@ 0x28
 800cfec:	f7ff ff0c 	bl	800ce08 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800cff0:	200a      	movs	r0, #10
 800cff2:	f7ff ff2b 	bl	800ce4c <dmp_set_shake_reject_timeout>
 800cff6:	e009      	b.n	800d00c <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800cff8:	23d8      	movs	r3, #216	@ 0xd8
 800cffa:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800cffc:	f107 030c 	add.w	r3, r7, #12
 800d000:	461a      	mov	r2, r3
 800d002:	2101      	movs	r1, #1
 800d004:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 800d008:	f7ff fa02 	bl	800c410 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800d00c:	88fb      	ldrh	r3, [r7, #6]
 800d00e:	f003 0302 	and.w	r3, r3, #2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800d016:	23d9      	movs	r3, #217	@ 0xd9
 800d018:	733b      	strb	r3, [r7, #12]
 800d01a:	e001      	b.n	800d020 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800d01c:	23d8      	movs	r3, #216	@ 0xd8
 800d01e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800d020:	f107 030c 	add.w	r3, r7, #12
 800d024:	461a      	mov	r2, r3
 800d026:	2101      	movs	r1, #1
 800d028:	f240 703d 	movw	r0, #1853	@ 0x73d
 800d02c:	f7ff f9f0 	bl	800c410 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800d030:	88fb      	ldrh	r3, [r7, #6]
 800d032:	f003 0304 	and.w	r3, r3, #4
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800d03a:	2001      	movs	r0, #1
 800d03c:	f000 f880 	bl	800d140 <dmp_enable_lp_quat>
 800d040:	e002      	b.n	800d048 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800d042:	2000      	movs	r0, #0
 800d044:	f000 f87c 	bl	800d140 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800d048:	88fb      	ldrh	r3, [r7, #6]
 800d04a:	f003 0310 	and.w	r3, r3, #16
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800d052:	2001      	movs	r0, #1
 800d054:	f000 f89b 	bl	800d18e <dmp_enable_6x_lp_quat>
 800d058:	e002      	b.n	800d060 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800d05a:	2000      	movs	r0, #0
 800d05c:	f000 f897 	bl	800d18e <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800d060:	88fb      	ldrh	r3, [r7, #6]
 800d062:	f043 0308 	orr.w	r3, r3, #8
 800d066:	b29a      	uxth	r2, r3
 800d068:	4b1c      	ldr	r3, [pc, #112]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d06a:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800d06c:	f7fe fbb4 	bl	800b7d8 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800d070:	4b1a      	ldr	r3, [pc, #104]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d072:	2200      	movs	r2, #0
 800d074:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d005      	beq.n	800d08c <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800d080:	4b16      	ldr	r3, [pc, #88]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d082:	7b9b      	ldrb	r3, [r3, #14]
 800d084:	3306      	adds	r3, #6
 800d086:	b2da      	uxtb	r2, r3
 800d088:	4b14      	ldr	r3, [pc, #80]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d08a:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800d08c:	88fb      	ldrh	r3, [r7, #6]
 800d08e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800d092:	2b00      	cmp	r3, #0
 800d094:	d005      	beq.n	800d0a2 <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800d096:	4b11      	ldr	r3, [pc, #68]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d098:	7b9b      	ldrb	r3, [r3, #14]
 800d09a:	3306      	adds	r3, #6
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	4b0f      	ldr	r3, [pc, #60]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d0a0:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	f003 0314 	and.w	r3, r3, #20
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d0ae:	7b9b      	ldrb	r3, [r3, #14]
 800d0b0:	3310      	adds	r3, #16
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	4b09      	ldr	r3, [pc, #36]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d0b6:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800d0b8:	88fb      	ldrh	r3, [r7, #6]
 800d0ba:	f003 0303 	and.w	r3, r3, #3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800d0c2:	4b06      	ldr	r3, [pc, #24]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d0c4:	7b9b      	ldrb	r3, [r3, #14]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	4b04      	ldr	r3, [pc, #16]	@ (800d0dc <dmp_enable_feature+0x24c>)
 800d0cc:	739a      	strb	r2, [r3, #14]

    return 0;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	02cae309 	.word	0x02cae309
 800d0dc:	20004a4c 	.word	0x20004a4c

0800d0e0 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b088      	sub	sp, #32
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00f      	beq.n	800d110 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800d0f0:	4a11      	ldr	r2, [pc, #68]	@ (800d138 <dmp_enable_gyro_cal+0x58>)
 800d0f2:	f107 0314 	add.w	r3, r7, #20
 800d0f6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0f8:	c303      	stmia	r3!, {r0, r1}
 800d0fa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800d0fc:	f107 0314 	add.w	r3, r7, #20
 800d100:	461a      	mov	r2, r3
 800d102:	2109      	movs	r1, #9
 800d104:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 800d108:	f7ff f982 	bl	800c410 <mpu_write_mem>
 800d10c:	4603      	mov	r3, r0
 800d10e:	e00e      	b.n	800d12e <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800d110:	4a0a      	ldr	r2, [pc, #40]	@ (800d13c <dmp_enable_gyro_cal+0x5c>)
 800d112:	f107 0308 	add.w	r3, r7, #8
 800d116:	ca07      	ldmia	r2, {r0, r1, r2}
 800d118:	c303      	stmia	r3!, {r0, r1}
 800d11a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800d11c:	f107 0308 	add.w	r3, r7, #8
 800d120:	461a      	mov	r2, r3
 800d122:	2109      	movs	r1, #9
 800d124:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 800d128:	f7ff f972 	bl	800c410 <mpu_write_mem>
 800d12c:	4603      	mov	r3, r0
    }
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3720      	adds	r7, #32
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	0800fd40 	.word	0x0800fd40
 800d13c:	0800fd4c 	.word	0x0800fd4c

0800d140 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d008      	beq.n	800d162 <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800d150:	23c0      	movs	r3, #192	@ 0xc0
 800d152:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800d154:	23c2      	movs	r3, #194	@ 0xc2
 800d156:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800d158:	23c4      	movs	r3, #196	@ 0xc4
 800d15a:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800d15c:	23c6      	movs	r3, #198	@ 0xc6
 800d15e:	73fb      	strb	r3, [r7, #15]
 800d160:	e006      	b.n	800d170 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	2204      	movs	r2, #4
 800d168:	218b      	movs	r1, #139	@ 0x8b
 800d16a:	4618      	mov	r0, r3
 800d16c:	f001 fb7c 	bl	800e868 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800d170:	f107 030c 	add.w	r3, r7, #12
 800d174:	461a      	mov	r2, r3
 800d176:	2104      	movs	r1, #4
 800d178:	f640 2098 	movw	r0, #2712	@ 0xa98
 800d17c:	f7ff f948 	bl	800c410 <mpu_write_mem>

    return mpu_reset_fifo();
 800d180:	f7fe fb2a 	bl	800b7d8 <mpu_reset_fifo>
 800d184:	4603      	mov	r3, r0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	4603      	mov	r3, r0
 800d196:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800d198:	79fb      	ldrb	r3, [r7, #7]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d008      	beq.n	800d1b0 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800d19e:	2320      	movs	r3, #32
 800d1a0:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800d1a2:	2328      	movs	r3, #40	@ 0x28
 800d1a4:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800d1a6:	2330      	movs	r3, #48	@ 0x30
 800d1a8:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800d1aa:	2338      	movs	r3, #56	@ 0x38
 800d1ac:	73fb      	strb	r3, [r7, #15]
 800d1ae:	e006      	b.n	800d1be <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800d1b0:	f107 030c 	add.w	r3, r7, #12
 800d1b4:	2204      	movs	r2, #4
 800d1b6:	21a3      	movs	r1, #163	@ 0xa3
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 fb55 	bl	800e868 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800d1be:	f107 030c 	add.w	r3, r7, #12
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	2104      	movs	r1, #4
 800d1c6:	f640 209e 	movw	r0, #2718	@ 0xa9e
 800d1ca:	f7ff f921 	bl	800c410 <mpu_write_mem>

    return mpu_reset_fifo();
 800d1ce:	f7fe fb03 	bl	800b7d8 <mpu_reset_fifo>
 800d1d2:	4603      	mov	r3, r0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3303      	adds	r3, #3
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800d1ee:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3303      	adds	r3, #3
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1fa:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3301      	adds	r3, #1
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	2b00      	cmp	r3, #0
 800d208:	d012      	beq.n	800d230 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	08db      	lsrs	r3, r3, #3
 800d20e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	b2db      	uxtb	r3, r3
 800d218:	3301      	adds	r3, #1
 800d21a:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800d21c:	4b10      	ldr	r3, [pc, #64]	@ (800d260 <decode_gesture+0x84>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d005      	beq.n	800d230 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800d224:	4b0e      	ldr	r3, [pc, #56]	@ (800d260 <decode_gesture+0x84>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	7b39      	ldrb	r1, [r7, #12]
 800d22a:	7b7a      	ldrb	r2, [r7, #13]
 800d22c:	4610      	mov	r0, r2
 800d22e:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3301      	adds	r3, #1
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f003 0308 	and.w	r3, r3, #8
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00a      	beq.n	800d254 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800d23e:	4b08      	ldr	r3, [pc, #32]	@ (800d260 <decode_gesture+0x84>)
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d006      	beq.n	800d254 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800d246:	4b06      	ldr	r3, [pc, #24]	@ (800d260 <decode_gesture+0x84>)
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	7bfa      	ldrb	r2, [r7, #15]
 800d24c:	0992      	lsrs	r2, r2, #6
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	4610      	mov	r0, r2
 800d252:	4798      	blx	r3
    }

    return 0;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3710      	adds	r7, #16
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20004a4c 	.word	0x20004a4c

0800d264 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b092      	sub	sp, #72	@ 0x48
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800d278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d27a:	2200      	movs	r2, #0
 800d27c:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800d27e:	4bb2      	ldr	r3, [pc, #712]	@ (800d548 <dmp_read_fifo+0x2e4>)
 800d280:	7b9b      	ldrb	r3, [r3, #14]
 800d282:	4618      	mov	r0, r3
 800d284:	f107 0320 	add.w	r3, r7, #32
 800d288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d28a:	4619      	mov	r1, r3
 800d28c:	f7fe fed6 	bl	800c03c <mpu_read_fifo_stream>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <dmp_read_fifo+0x38>
        return -1;
 800d296:	f04f 33ff 	mov.w	r3, #4294967295
 800d29a:	e150      	b.n	800d53e <dmp_read_fifo+0x2da>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800d29c:	4baa      	ldr	r3, [pc, #680]	@ (800d548 <dmp_read_fifo+0x2e4>)
 800d29e:	895b      	ldrh	r3, [r3, #10]
 800d2a0:	f003 0314 	and.w	r3, r3, #20
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 808a 	beq.w	800d3be <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800d2aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d2ae:	061a      	lsls	r2, r3, #24
 800d2b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d2b4:	041b      	lsls	r3, r3, #16
 800d2b6:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800d2b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d2bc:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800d2be:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800d2c0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d2c4:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800d2ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2ce:	061a      	lsls	r2, r3, #24
 800d2d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d2d4:	041b      	lsls	r3, r3, #16
 800d2d6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800d2d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2dc:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800d2de:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800d2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2e4:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800d2ea:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800d2ec:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800d2ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d2f2:	061a      	lsls	r2, r3, #24
 800d2f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d2f8:	041b      	lsls	r3, r3, #16
 800d2fa:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800d2fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d300:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800d302:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800d304:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d308:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800d30e:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800d310:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800d312:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d316:	061a      	lsls	r2, r3, #24
 800d318:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d31c:	041b      	lsls	r3, r3, #16
 800d31e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800d320:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d324:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800d326:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800d328:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d32c:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800d332:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800d334:	601a      	str	r2, [r3, #0]
        ii += 16;
 800d336:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d33a:	3310      	adds	r3, #16
 800d33c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	141b      	asrs	r3, r3, #16
 800d346:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3304      	adds	r3, #4
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	141b      	asrs	r3, r3, #16
 800d350:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3308      	adds	r3, #8
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	141b      	asrs	r3, r3, #16
 800d35a:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	330c      	adds	r3, #12
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	141b      	asrs	r3, r3, #16
 800d364:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	fb03 f202 	mul.w	r2, r3, r2
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	6979      	ldr	r1, [r7, #20]
 800d372:	fb01 f303 	mul.w	r3, r1, r3
 800d376:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	69b9      	ldr	r1, [r7, #24]
 800d37c:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800d380:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	69f9      	ldr	r1, [r7, #28]
 800d386:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800d38a:	4413      	add	r3, r2
 800d38c:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800d38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d390:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d394:	db03      	blt.n	800d39e <dmp_read_fifo+0x13a>
 800d396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d398:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 800d39c:	dd07      	ble.n	800d3ae <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800d39e:	f7fe fa1b 	bl	800b7d8 <mpu_reset_fifo>
            sensors[0] = 0;
 800d3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	801a      	strh	r2, [r3, #0]
            return -1;
 800d3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ac:	e0c7      	b.n	800d53e <dmp_read_fifo+0x2da>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800d3ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3b8:	b21a      	sxth	r2, r3
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3bc:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800d3be:	4b62      	ldr	r3, [pc, #392]	@ (800d548 <dmp_read_fifo+0x2e4>)
 800d3c0:	895b      	ldrh	r3, [r3, #10]
 800d3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d04f      	beq.n	800d46a <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800d3ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d3ce:	3348      	adds	r3, #72	@ 0x48
 800d3d0:	443b      	add	r3, r7
 800d3d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d3d6:	b21b      	sxth	r3, r3
 800d3d8:	021b      	lsls	r3, r3, #8
 800d3da:	b21a      	sxth	r2, r3
 800d3dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	3348      	adds	r3, #72	@ 0x48
 800d3e4:	443b      	add	r3, r7
 800d3e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d3ea:	b21b      	sxth	r3, r3
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	b21a      	sxth	r2, r3
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800d3f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d3f8:	3302      	adds	r3, #2
 800d3fa:	3348      	adds	r3, #72	@ 0x48
 800d3fc:	443b      	add	r3, r7
 800d3fe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d402:	b21b      	sxth	r3, r3
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	b219      	sxth	r1, r3
 800d408:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d40c:	3303      	adds	r3, #3
 800d40e:	3348      	adds	r3, #72	@ 0x48
 800d410:	443b      	add	r3, r7
 800d412:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d416:	b21a      	sxth	r2, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3302      	adds	r3, #2
 800d41c:	430a      	orrs	r2, r1
 800d41e:	b212      	sxth	r2, r2
 800d420:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800d422:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d426:	3304      	adds	r3, #4
 800d428:	3348      	adds	r3, #72	@ 0x48
 800d42a:	443b      	add	r3, r7
 800d42c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d430:	b21b      	sxth	r3, r3
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	b219      	sxth	r1, r3
 800d436:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d43a:	3305      	adds	r3, #5
 800d43c:	3348      	adds	r3, #72	@ 0x48
 800d43e:	443b      	add	r3, r7
 800d440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d444:	b21a      	sxth	r2, r3
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	3304      	adds	r3, #4
 800d44a:	430a      	orrs	r2, r1
 800d44c:	b212      	sxth	r2, r2
 800d44e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800d450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d454:	3306      	adds	r3, #6
 800d456:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800d45a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d45c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d460:	f043 0308 	orr.w	r3, r3, #8
 800d464:	b21a      	sxth	r2, r3
 800d466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d468:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800d46a:	4b37      	ldr	r3, [pc, #220]	@ (800d548 <dmp_read_fifo+0x2e4>)
 800d46c:	895b      	ldrh	r3, [r3, #10]
 800d46e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800d472:	2b00      	cmp	r3, #0
 800d474:	d04f      	beq.n	800d516 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800d476:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d47a:	3348      	adds	r3, #72	@ 0x48
 800d47c:	443b      	add	r3, r7
 800d47e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d482:	b21b      	sxth	r3, r3
 800d484:	021b      	lsls	r3, r3, #8
 800d486:	b21a      	sxth	r2, r3
 800d488:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d48c:	3301      	adds	r3, #1
 800d48e:	3348      	adds	r3, #72	@ 0x48
 800d490:	443b      	add	r3, r7
 800d492:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d496:	b21b      	sxth	r3, r3
 800d498:	4313      	orrs	r3, r2
 800d49a:	b21a      	sxth	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800d4a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d4a4:	3302      	adds	r3, #2
 800d4a6:	3348      	adds	r3, #72	@ 0x48
 800d4a8:	443b      	add	r3, r7
 800d4aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d4ae:	b21b      	sxth	r3, r3
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	b219      	sxth	r1, r3
 800d4b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	3348      	adds	r3, #72	@ 0x48
 800d4bc:	443b      	add	r3, r7
 800d4be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d4c2:	b21a      	sxth	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3302      	adds	r3, #2
 800d4c8:	430a      	orrs	r2, r1
 800d4ca:	b212      	sxth	r2, r2
 800d4cc:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800d4ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	3348      	adds	r3, #72	@ 0x48
 800d4d6:	443b      	add	r3, r7
 800d4d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d4dc:	b21b      	sxth	r3, r3
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	b219      	sxth	r1, r3
 800d4e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d4e6:	3305      	adds	r3, #5
 800d4e8:	3348      	adds	r3, #72	@ 0x48
 800d4ea:	443b      	add	r3, r7
 800d4ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800d4f0:	b21a      	sxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	b212      	sxth	r2, r2
 800d4fa:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800d4fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d500:	3306      	adds	r3, #6
 800d502:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800d506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d50c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800d510:	b21a      	sxth	r2, r3
 800d512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d514:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800d516:	4b0c      	ldr	r3, [pc, #48]	@ (800d548 <dmp_read_fifo+0x2e4>)
 800d518:	895b      	ldrh	r3, [r3, #10]
 800d51a:	f003 0303 	and.w	r3, r3, #3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d007      	beq.n	800d532 <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 800d522:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d526:	f107 0220 	add.w	r2, r7, #32
 800d52a:	4413      	add	r3, r2
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fe55 	bl	800d1dc <decode_gesture>

    get_ms(timestamp);
 800d532:	f7f5 f8b1 	bl	8002698 <HAL_GetTick>
 800d536:	4602      	mov	r2, r0
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	601a      	str	r2, [r3, #0]
    return 0;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3748      	adds	r7, #72	@ 0x48
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20004a4c 	.word	0x20004a4c

0800d54c <VerticalPidCalc>:
  * @param   Med   平衡目标角度 | Balance target angle
  * @param   Angle 当前倾角 | Current tilt angle
  * @param   gyro  陀螺 Y 轴角速度 | Gyro Y-axis rate
  * @return  返回 PWM 输出 | Returns PWM output
  */
int VerticalPidCalc(float Med, float Angle, float gyro) {
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	ed87 0a03 	vstr	s0, [r7, #12]
 800d556:	edc7 0a02 	vstr	s1, [r7, #8]
 800d55a:	ed87 1a01 	vstr	s2, [r7, #4]
    // 误差比例 + 微分 | P error plus D term
    int PWM_out = Vertical_Kp * (Angle - Med) + Vertical_Kd * gyro;
 800d55e:	ed97 7a02 	vldr	s14, [r7, #8]
 800d562:	edd7 7a03 	vldr	s15, [r7, #12]
 800d566:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d56a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a0 <VerticalPidCalc+0x54>)
 800d56c:	edd3 7a00 	vldr	s15, [r3]
 800d570:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d574:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a4 <VerticalPidCalc+0x58>)
 800d576:	edd3 6a00 	vldr	s13, [r3]
 800d57a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d57e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d582:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d58a:	ee17 3a90 	vmov	r3, s15
 800d58e:	617b      	str	r3, [r7, #20]
    return PWM_out;
 800d590:	697b      	ldr	r3, [r7, #20]
}
 800d592:	4618      	mov	r0, r3
 800d594:	371c      	adds	r7, #28
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	20000048 	.word	0x20000048
 800d5a4:	2000004c 	.word	0x2000004c

0800d5a8 <VelocityPidCalc>:
  * @param   Target         目标速度 | Target speed
  * @param   encoder_left   左编码器计数 | Left encoder count
  * @param   encoder_right  右编码器计数 | Right encoder count
  * @return  返回 PWM 输出 | Returns PWM output
  */
int VelocityPidCalc(int Target, int encoder_left, int encoder_right) {
 800d5a8:	b480      	push	{r7}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
    // 静态变量保持状态 | Static variables to preserve state
    static int PWM_out, Encoder_Err, Encoder_Sum, Err_Low, Err_Low_last;
    float alpha = 0.7f;  // 滤波系数 | Filter coefficient
 800d5b4:	4b3e      	ldr	r3, [pc, #248]	@ (800d6b0 <VelocityPidCalc+0x108>)
 800d5b6:	617b      	str	r3, [r7, #20]

    // 计算平均误差 | Calculate average error
    Encoder_Err = ((encoder_left + encoder_right) / 2.0f - Target);
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d5ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	ee07 3a90 	vmov	s15, r3
 800d5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5e0:	ee17 2a90 	vmov	r2, s15
 800d5e4:	4b33      	ldr	r3, [pc, #204]	@ (800d6b4 <VelocityPidCalc+0x10c>)
 800d5e6:	601a      	str	r2, [r3, #0]

    // 低通滤波 | Low-pass filter
    Err_Low = (1 - alpha) * Encoder_Err + alpha * Err_Low_last;
 800d5e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5ec:	edd7 7a05 	vldr	s15, [r7, #20]
 800d5f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5f4:	4b2f      	ldr	r3, [pc, #188]	@ (800d6b4 <VelocityPidCalc+0x10c>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d600:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d604:	4b2c      	ldr	r3, [pc, #176]	@ (800d6b8 <VelocityPidCalc+0x110>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	ee07 3a90 	vmov	s15, r3
 800d60c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d610:	edd7 7a05 	vldr	s15, [r7, #20]
 800d614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d61c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d620:	ee17 2a90 	vmov	r2, s15
 800d624:	4b25      	ldr	r3, [pc, #148]	@ (800d6bc <VelocityPidCalc+0x114>)
 800d626:	601a      	str	r2, [r3, #0]
    Err_Low_last = Err_Low;  // 更新上次滤波值 | Update previous filtered error
 800d628:	4b24      	ldr	r3, [pc, #144]	@ (800d6bc <VelocityPidCalc+0x114>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a22      	ldr	r2, [pc, #136]	@ (800d6b8 <VelocityPidCalc+0x110>)
 800d62e:	6013      	str	r3, [r2, #0]

    // 误差累积 | Accumulate error
    Encoder_Sum += Err_Low;
 800d630:	4b23      	ldr	r3, [pc, #140]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	4b21      	ldr	r3, [pc, #132]	@ (800d6bc <VelocityPidCalc+0x114>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4413      	add	r3, r2
 800d63a:	4a21      	ldr	r2, [pc, #132]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d63c:	6013      	str	r3, [r2, #0]

    // 限制累积和范围防止积分饱和 | Limit accumulator to prevent windup
    if (Encoder_Sum > 15000) Encoder_Sum = 15000;
 800d63e:	4b20      	ldr	r3, [pc, #128]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800d646:	4293      	cmp	r3, r2
 800d648:	dd03      	ble.n	800d652 <VelocityPidCalc+0xaa>
 800d64a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d64c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800d650:	601a      	str	r2, [r3, #0]
    if (Encoder_Sum < -15000) Encoder_Sum = -15000;
 800d652:	4b1b      	ldr	r3, [pc, #108]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a1b      	ldr	r2, [pc, #108]	@ (800d6c4 <VelocityPidCalc+0x11c>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	da02      	bge.n	800d662 <VelocityPidCalc+0xba>
 800d65c:	4b18      	ldr	r3, [pc, #96]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d65e:	4a19      	ldr	r2, [pc, #100]	@ (800d6c4 <VelocityPidCalc+0x11c>)
 800d660:	601a      	str	r2, [r3, #0]

    // PI 控制 | PI control
    PWM_out = Velocity_Kp * Err_Low + Velocity_Ki * Encoder_Sum;
 800d662:	4b16      	ldr	r3, [pc, #88]	@ (800d6bc <VelocityPidCalc+0x114>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	ee07 3a90 	vmov	s15, r3
 800d66a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d66e:	4b16      	ldr	r3, [pc, #88]	@ (800d6c8 <VelocityPidCalc+0x120>)
 800d670:	edd3 7a00 	vldr	s15, [r3]
 800d674:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d678:	4b11      	ldr	r3, [pc, #68]	@ (800d6c0 <VelocityPidCalc+0x118>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	ee07 3a90 	vmov	s15, r3
 800d680:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d684:	4b11      	ldr	r3, [pc, #68]	@ (800d6cc <VelocityPidCalc+0x124>)
 800d686:	edd3 7a00 	vldr	s15, [r3]
 800d68a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d696:	ee17 2a90 	vmov	r2, s15
 800d69a:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d0 <VelocityPidCalc+0x128>)
 800d69c:	601a      	str	r2, [r3, #0]
    return PWM_out;
 800d69e:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d0 <VelocityPidCalc+0x128>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	371c      	adds	r7, #28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	3f333333 	.word	0x3f333333
 800d6b4:	20004a5c 	.word	0x20004a5c
 800d6b8:	20004a60 	.word	0x20004a60
 800d6bc:	20004a64 	.word	0x20004a64
 800d6c0:	20004a68 	.word	0x20004a68
 800d6c4:	ffffc568 	.word	0xffffc568
 800d6c8:	20000050 	.word	0x20000050
 800d6cc:	20000054 	.word	0x20000054
 800d6d0:	20004a6c 	.word	0x20004a6c

0800d6d4 <Turn>:
/**
  * @brief   转向计算 | Turn calculation
  * @param   gyro_Z  陀螺 Z 轴角速度 | Gyro Z-axis rate
  * @return  返回 PWM 输出 | Returns PWM output
  */
int Turn(int gyro_Z) {
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
    // 线性比例 | Proportional control
    int PWM_out = (int)(Turn_Kp * gyro_Z);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	ee07 3a90 	vmov	s15, r3
 800d6e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d6e6:	4b08      	ldr	r3, [pc, #32]	@ (800d708 <Turn+0x34>)
 800d6e8:	edd3 7a00 	vldr	s15, [r3]
 800d6ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6f4:	ee17 3a90 	vmov	r3, s15
 800d6f8:	60fb      	str	r3, [r7, #12]
    return PWM_out;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	20000058 	.word	0x20000058

0800d70c <newCar>:

/**
  * @brief   创建并初始化小车实例 | Create and initialize a car instance
  * @return  返回初始化后的 Car 对象 | Returns the initialized Car object
  */
Car newCar(void) {
 800d70c:	b5b0      	push	{r4, r5, r7, lr}
 800d70e:	b0d6      	sub	sp, #344	@ 0x158
 800d710:	af04      	add	r7, sp, #16
 800d712:	65f8      	str	r0, [r7, #92]	@ 0x5c
    Car c = {
 800d714:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800d718:	22b8      	movs	r2, #184	@ 0xb8
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f001 f8a3 	bl	800e868 <memset>
 800d722:	2301      	movs	r3, #1
 800d724:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 800d728:	2308      	movs	r3, #8
 800d72a:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
 800d72e:	4b52      	ldr	r3, [pc, #328]	@ (800d878 <newCar+0x16c>)
 800d730:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d734:	23c5      	movs	r3, #197	@ 0xc5
 800d736:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
            .balanceBias           = MECHANICAL_BALANCE_BIAS, // 平衡偏置 | Balance bias
            .cmd                   = CMD_STOP  // 默认命令 | Default command
    };

    // 左电机初始化参数 | Left motor init parameters
    Motor_InitTypeDef motor_l_Init = {
 800d73a:	4b50      	ldr	r3, [pc, #320]	@ (800d87c <newCar+0x170>)
 800d73c:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 800d740:	461d      	mov	r5, r3
 800d742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d746:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d74a:	e884 0003 	stmia.w	r4, {r0, r1}
            .IN2_GPIOx    = MOTOR_L_IN2_PORT,
            .IN2_GPIO_Pin = MOTOR_L_IN2_PIN
    };

    // 右电机初始化参数 | Right motor init parameters
    Motor_InitTypeDef motor_r_Init = {
 800d74e:	4b4c      	ldr	r3, [pc, #304]	@ (800d880 <newCar+0x174>)
 800d750:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800d754:	461d      	mov	r5, r3
 800d756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d75a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d75e:	e884 0003 	stmia.w	r4, {r0, r1}
            .IN2_GPIOx    = MOTOR_R_IN2_PORT,
            .IN2_GPIO_Pin = MOTOR_R_IN2_PIN
    };

    // 创建左右电机对象 | Create motor instances
    c.motor_l = newMotor(motor_l_Init);
 800d762:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 800d766:	466c      	mov	r4, sp
 800d768:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800d76c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d774:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800d778:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d77a:	4628      	mov	r0, r5
 800d77c:	f000 fc46 	bl	800e00c <newMotor>
 800d780:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d784:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d788:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800d78c:	461d      	mov	r5, r3
 800d78e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	6023      	str	r3, [r4, #0]
    c.motor_r = newMotor(motor_r_Init);
 800d79a:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 800d79e:	466c      	mov	r4, sp
 800d7a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800d7a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7ac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d7b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	f000 fc2a 	bl	800e00c <newMotor>
 800d7b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d7c0:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 800d7c4:	461d      	mov	r5, r3
 800d7c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7ce:	682b      	ldr	r3, [r5, #0]
 800d7d0:	6023      	str	r3, [r4, #0]

    // 初始化左右编码器 | Initialize encoders
    c.encoder_l = newEncoder(&ENCODER_L_TIM, TIM_CHANNEL_ALL);
 800d7d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d7d6:	223c      	movs	r2, #60	@ 0x3c
 800d7d8:	492a      	ldr	r1, [pc, #168]	@ (800d884 <newCar+0x178>)
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fa18 	bl	800dc10 <newEncoder>
 800d7e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d7e8:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 800d7ec:	461d      	mov	r5, r3
 800d7ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	6023      	str	r3, [r4, #0]
    c.encoder_r = newEncoder(&ENCODER_R_TIM, TIM_CHANNEL_ALL);
 800d7f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d7fa:	223c      	movs	r2, #60	@ 0x3c
 800d7fc:	4922      	ldr	r1, [pc, #136]	@ (800d888 <newCar+0x17c>)
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fa06 	bl	800dc10 <newEncoder>
 800d804:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d808:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800d80c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 800d810:	461d      	mov	r5, r3
 800d812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	6023      	str	r3, [r4, #0]

    // 初始化并启用 IMU | Initialize and enable IMU
    c.imu = newImu();
 800d81a:	463b      	mov	r3, r7
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 fb9f 	bl	800df60 <newImu>
 800d822:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d826:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d82a:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 800d82e:	461d      	mov	r5, r3
 800d830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d83c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    c.imu.Enable(&c.imu);
 800d840:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800d844:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800d848:	3284      	adds	r2, #132	@ 0x84
 800d84a:	4610      	mov	r0, r2
 800d84c:	4798      	blx	r3

    // 启用电机驱动板 | Enable motor driver board (set STBY high)
    HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET);
 800d84e:	2201      	movs	r2, #1
 800d850:	2102      	movs	r1, #2
 800d852:	480e      	ldr	r0, [pc, #56]	@ (800d88c <newCar+0x180>)
 800d854:	f7f6 f9a2 	bl	8003b9c <HAL_GPIO_WritePin>

    // 绑定移动函数 | Bind move function
    c.CarMove = CarMove;
 800d858:	4b0d      	ldr	r3, [pc, #52]	@ (800d890 <newCar+0x184>)
 800d85a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    return c;
 800d85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d860:	4618      	mov	r0, r3
 800d862:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800d866:	22b8      	movs	r2, #184	@ 0xb8
 800d868:	4619      	mov	r1, r3
 800d86a:	f001 f831 	bl	800e8d0 <memcpy>
}
 800d86e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800d870:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800d874:	46bd      	mov	sp, r7
 800d876:	bdb0      	pop	{r4, r5, r7, pc}
 800d878:	c059999a 	.word	0xc059999a
 800d87c:	0800fd70 	.word	0x0800fd70
 800d880:	0800fd88 	.word	0x0800fd88
 800d884:	200005c4 	.word	0x200005c4
 800d888:	20000534 	.word	0x20000534
 800d88c:	40020800 	.word	0x40020800
 800d890:	0800db21 	.word	0x0800db21

0800d894 <MotorPidCalc>:
  * @brief   计算电机 PID 输出 | Compute motor PID output
  * @return  返回 PWM 输出 | Returns PWM output
  *
  * @note    先限幅角速度，再调用速度-直立-转向 PID | Limit angular speed, then run velocity, vertical, and turn PID
  */
int MotorPidCalc() {
 800d894:	b580      	push	{r7, lr}
 800d896:	af00      	add	r7, sp, #0
    // 限制角速度范围 | Limit angular speed range
    car.targetAngularSpeed = LIMIT(car.targetAngularSpeed, -5000, 5000);
 800d898:	4b29      	ldr	r3, [pc, #164]	@ (800d940 <MotorPidCalc+0xac>)
 800d89a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d89e:	4a29      	ldr	r2, [pc, #164]	@ (800d944 <MotorPidCalc+0xb0>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	db09      	blt.n	800d8b8 <MotorPidCalc+0x24>
 800d8a4:	4b26      	ldr	r3, [pc, #152]	@ (800d940 <MotorPidCalc+0xac>)
 800d8a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d8aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	bfa8      	it	ge
 800d8b2:	4613      	movge	r3, r2
 800d8b4:	b21b      	sxth	r3, r3
 800d8b6:	e000      	b.n	800d8ba <MotorPidCalc+0x26>
 800d8b8:	4b22      	ldr	r3, [pc, #136]	@ (800d944 <MotorPidCalc+0xb0>)
 800d8ba:	4a21      	ldr	r2, [pc, #132]	@ (800d940 <MotorPidCalc+0xac>)
 800d8bc:	80d3      	strh	r3, [r2, #6]

    // 速度 PID 输出 | Velocity PID output
    Velocity_out = VelocityPidCalc(car.targetLinearSpeed, car.encoder_l.rpm, car.encoder_r.rpm);
 800d8be:	4b20      	ldr	r3, [pc, #128]	@ (800d940 <MotorPidCalc+0xac>)
 800d8c0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d940 <MotorPidCalc+0xac>)
 800d8c8:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800d8cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d8d0:	4b1b      	ldr	r3, [pc, #108]	@ (800d940 <MotorPidCalc+0xac>)
 800d8d2:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800d8d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8da:	ee17 2a90 	vmov	r2, s15
 800d8de:	ee17 1a10 	vmov	r1, s14
 800d8e2:	f7ff fe61 	bl	800d5a8 <VelocityPidCalc>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	4a17      	ldr	r2, [pc, #92]	@ (800d948 <MotorPidCalc+0xb4>)
 800d8ea:	6013      	str	r3, [r2, #0]
    // 直立 PID 输出 | Vertical PID output
    Vertical_out = VerticalPidCalc(Velocity_out + car.balanceBias, car.imu.roll, car.imu.gyrox);
 800d8ec:	4b16      	ldr	r3, [pc, #88]	@ (800d948 <MotorPidCalc+0xb4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8f8:	4b11      	ldr	r3, [pc, #68]	@ (800d940 <MotorPidCalc+0xac>)
 800d8fa:	edd3 7a03 	vldr	s15, [r3, #12]
 800d8fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d902:	4b0f      	ldr	r3, [pc, #60]	@ (800d940 <MotorPidCalc+0xac>)
 800d904:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 800d908:	4b0d      	ldr	r3, [pc, #52]	@ (800d940 <MotorPidCalc+0xac>)
 800d90a:	edd3 6a28 	vldr	s13, [r3, #160]	@ 0xa0
 800d90e:	eeb0 1a66 	vmov.f32	s2, s13
 800d912:	eef0 0a47 	vmov.f32	s1, s14
 800d916:	eeb0 0a67 	vmov.f32	s0, s15
 800d91a:	f7ff fe17 	bl	800d54c <VerticalPidCalc>
 800d91e:	4603      	mov	r3, r0
 800d920:	4a0a      	ldr	r2, [pc, #40]	@ (800d94c <MotorPidCalc+0xb8>)
 800d922:	6013      	str	r3, [r2, #0]
    // 转向 PID 输出 | Turn PID output
    Turn_out = Turn(car.targetAngularSpeed);
 800d924:	4b06      	ldr	r3, [pc, #24]	@ (800d940 <MotorPidCalc+0xac>)
 800d926:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7ff fed2 	bl	800d6d4 <Turn>
 800d930:	4603      	mov	r3, r0
 800d932:	4a07      	ldr	r2, [pc, #28]	@ (800d950 <MotorPidCalc+0xbc>)
 800d934:	6013      	str	r3, [r2, #0]

    return Vertical_out;  // 直立环输出 | Return vertical loop output
 800d936:	4b05      	ldr	r3, [pc, #20]	@ (800d94c <MotorPidCalc+0xb8>)
 800d938:	681b      	ldr	r3, [r3, #0]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20004a70 	.word	0x20004a70
 800d944:	ffffec78 	.word	0xffffec78
 800d948:	20004b2c 	.word	0x20004b2c
 800d94c:	20004b28 	.word	0x20004b28
 800d950:	20004b30 	.word	0x20004b30

0800d954 <checkMotionCommand>:

/**
  * @brief   解析并处理运动命令 | Parse and process motion commands
  * @note    根据 car.cmd 更新目标速度和状态 | Update target speeds and state based on car.cmd
  */
void checkMotionCommand() {
 800d954:	b580      	push	{r7, lr}
 800d956:	af00      	add	r7, sp, #0
    // 如果开启障碍规避且刹车，强制后退 | If obstacle avoidance on and brake, force backward
    if (car.isObstacleAvoidanceOn && car.isBrake) {
 800d958:	4b6f      	ldr	r3, [pc, #444]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d006      	beq.n	800d96e <checkMotionCommand+0x1a>
 800d960:	4b6d      	ldr	r3, [pc, #436]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d962:	78db      	ldrb	r3, [r3, #3]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <checkMotionCommand+0x1a>
        car.cmd = CMD_BACKWARD;
 800d968:	4b6b      	ldr	r3, [pc, #428]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d96a:	22c4      	movs	r2, #196	@ 0xc4
 800d96c:	741a      	strb	r2, [r3, #16]
    }

    switch (car.cmd) {
 800d96e:	4b6a      	ldr	r3, [pc, #424]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d970:	7c1b      	ldrb	r3, [r3, #16]
 800d972:	3bc1      	subs	r3, #193	@ 0xc1
 800d974:	2b0b      	cmp	r3, #11
 800d976:	f200 80b9 	bhi.w	800daec <checkMotionCommand+0x198>
 800d97a:	a201      	add	r2, pc, #4	@ (adr r2, 800d980 <checkMotionCommand+0x2c>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d9eb 	.word	0x0800d9eb
 800d984:	0800d9fb 	.word	0x0800d9fb
 800d988:	0800d9bf 	.word	0x0800d9bf
 800d98c:	0800d9d1 	.word	0x0800d9d1
 800d990:	0800d9b1 	.word	0x0800d9b1
 800d994:	0800da9d 	.word	0x0800da9d
 800d998:	0800da0b 	.word	0x0800da0b
 800d99c:	0800da49 	.word	0x0800da49
 800d9a0:	0800dad1 	.word	0x0800dad1
 800d9a4:	0800daed 	.word	0x0800daed
 800d9a8:	0800daed 	.word	0x0800daed
 800d9ac:	0800dac1 	.word	0x0800dac1
        case CMD_STOP:
            car.targetLinearSpeed = 0;   // 停止 | Stop
 800d9b0:	4b59      	ldr	r3, [pc, #356]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	715a      	strb	r2, [r3, #5]
            car.targetAngularSpeed = 0;
 800d9b6:	4b58      	ldr	r3, [pc, #352]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	80da      	strh	r2, [r3, #6]
            break;
 800d9bc:	e097      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_FORWARD:
            // 前进可能是新状态，也可能重复 | Forward may be new or repeated state
            car.targetLinearSpeed = (int8_t)car.targetStartLinearSpeed;
 800d9be:	4b56      	ldr	r3, [pc, #344]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9c0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d9c4:	4b54      	ldr	r3, [pc, #336]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9c6:	715a      	strb	r2, [r3, #5]
            car.motionState = CAR_MOTION_FOWARD;  // 更新状态 | Update state
 800d9c8:	4b53      	ldr	r3, [pc, #332]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	711a      	strb	r2, [r3, #4]
            break;
 800d9ce:	e08e      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_BACKWARD:
            car.targetLinearSpeed = (int8_t)-car.targetStartLinearSpeed;  // 后退速度 | Backward speed
 800d9d0:	4b51      	ldr	r3, [pc, #324]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	425b      	negs	r3, r3
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	b25a      	sxtb	r2, r3
 800d9de:	4b4e      	ldr	r3, [pc, #312]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9e0:	715a      	strb	r2, [r3, #5]
            car.motionState = CAR_MOTION_BACKWARD;  // 更新状态 | Update state
 800d9e2:	4b4d      	ldr	r3, [pc, #308]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	711a      	strb	r2, [r3, #4]
            break;
 800d9e8:	e081      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_LEFT:
            car.targetAngularSpeed = -3000;   // 左转角速度 | Left turn angular speed
 800d9ea:	4b4b      	ldr	r3, [pc, #300]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9ec:	f24f 4248 	movw	r2, #62536	@ 0xf448
 800d9f0:	80da      	strh	r2, [r3, #6]
            car.motionState = CAR_MOTION_LEFT;  // 更新状态 | Update state
 800d9f2:	4b49      	ldr	r3, [pc, #292]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9f4:	2203      	movs	r2, #3
 800d9f6:	711a      	strb	r2, [r3, #4]
            break;
 800d9f8:	e079      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_RIGHT:
            car.targetAngularSpeed = 3000;    // 右转角速度 | Right turn angular speed
 800d9fa:	4b47      	ldr	r3, [pc, #284]	@ (800db18 <checkMotionCommand+0x1c4>)
 800d9fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800da00:	80da      	strh	r2, [r3, #6]
            car.motionState = CAR_MOTION_RIGHT; // 更新状态 | Update state
 800da02:	4b45      	ldr	r3, [pc, #276]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da04:	2204      	movs	r2, #4
 800da06:	711a      	strb	r2, [r3, #4]
            break;
 800da08:	e071      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_SPEED_UP:
            if (car.motionState == CAR_MOTION_FOWARD) {
 800da0a:	4b43      	ldr	r3, [pc, #268]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da0c:	791b      	ldrb	r3, [r3, #4]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d109      	bne.n	800da26 <checkMotionCommand+0xd2>
                car.targetLinearSpeed += 1;  // 加速前进 | Accelerate forward
 800da12:	4b41      	ldr	r3, [pc, #260]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da14:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	3301      	adds	r3, #1
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	b25a      	sxtb	r2, r3
 800da20:	4b3d      	ldr	r3, [pc, #244]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da22:	715a      	strb	r2, [r3, #5]
 800da24:	e00c      	b.n	800da40 <checkMotionCommand+0xec>
            } else if (car.motionState == CAR_MOTION_BACKWARD) {
 800da26:	4b3c      	ldr	r3, [pc, #240]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da28:	791b      	ldrb	r3, [r3, #4]
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d108      	bne.n	800da40 <checkMotionCommand+0xec>
                car.targetLinearSpeed -= 1;  // 加速后退 | Accelerate backward
 800da2e:	4b3a      	ldr	r3, [pc, #232]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da30:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	3b01      	subs	r3, #1
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	b25a      	sxtb	r2, r3
 800da3c:	4b36      	ldr	r3, [pc, #216]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da3e:	715a      	strb	r2, [r3, #5]
            }
            car.cmd = CMD_SPEED_CONSTANT;   // 固定速度状态 | Constant speed state
 800da40:	4b35      	ldr	r3, [pc, #212]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da42:	22cd      	movs	r2, #205	@ 0xcd
 800da44:	741a      	strb	r2, [r3, #16]
            break;
 800da46:	e052      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_SPEED_DOWN:
            if (car.motionState == CAR_MOTION_FOWARD) {
 800da48:	4b33      	ldr	r3, [pc, #204]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da4a:	791b      	ldrb	r3, [r3, #4]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d10e      	bne.n	800da6e <checkMotionCommand+0x11a>
                if (car.targetLinearSpeed > 2) {
 800da50:	4b31      	ldr	r3, [pc, #196]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da52:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da56:	2b02      	cmp	r3, #2
 800da58:	dd1c      	ble.n	800da94 <checkMotionCommand+0x140>
                    car.targetLinearSpeed -= 2;  // 减速前进 | Decelerate forward
 800da5a:	4b2f      	ldr	r3, [pc, #188]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da5c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da60:	b2db      	uxtb	r3, r3
 800da62:	3b02      	subs	r3, #2
 800da64:	b2db      	uxtb	r3, r3
 800da66:	b25a      	sxtb	r2, r3
 800da68:	4b2b      	ldr	r3, [pc, #172]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da6a:	715a      	strb	r2, [r3, #5]
 800da6c:	e012      	b.n	800da94 <checkMotionCommand+0x140>
                }
            } else if (car.motionState == CAR_MOTION_BACKWARD) {
 800da6e:	4b2a      	ldr	r3, [pc, #168]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da70:	791b      	ldrb	r3, [r3, #4]
 800da72:	2b02      	cmp	r3, #2
 800da74:	d10e      	bne.n	800da94 <checkMotionCommand+0x140>
                if (car.targetLinearSpeed < -2) {
 800da76:	4b28      	ldr	r3, [pc, #160]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da78:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da7c:	f113 0f02 	cmn.w	r3, #2
 800da80:	da08      	bge.n	800da94 <checkMotionCommand+0x140>
                    car.targetLinearSpeed += 2;  // 减速后退 | Decelerate backward
 800da82:	4b25      	ldr	r3, [pc, #148]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da84:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	3302      	adds	r3, #2
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	b25a      	sxtb	r2, r3
 800da90:	4b21      	ldr	r3, [pc, #132]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da92:	715a      	strb	r2, [r3, #5]
                }
            }
            car.cmd = CMD_SPEED_CONSTANT;  // 固定速度状态 | Constant speed state
 800da94:	4b20      	ldr	r3, [pc, #128]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da96:	22cd      	movs	r2, #205	@ 0xcd
 800da98:	741a      	strb	r2, [r3, #16]
            break;
 800da9a:	e028      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_STOP_SLOWLY:
            // 缓慢停止：前进速度大于等于4时减1 | Slow stop: if forward speed ≥4, reduce by1
            if (car.targetLinearSpeed >= 4) car.targetLinearSpeed -= 1;
 800da9c:	4b1e      	ldr	r3, [pc, #120]	@ (800db18 <checkMotionCommand+0x1c4>)
 800da9e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	dd08      	ble.n	800dab8 <checkMotionCommand+0x164>
 800daa6:	4b1c      	ldr	r3, [pc, #112]	@ (800db18 <checkMotionCommand+0x1c4>)
 800daa8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800daac:	b2db      	uxtb	r3, r3
 800daae:	3b01      	subs	r3, #1
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	b25a      	sxtb	r2, r3
 800dab4:	4b18      	ldr	r3, [pc, #96]	@ (800db18 <checkMotionCommand+0x1c4>)
 800dab6:	715a      	strb	r2, [r3, #5]
            car.targetAngularSpeed = 0;  // 角速度置零 | Angular speed zero
 800dab8:	4b17      	ldr	r3, [pc, #92]	@ (800db18 <checkMotionCommand+0x1c4>)
 800daba:	2200      	movs	r2, #0
 800dabc:	80da      	strh	r2, [r3, #6]
            break;
 800dabe:	e016      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_POWER_SWITCH:
            HAL_GPIO_TogglePin(STBY_GPIO_Port, STBY_Pin);  // 切换电机驱动板电源 | Toggle motor driver board power
 800dac0:	2102      	movs	r1, #2
 800dac2:	4816      	ldr	r0, [pc, #88]	@ (800db1c <checkMotionCommand+0x1c8>)
 800dac4:	f7f6 f883 	bl	8003bce <HAL_GPIO_TogglePin>
            car.cmd = CMD_SPEED_CONSTANT;  // 固定速度状态 | Constant speed state
 800dac8:	4b13      	ldr	r3, [pc, #76]	@ (800db18 <checkMotionCommand+0x1c4>)
 800daca:	22cd      	movs	r2, #205	@ 0xcd
 800dacc:	741a      	strb	r2, [r3, #16]
            break;
 800dace:	e00e      	b.n	800daee <checkMotionCommand+0x19a>

        case CMD_ROAD_PLANNING:
            car.isObstacleAvoidanceOn = BOOL_TOGGLE(car.isObstacleAvoidanceOn);  // 切换障碍规避模式 | Toggle obstacle avoidance mode
 800dad0:	4b11      	ldr	r3, [pc, #68]	@ (800db18 <checkMotionCommand+0x1c4>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	bf0c      	ite	eq
 800dad8:	2301      	moveq	r3, #1
 800dada:	2300      	movne	r3, #0
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	461a      	mov	r2, r3
 800dae0:	4b0d      	ldr	r3, [pc, #52]	@ (800db18 <checkMotionCommand+0x1c4>)
 800dae2:	701a      	strb	r2, [r3, #0]
            car.cmd = CMD_SPEED_CONSTANT;
 800dae4:	4b0c      	ldr	r3, [pc, #48]	@ (800db18 <checkMotionCommand+0x1c4>)
 800dae6:	22cd      	movs	r2, #205	@ 0xcd
 800dae8:	741a      	strb	r2, [r3, #16]
            break;
 800daea:	e000      	b.n	800daee <checkMotionCommand+0x19a>

        default:
            break;
 800daec:	bf00      	nop
    }

    // 限制线速度范围 | Limit linear speed range
    car.targetLinearSpeed = LIMIT(car.targetLinearSpeed, -40, 40);
 800daee:	4b0a      	ldr	r3, [pc, #40]	@ (800db18 <checkMotionCommand+0x1c4>)
 800daf0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800daf4:	f113 0f28 	cmn.w	r3, #40	@ 0x28
 800daf8:	db07      	blt.n	800db0a <checkMotionCommand+0x1b6>
 800dafa:	4b07      	ldr	r3, [pc, #28]	@ (800db18 <checkMotionCommand+0x1c4>)
 800dafc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800db00:	2b28      	cmp	r3, #40	@ 0x28
 800db02:	bfa8      	it	ge
 800db04:	2328      	movge	r3, #40	@ 0x28
 800db06:	b25b      	sxtb	r3, r3
 800db08:	e001      	b.n	800db0e <checkMotionCommand+0x1ba>
 800db0a:	f06f 0327 	mvn.w	r3, #39	@ 0x27
 800db0e:	4a02      	ldr	r2, [pc, #8]	@ (800db18 <checkMotionCommand+0x1c4>)
 800db10:	7153      	strb	r3, [r2, #5]
}
 800db12:	bf00      	nop
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20004a70 	.word	0x20004a70
 800db1c:	40020800 	.word	0x40020800

0800db20 <CarMove>:
  * @brief   小车移动控制函数 | Car movement control function
  * @param   self      指向 Car 对象的指针 | Pointer to Car object
  * @param   setSpeed  未使用参数，可保留 | Unused parameter, can be retained
  * @note    调用 PID 计算，判断刹车条件，并设置左右电机 PWM | Run PID, check brake, set left/right motor PWM
  */
void CarMove(Car *self, int8_t setSpeed) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	70fb      	strb	r3, [r7, #3]
    int32_t PWM_out, motor_l_pwm, motor_r_pwm;

    checkMotionCommand();  // 更新目标速度 | Update target speeds
 800db2c:	f7ff ff12 	bl	800d954 <checkMotionCommand>
    PWM_out = MotorPidCalc();  // 计算 PID 输出 | Compute PID output
 800db30:	f7ff feb0 	bl	800d894 <MotorPidCalc>
 800db34:	6178      	str	r0, [r7, #20]

    // 倾角过大时刹车 | Brake if tilt angle too large
    if (car.imu.roll > 60 || car.imu.roll < -60) {
 800db36:	4b30      	ldr	r3, [pc, #192]	@ (800dbf8 <CarMove+0xd8>)
 800db38:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800db3c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800dbfc <CarMove+0xdc>
 800db40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db48:	dc09      	bgt.n	800db5e <CarMove+0x3e>
 800db4a:	4b2b      	ldr	r3, [pc, #172]	@ (800dbf8 <CarMove+0xd8>)
 800db4c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800db50:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800dc00 <CarMove+0xe0>
 800db54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5c:	d503      	bpl.n	800db66 <CarMove+0x46>
        car.isBrake = 1;
 800db5e:	4b26      	ldr	r3, [pc, #152]	@ (800dbf8 <CarMove+0xd8>)
 800db60:	2201      	movs	r2, #1
 800db62:	70da      	strb	r2, [r3, #3]
 800db64:	e002      	b.n	800db6c <CarMove+0x4c>
    } else {
        car.isBrake = 0;
 800db66:	4b24      	ldr	r3, [pc, #144]	@ (800dbf8 <CarMove+0xd8>)
 800db68:	2200      	movs	r2, #0
 800db6a:	70da      	strb	r2, [r3, #3]
    }

    // 左右电机 PWM 计算 | Compute left/right motor PWM
    motor_l_pwm = PWM_out - Turn_out;              // 左电机输出 | Left motor output
 800db6c:	4b25      	ldr	r3, [pc, #148]	@ (800dc04 <CarMove+0xe4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	613b      	str	r3, [r7, #16]
    motor_r_pwm = PWM_out + (int32_t)(0.8f * Turn_out);  // 右电机输出 | Right motor output
 800db76:	4b23      	ldr	r3, [pc, #140]	@ (800dc04 <CarMove+0xe4>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db82:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800dc08 <CarMove+0xe8>
 800db86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db8e:	ee17 2a90 	vmov	r2, s15
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	4413      	add	r3, r2
 800db96:	60fb      	str	r3, [r7, #12]

    // 限制 PWM 范围 | Limit PWM range
    motor_l_pwm = LIMIT(motor_l_pwm, -30000, 30000);
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	4a1c      	ldr	r2, [pc, #112]	@ (800dc0c <CarMove+0xec>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	db06      	blt.n	800dbae <CarMove+0x8e>
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f247 5230 	movw	r2, #30000	@ 0x7530
 800dba6:	4293      	cmp	r3, r2
 800dba8:	bfa8      	it	ge
 800dbaa:	4613      	movge	r3, r2
 800dbac:	e000      	b.n	800dbb0 <CarMove+0x90>
 800dbae:	4b17      	ldr	r3, [pc, #92]	@ (800dc0c <CarMove+0xec>)
 800dbb0:	613b      	str	r3, [r7, #16]
    motor_r_pwm = LIMIT(motor_r_pwm, -30000, 30000);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	4a15      	ldr	r2, [pc, #84]	@ (800dc0c <CarMove+0xec>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	db06      	blt.n	800dbc8 <CarMove+0xa8>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f247 5230 	movw	r2, #30000	@ 0x7530
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	bfa8      	it	ge
 800dbc4:	4613      	movge	r3, r2
 800dbc6:	e000      	b.n	800dbca <CarMove+0xaa>
 800dbc8:	4b10      	ldr	r3, [pc, #64]	@ (800dc0c <CarMove+0xec>)
 800dbca:	60fb      	str	r3, [r7, #12]

    // 发送 PWM 给电机并处理刹车 | Send PWM to motors and handle brake
    self->motor_l.Move(&self->motor_l, car.isBrake, motor_l_pwm);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	f102 0014 	add.w	r0, r2, #20
 800dbd6:	4a08      	ldr	r2, [pc, #32]	@ (800dbf8 <CarMove+0xd8>)
 800dbd8:	78d1      	ldrb	r1, [r2, #3]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	4798      	blx	r3
    self->motor_r.Move(&self->motor_r, car.isBrake, motor_r_pwm);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	f102 0038 	add.w	r0, r2, #56	@ 0x38
 800dbe8:	4a03      	ldr	r2, [pc, #12]	@ (800dbf8 <CarMove+0xd8>)
 800dbea:	78d1      	ldrb	r1, [r2, #3]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4798      	blx	r3
}
 800dbf0:	bf00      	nop
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20004a70 	.word	0x20004a70
 800dbfc:	42700000 	.word	0x42700000
 800dc00:	c2700000 	.word	0xc2700000
 800dc04:	20004b30 	.word	0x20004b30
 800dc08:	3f4ccccd 	.word	0x3f4ccccd
 800dc0c:	ffff8ad0 	.word	0xffff8ad0

0800dc10 <newEncoder>:
  * @brief   创建并初始化编码器实例 | Create and initialize an encoder instance
  * @param   htim      定时器句柄 | Timer handle
  * @param   Channel   编码器通道 | Encoder channel
  * @return  返回初始化后的 Encoder 结构 | Returns the initialized Encoder struct
  */
Encoder newEncoder(TIM_HandleTypeDef *htim, uint32_t Channel) {
 800dc10:	b5b0      	push	{r4, r5, r7, lr}
 800dc12:	b08a      	sub	sp, #40	@ 0x28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
    Encoder e;
    e.htim = htim;            // 关联定时器 | Associate timer
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	617b      	str	r3, [r7, #20]
    e.Channel = Channel;      // 设置通道 | Set channel
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	61bb      	str	r3, [r7, #24]
    e.count = 0;              // 初始化计数 | Initialize count
 800dc24:	2300      	movs	r3, #0
 800dc26:	83bb      	strh	r3, [r7, #28]
    e.last_count = 0;         // 初始化上次计数 | Initialize last count
 800dc28:	2300      	movs	r3, #0
 800dc2a:	83fb      	strh	r3, [r7, #30]

    e.GetCountAndRpm = GetCountAndRpm;  // 绑定函数指针 | Bind function pointer
 800dc2c:	4b08      	ldr	r3, [pc, #32]	@ (800dc50 <newEncoder+0x40>)
 800dc2e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_TIM_Encoder_Start(htim, Channel);  // 启动编码器接口 | Start encoder interface
 800dc30:	6879      	ldr	r1, [r7, #4]
 800dc32:	68b8      	ldr	r0, [r7, #8]
 800dc34:	f7f9 fb74 	bl	8007320 <HAL_TIM_Encoder_Start>

    return e;  // 返回实例 | Return instance
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	461d      	mov	r5, r3
 800dc3c:	f107 0414 	add.w	r4, r7, #20
 800dc40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	602b      	str	r3, [r5, #0]
}
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	3728      	adds	r7, #40	@ 0x28
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bdb0      	pop	{r4, r5, r7, pc}
 800dc50:	0800dc55 	.word	0x0800dc55

0800dc54 <GetCountAndRpm>:
/**
  * @brief   获取当前计数并计算 RPM | Get current count and compute RPM
  * @param   self  指向 Encoder 实例的指针 | Pointer to Encoder instance
  * @return  返回上次记录的计数值 | Returns the last recorded count value
  */
uint16_t GetCountAndRpm(Encoder *self) {
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
    self->last_count = self->count;  // 更新上次计数 | Update last count
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	891a      	ldrh	r2, [r3, #8]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	815a      	strh	r2, [r3, #10]

    static uint16_t cnt = 0;
    cnt = (uint16_t)__HAL_TIM_GET_COUNTER(self->htim);  // 读取当前计数 | Read current counter
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	4b13      	ldr	r3, [pc, #76]	@ (800dcbc <GetCountAndRpm+0x68>)
 800dc70:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SetCounter(self->htim, 0);  // 计数器清零 | Reset counter
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	625a      	str	r2, [r3, #36]	@ 0x24

    // 计算 RPM（考虑计数回绕） | Compute RPM (handle wrap-around)
    self->rpm = (float)((cnt > 30000) ? (cnt - 65536) : cnt);
 800dc7c:	4b0f      	ldr	r3, [pc, #60]	@ (800dcbc <GetCountAndRpm+0x68>)
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	f247 5230 	movw	r2, #30000	@ 0x7530
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d908      	bls.n	800dc9a <GetCountAndRpm+0x46>
 800dc88:	4b0c      	ldr	r3, [pc, #48]	@ (800dcbc <GetCountAndRpm+0x68>)
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800dc90:	ee07 3a90 	vmov	s15, r3
 800dc94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc98:	e005      	b.n	800dca6 <GetCountAndRpm+0x52>
 800dc9a:	4b08      	ldr	r3, [pc, #32]	@ (800dcbc <GetCountAndRpm+0x68>)
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	ee07 3a90 	vmov	s15, r3
 800dca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	edc3 7a03 	vstr	s15, [r3, #12]

    return self->count;  // 返回之前的 count（若有其它逻辑可改） | Return previous count
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	891b      	ldrh	r3, [r3, #8]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr
 800dcbc:	20004b34 	.word	0x20004b34

0800dcc0 <HC_trig>:
float dis = 0;

/**
  * @brief   触发超声波传感器测距 | Trigger ultrasonic sensor for distance measurement
  */
void HC_trig(void) {
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // 拉高 TRIG 引脚 | Set TRIG high
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dcca:	4807      	ldr	r0, [pc, #28]	@ (800dce8 <HC_trig+0x28>)
 800dccc:	f7f5 ff66 	bl	8003b9c <HAL_GPIO_WritePin>
    delay_us(50);                                               // 保持 50us | Hold 50µs
 800dcd0:	2032      	movs	r0, #50	@ 0x32
 800dcd2:	f000 fb59 	bl	800e388 <delay_us>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); // 拉低 TRIG 引脚 | Set TRIG low
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800dcdc:	4802      	ldr	r0, [pc, #8]	@ (800dce8 <HC_trig+0x28>)
 800dcde:	f7f5 ff5d 	bl	8003b9c <HAL_GPIO_WritePin>
}
 800dce2:	bf00      	nop
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	40020000 	.word	0x40020000

0800dcec <calc_dis>:

/**
  * @brief   根据脉宽计算距离（单位：cm） | Calculate distance (cm) from pulse width
  * @return  返回计算后的距离 | Returns calculated distance
  */
float calc_dis(void) {
 800dcec:	b480      	push	{r7}
 800dcee:	af00      	add	r7, sp, #0
    return (float)pulseWidth_us * 0.001f * 342.62f / 2.0f;  // 声速 342.62 m/s, 取半程 | Speed of sound 342.62 m/s, divide by 2
 800dcf0:	4b0c      	ldr	r3, [pc, #48]	@ (800dd24 <calc_dis+0x38>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	ee07 3a90 	vmov	s15, r3
 800dcf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800dd28 <calc_dis+0x3c>
 800dd00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800dd2c <calc_dis+0x40>
 800dd08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd0c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800dd10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd14:	eef0 7a66 	vmov.f32	s15, s13
}
 800dd18:	eeb0 0a67 	vmov.f32	s0, s15
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	20004b48 	.word	0x20004b48
 800dd28:	3a83126f 	.word	0x3a83126f
 800dd2c:	43ab4f5c 	.word	0x43ab4f5c

0800dd30 <HAL_GPIO_EXTI_Callback>:

/**
  * @brief   外部中断回调 | External interrupt callback
  * @param   GPIO_Pin  触发中断的引脚号 | Pin number causing the interrupt
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800dd3a:	88fb      	ldrh	r3, [r7, #6]
 800dd3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd40:	d01d      	beq.n	800dd7e <HAL_GPIO_EXTI_Callback+0x4e>
 800dd42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd46:	f300 80ea 	bgt.w	800df1e <HAL_GPIO_EXTI_Callback+0x1ee>
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd4e:	d029      	beq.n	800dda4 <HAL_GPIO_EXTI_Callback+0x74>
 800dd50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd54:	f300 80e3 	bgt.w	800df1e <HAL_GPIO_EXTI_Callback+0x1ee>
 800dd58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd5c:	f000 80cc 	beq.w	800def8 <HAL_GPIO_EXTI_Callback+0x1c8>
 800dd60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd64:	f300 80db 	bgt.w	800df1e <HAL_GPIO_EXTI_Callback+0x1ee>
 800dd68:	2b20      	cmp	r3, #32
 800dd6a:	d067      	beq.n	800de3c <HAL_GPIO_EXTI_Callback+0x10c>
 800dd6c:	2b20      	cmp	r3, #32
 800dd6e:	f300 80d6 	bgt.w	800df1e <HAL_GPIO_EXTI_Callback+0x1ee>
 800dd72:	2b04      	cmp	r3, #4
 800dd74:	f000 80a0 	beq.w	800deb8 <HAL_GPIO_EXTI_Callback+0x188>
 800dd78:	2b10      	cmp	r3, #16
 800dd7a:	d07e      	beq.n	800de7a <HAL_GPIO_EXTI_Callback+0x14a>
                K[3] = 0;  // 释放标志 | Release flag
            }
            break;

        default:
            break;
 800dd7c:	e0cf      	b.n	800df1e <HAL_GPIO_EXTI_Callback+0x1ee>
            if (HAL_GPIO_ReadPin(BT_STATE_GPIO_Port, BT_STATE_Pin) == GPIO_PIN_SET) {
 800dd7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dd82:	486a      	ldr	r0, [pc, #424]	@ (800df2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800dd84:	f7f5 fef2 	bl	8003b6c <HAL_GPIO_ReadPin>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d103      	bne.n	800dd96 <HAL_GPIO_EXTI_Callback+0x66>
                car.isBluetoothConnected = TRUE;   // 蓝牙已连接 | Bluetooth connected
 800dd8e:	4b68      	ldr	r3, [pc, #416]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	709a      	strb	r2, [r3, #2]
            break;
 800dd94:	e0c6      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                car.isBluetoothConnected = FALSE;  // 蓝牙断开 | Bluetooth disconnected
 800dd96:	4b66      	ldr	r3, [pc, #408]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	709a      	strb	r2, [r3, #2]
                car.targetLinearSpeed = 0;         // 停止前进 | Stop movement
 800dd9c:	4b64      	ldr	r3, [pc, #400]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	715a      	strb	r2, [r3, #5]
            break;
 800dda2:	e0bf      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            current = __HAL_TIM_GET_COUNTER(&htim10);  // 读取计时器计数 | Read timer counter
 800dda4:	4b63      	ldr	r3, [pc, #396]	@ (800df34 <HAL_GPIO_EXTI_Callback+0x204>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddaa:	4a63      	ldr	r2, [pc, #396]	@ (800df38 <HAL_GPIO_EXTI_Callback+0x208>)
 800ddac:	6013      	str	r3, [r2, #0]
            if (HAL_GPIO_ReadPin(EHCO_GPIO_Port, EHCO_Pin) == GPIO_PIN_SET) {
 800ddae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ddb2:	485e      	ldr	r0, [pc, #376]	@ (800df2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800ddb4:	f7f5 feda 	bl	8003b6c <HAL_GPIO_ReadPin>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d104      	bne.n	800ddc8 <HAL_GPIO_EXTI_Callback+0x98>
                lastCapture = current;  // 上升沿：记录起始时间 | Rising edge: record start time
 800ddbe:	4b5e      	ldr	r3, [pc, #376]	@ (800df38 <HAL_GPIO_EXTI_Callback+0x208>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a5e      	ldr	r2, [pc, #376]	@ (800df3c <HAL_GPIO_EXTI_Callback+0x20c>)
 800ddc4:	6013      	str	r3, [r2, #0]
            break;
 800ddc6:	e0ad      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                pulseWidth_us = (current >= lastCapture) ?
 800ddc8:	4b5b      	ldr	r3, [pc, #364]	@ (800df38 <HAL_GPIO_EXTI_Callback+0x208>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	4b5b      	ldr	r3, [pc, #364]	@ (800df3c <HAL_GPIO_EXTI_Callback+0x20c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
                                (current - lastCapture) :
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d305      	bcc.n	800dde0 <HAL_GPIO_EXTI_Callback+0xb0>
 800ddd4:	4b58      	ldr	r3, [pc, #352]	@ (800df38 <HAL_GPIO_EXTI_Callback+0x208>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	4b58      	ldr	r3, [pc, #352]	@ (800df3c <HAL_GPIO_EXTI_Callback+0x20c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	e006      	b.n	800ddee <HAL_GPIO_EXTI_Callback+0xbe>
                                (65535 - lastCapture + current + 1);
 800dde0:	4b55      	ldr	r3, [pc, #340]	@ (800df38 <HAL_GPIO_EXTI_Callback+0x208>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	4b55      	ldr	r3, [pc, #340]	@ (800df3c <HAL_GPIO_EXTI_Callback+0x20c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	1ad3      	subs	r3, r2, r3
                                (current - lastCapture) :
 800ddea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
                pulseWidth_us = (current >= lastCapture) ?
 800ddee:	4a54      	ldr	r2, [pc, #336]	@ (800df40 <HAL_GPIO_EXTI_Callback+0x210>)
 800ddf0:	6013      	str	r3, [r2, #0]
                dis = calc_dis();  // 计算距离 | Compute distance
 800ddf2:	f7ff ff7b 	bl	800dcec <calc_dis>
 800ddf6:	eef0 7a40 	vmov.f32	s15, s0
 800ddfa:	4b52      	ldr	r3, [pc, #328]	@ (800df44 <HAL_GPIO_EXTI_Callback+0x214>)
 800ddfc:	edc3 7a00 	vstr	s15, [r3]
                if (dis < 800) {  // 距离小于 800cm 认为有障碍 | If distance < 800cm → obstacle
 800de00:	4b50      	ldr	r3, [pc, #320]	@ (800df44 <HAL_GPIO_EXTI_Callback+0x214>)
 800de02:	edd3 7a00 	vldr	s15, [r3]
 800de06:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800df48 <HAL_GPIO_EXTI_Callback+0x218>
 800de0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de12:	d400      	bmi.n	800de16 <HAL_GPIO_EXTI_Callback+0xe6>
            break;
 800de14:	e086      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                    car.isObstacleDetected = TRUE;  // 标记障碍检测 | Mark obstacle detected
 800de16:	4b46      	ldr	r3, [pc, #280]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800de18:	2201      	movs	r2, #1
 800de1a:	705a      	strb	r2, [r3, #1]
                    HAL_TIM_Base_Stop_IT(&htim11); // 停止定时器 | Stop timer
 800de1c:	484b      	ldr	r0, [pc, #300]	@ (800df4c <HAL_GPIO_EXTI_Callback+0x21c>)
 800de1e:	f7f9 f8a1 	bl	8006f64 <HAL_TIM_Base_Stop_IT>
                    __HAL_TIM_SET_AUTORELOAD(&htim11, 7999);
 800de22:	4b4a      	ldr	r3, [pc, #296]	@ (800df4c <HAL_GPIO_EXTI_Callback+0x21c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800de2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de2c:	4b47      	ldr	r3, [pc, #284]	@ (800df4c <HAL_GPIO_EXTI_Callback+0x21c>)
 800de2e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800de32:	60da      	str	r2, [r3, #12]
                    HAL_TIM_Base_Start_IT(&htim11); // 重启定时器 | Restart timer
 800de34:	4845      	ldr	r0, [pc, #276]	@ (800df4c <HAL_GPIO_EXTI_Callback+0x21c>)
 800de36:	f7f9 f833 	bl	8006ea0 <HAL_TIM_Base_Start_IT>
            break;
 800de3a:	e073      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            if (HAL_GPIO_ReadPin(K1_GPIO_Port, K1_Pin) == GPIO_PIN_SET) {
 800de3c:	2120      	movs	r1, #32
 800de3e:	483b      	ldr	r0, [pc, #236]	@ (800df2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800de40:	f7f5 fe94 	bl	8003b6c <HAL_GPIO_ReadPin>
 800de44:	4603      	mov	r3, r0
 800de46:	2b01      	cmp	r3, #1
 800de48:	d10f      	bne.n	800de6a <HAL_GPIO_EXTI_Callback+0x13a>
                K[0] = 1;  // 按下标志 | Pressed flag
 800de4a:	4b41      	ldr	r3, [pc, #260]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800de4c:	2201      	movs	r2, #1
 800de4e:	701a      	strb	r2, [r3, #0]
                cnt = (cnt == 0) ? 0 : (cnt - 1);  // 页码减 1（下限 0） | Decrement page, min 0
 800de50:	4b40      	ldr	r3, [pc, #256]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d004      	beq.n	800de62 <HAL_GPIO_EXTI_Callback+0x132>
 800de58:	4b3e      	ldr	r3, [pc, #248]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	e000      	b.n	800de64 <HAL_GPIO_EXTI_Callback+0x134>
 800de62:	2300      	movs	r3, #0
 800de64:	4a3b      	ldr	r2, [pc, #236]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800de66:	7013      	strb	r3, [r2, #0]
            break;
 800de68:	e05c      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                K[0] = 0;        // 释放标志 | Release flag
 800de6a:	4b39      	ldr	r3, [pc, #228]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	701a      	strb	r2, [r3, #0]
                OLED_Clear();    // 清屏 | Clear display
 800de70:	f7fd f8d0 	bl	800b014 <OLED_Clear>
                OLED_Update();   // 更新屏幕 | Update display
 800de74:	f7fd f8ae 	bl	800afd4 <OLED_Update>
            break;
 800de78:	e054      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            if (HAL_GPIO_ReadPin(K2_GPIO_Port, K2_Pin) == GPIO_PIN_SET) {
 800de7a:	2110      	movs	r1, #16
 800de7c:	482b      	ldr	r0, [pc, #172]	@ (800df2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800de7e:	f7f5 fe75 	bl	8003b6c <HAL_GPIO_ReadPin>
 800de82:	4603      	mov	r3, r0
 800de84:	2b01      	cmp	r3, #1
 800de86:	d10f      	bne.n	800dea8 <HAL_GPIO_EXTI_Callback+0x178>
                K[1] = 1;  // 按下标志 | Pressed flag
 800de88:	4b31      	ldr	r3, [pc, #196]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800de8a:	2201      	movs	r2, #1
 800de8c:	705a      	strb	r2, [r3, #1]
                cnt = (cnt == MAX_PAGE) ? MAX_PAGE : (cnt + 1);  // 页码加 1（上限 MAX_PAGE） | Increment page, max MAX_PAGE
 800de8e:	4b31      	ldr	r3, [pc, #196]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	2b05      	cmp	r3, #5
 800de94:	d004      	beq.n	800dea0 <HAL_GPIO_EXTI_Callback+0x170>
 800de96:	4b2f      	ldr	r3, [pc, #188]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	3301      	adds	r3, #1
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	e000      	b.n	800dea2 <HAL_GPIO_EXTI_Callback+0x172>
 800dea0:	2305      	movs	r3, #5
 800dea2:	4a2c      	ldr	r2, [pc, #176]	@ (800df54 <HAL_GPIO_EXTI_Callback+0x224>)
 800dea4:	7013      	strb	r3, [r2, #0]
            break;
 800dea6:	e03d      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                K[1] = 0;        // 释放标志 | Release flag
 800dea8:	4b29      	ldr	r3, [pc, #164]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800deaa:	2200      	movs	r2, #0
 800deac:	705a      	strb	r2, [r3, #1]
                OLED_Clear();    // 清屏 | Clear display
 800deae:	f7fd f8b1 	bl	800b014 <OLED_Clear>
                OLED_Update();   // 更新屏幕 | Update display
 800deb2:	f7fd f88f 	bl	800afd4 <OLED_Update>
            break;
 800deb6:	e035      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            if (HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin) == GPIO_PIN_SET) {
 800deb8:	2104      	movs	r1, #4
 800deba:	4827      	ldr	r0, [pc, #156]	@ (800df58 <HAL_GPIO_EXTI_Callback+0x228>)
 800debc:	f7f5 fe56 	bl	8003b6c <HAL_GPIO_ReadPin>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d103      	bne.n	800dece <HAL_GPIO_EXTI_Callback+0x19e>
                K[2] = 1;  // 按下标志 | Pressed flag
 800dec6:	4b22      	ldr	r3, [pc, #136]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800dec8:	2201      	movs	r2, #1
 800deca:	709a      	strb	r2, [r3, #2]
            break;
 800decc:	e029      	b.n	800df22 <HAL_GPIO_EXTI_Callback+0x1f2>
            } else if (HAL_GPIO_ReadPin(K3_GPIO_Port, K3_Pin) == GPIO_PIN_RESET) {
 800dece:	2104      	movs	r1, #4
 800ded0:	4821      	ldr	r0, [pc, #132]	@ (800df58 <HAL_GPIO_EXTI_Callback+0x228>)
 800ded2:	f7f5 fe4b 	bl	8003b6c <HAL_GPIO_ReadPin>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d122      	bne.n	800df22 <HAL_GPIO_EXTI_Callback+0x1f2>
                car.isBrake = (car.isBrake == 0) ? 1 : 0;  // 切换刹车 | Toggle brake
 800dedc:	4b14      	ldr	r3, [pc, #80]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800dede:	78db      	ldrb	r3, [r3, #3]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bf0c      	ite	eq
 800dee4:	2301      	moveq	r3, #1
 800dee6:	2300      	movne	r3, #0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	461a      	mov	r2, r3
 800deec:	4b10      	ldr	r3, [pc, #64]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800deee:	70da      	strb	r2, [r3, #3]
                K[2] = 0;  // 释放标志 | Release flag
 800def0:	4b17      	ldr	r3, [pc, #92]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800def2:	2200      	movs	r2, #0
 800def4:	709a      	strb	r2, [r3, #2]
            break;
 800def6:	e014      	b.n	800df22 <HAL_GPIO_EXTI_Callback+0x1f2>
            if (HAL_GPIO_ReadPin(K4_GPIO_Port, K4_Pin) == GPIO_PIN_SET) {
 800def8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800defc:	4817      	ldr	r0, [pc, #92]	@ (800df5c <HAL_GPIO_EXTI_Callback+0x22c>)
 800defe:	f7f5 fe35 	bl	8003b6c <HAL_GPIO_ReadPin>
 800df02:	4603      	mov	r3, r0
 800df04:	2b01      	cmp	r3, #1
 800df06:	d106      	bne.n	800df16 <HAL_GPIO_EXTI_Callback+0x1e6>
                K[3] = 1;                   // 按下标志 | Pressed flag
 800df08:	4b11      	ldr	r3, [pc, #68]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800df0a:	2201      	movs	r2, #1
 800df0c:	70da      	strb	r2, [r3, #3]
                car.targetStartLinearSpeed = 8;  // 重置起始速度 | Reset start speed
 800df0e:	4b08      	ldr	r3, [pc, #32]	@ (800df30 <HAL_GPIO_EXTI_Callback+0x200>)
 800df10:	2208      	movs	r2, #8
 800df12:	721a      	strb	r2, [r3, #8]
            break;
 800df14:	e006      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
                K[3] = 0;  // 释放标志 | Release flag
 800df16:	4b0e      	ldr	r3, [pc, #56]	@ (800df50 <HAL_GPIO_EXTI_Callback+0x220>)
 800df18:	2200      	movs	r2, #0
 800df1a:	70da      	strb	r2, [r3, #3]
            break;
 800df1c:	e002      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            break;
 800df1e:	bf00      	nop
 800df20:	e000      	b.n	800df24 <HAL_GPIO_EXTI_Callback+0x1f4>
            break;
 800df22:	bf00      	nop
    }
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	40020400 	.word	0x40020400
 800df30:	20004a70 	.word	0x20004a70
 800df34:	20000654 	.word	0x20000654
 800df38:	20004b40 	.word	0x20004b40
 800df3c:	20004b44 	.word	0x20004b44
 800df40:	20004b48 	.word	0x20004b48
 800df44:	20004b4c 	.word	0x20004b4c
 800df48:	44480000 	.word	0x44480000
 800df4c:	2000069c 	.word	0x2000069c
 800df50:	20004b38 	.word	0x20004b38
 800df54:	20004b3c 	.word	0x20004b3c
 800df58:	40020c00 	.word	0x40020c00
 800df5c:	40020800 	.word	0x40020800

0800df60 <newImu>:

/**
  * @brief   创建并初始化 IMU 实例 | Create and initialize IMU instance
  * @return  返回 IMU 结构体 | Returns IMU struct
  */
Imu newImu(void) {
 800df60:	b4b0      	push	{r4, r5, r7}
 800df62:	b08f      	sub	sp, #60	@ 0x3c
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
    Imu i;
    i.Enable   = Enable;    // 绑定启用函数 | Bind enable function
 800df68:	4b0a      	ldr	r3, [pc, #40]	@ (800df94 <newImu+0x34>)
 800df6a:	633b      	str	r3, [r7, #48]	@ 0x30
    i.Get_Data = Get_Data;  // 绑定数据获取函数 | Bind data retrieval function
 800df6c:	4b0a      	ldr	r3, [pc, #40]	@ (800df98 <newImu+0x38>)
 800df6e:	637b      	str	r3, [r7, #52]	@ 0x34
    return i;               // 返回实例 | Return instance
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	461d      	mov	r5, r3
 800df74:	f107 0408 	add.w	r4, r7, #8
 800df78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800df84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	373c      	adds	r7, #60	@ 0x3c
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bcb0      	pop	{r4, r5, r7}
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	0800df9d 	.word	0x0800df9d
 800df98:	0800dfbd 	.word	0x0800dfbd

0800df9c <Enable>:
/**
  * @brief   启用 IMU 并初始化 MPU6500 | Enable IMU and init MPU6500
  * @param   self  指向 IMU 实例指针 | Pointer to IMU instance
  * @return  返回初始化结果（0 成功） | Returns init status (0 = success)
  */
int Enable(Imu *self) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
    self->init_result = (uint8_t)MPU_6500_Init();  // 调用底层初始化 | Call low-level init
 800dfa4:	f7fc fca0 	bl	800a8e8 <MPU_6500_Init>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	701a      	strb	r2, [r3, #0]
    return self->init_result;                      // 返回状态 | Return status
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <Get_Data>:

/**
  * @brief   获取传感器姿态和原始数据 | Get sensor attitude and raw data
  * @param   self  指向 IMU 实例指针 | Pointer to IMU instance
  */
void Get_Data(Imu *self) {
 800dfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfbe:	b089      	sub	sp, #36	@ 0x24
 800dfc0:	af06      	add	r7, sp, #24
 800dfc2:	6078      	str	r0, [r7, #4]
    // 调用 DMP 获取俯仰、横滚、航向、加速度、陀螺仪数据
    // Call DMP to get pitch, roll, yaw, accel, and gyro data
    MPU6500_DMP_Get_Data(
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	1d1d      	adds	r5, r3, #4
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f103 0608 	add.w	r6, r3, #8
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 0c0c 	add.w	ip, r3, #12
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f103 0e10 	add.w	lr, r3, #16
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3314      	adds	r3, #20
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	3218      	adds	r2, #24
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	311c      	adds	r1, #28
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	3020      	adds	r0, #32
 800dfea:	687c      	ldr	r4, [r7, #4]
 800dfec:	3424      	adds	r4, #36	@ 0x24
 800dfee:	9404      	str	r4, [sp, #16]
 800dff0:	9003      	str	r0, [sp, #12]
 800dff2:	9102      	str	r1, [sp, #8]
 800dff4:	9201      	str	r2, [sp, #4]
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	4673      	mov	r3, lr
 800dffa:	4662      	mov	r2, ip
 800dffc:	4631      	mov	r1, r6
 800dffe:	4628      	mov	r0, r5
 800e000:	f7fc fcde 	bl	800a9c0 <MPU6500_DMP_Get_Data>
            &self->pitch, &self->roll, &self->yaw,
            &self->ax,    &self->ay,   &self->az,
            &self->gyrox, &self->gyroy,&self->gyroz
    );
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e00c <newMotor>:
/**
  * @brief   创建并初始化电机实例 | Create and initialize motor instance
  * @param   Init  电机初始化参数 | Motor initialization parameters
  * @return  返回 Motor 结构体 | Returns Motor struct
  */
Motor newMotor(Motor_InitTypeDef Init) {
 800e00c:	b084      	sub	sp, #16
 800e00e:	b5b0      	push	{r4, r5, r7, lr}
 800e010:	b08c      	sub	sp, #48	@ 0x30
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800e01a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Motor m;
    m.Init = Init;                   // 保存初始化配置 | store Init config
 800e01e:	f107 040c 	add.w	r4, r7, #12
 800e022:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 800e026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e02e:	e884 0003 	stmia.w	r4, {r0, r1}
    m.direction = FORWARD;           // 初始方向前进 | default direction FORWARD
 800e032:	2301      	movs	r3, #1
 800e034:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    m.setRPM = MOTOR_MIN_RPM;        // 初始转速最小 | default RPM = MOTOR_MIN_RPM
 800e038:	f04f 0300 	mov.w	r3, #0
 800e03c:	62bb      	str	r3, [r7, #40]	@ 0x28
    m.Move = Move;                   // 绑定 Move 函数 | bind Move function
 800e03e:	4b0c      	ldr	r3, [pc, #48]	@ (800e070 <newMotor+0x64>)
 800e040:	62fb      	str	r3, [r7, #44]	@ 0x2c

    HAL_TIM_PWM_Start(Init.htim, Init.Channel);  // 启动 PWM | start PWM on channel
 800e042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e046:	4611      	mov	r1, r2
 800e048:	4618      	mov	r0, r3
 800e04a:	f7f9 f813 	bl	8007074 <HAL_TIM_PWM_Start>

    return m;                        // 返回实例 | return instance
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	461d      	mov	r5, r3
 800e052:	f107 040c 	add.w	r4, r7, #12
 800e056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e05a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e05c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	602b      	str	r3, [r5, #0]
}
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	3730      	adds	r7, #48	@ 0x30
 800e066:	46bd      	mov	sp, r7
 800e068:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e06c:	b004      	add	sp, #16
 800e06e:	4770      	bx	lr
 800e070:	0800e075 	.word	0x0800e075

0800e074 <Move>:
  * @brief   控制电机动作 | Control motor action
  * @param   self    指向 Motor 实例 | Pointer to Motor instance
  * @param   isBrake 是否刹车 | Brake flag
  * @param   setRPM  目标 RPM，可正可负 | Target RPM (positive/negative)
  */
void Move(Motor *self, uint8_t isBrake, int32_t setRPM) {
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	460b      	mov	r3, r1
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	72fb      	strb	r3, [r7, #11]
    if (isBrake) {
 800e082:	7afb      	ldrb	r3, [r7, #11]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d013      	beq.n	800e0b0 <Move+0x3c>
        // 刹车：IN1、IN2 都高 | Brake: IN1/IN2 high
        HAL_GPIO_WritePin(self->Init.IN1_GPIOx, self->Init.IN1_GPIO_Pin, GPIO_PIN_SET);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6898      	ldr	r0, [r3, #8]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	899b      	ldrh	r3, [r3, #12]
 800e090:	2201      	movs	r2, #1
 800e092:	4619      	mov	r1, r3
 800e094:	f7f5 fd82 	bl	8003b9c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(self->Init.IN2_GPIOx, self->Init.IN2_GPIO_Pin, GPIO_PIN_SET);
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6918      	ldr	r0, [r3, #16]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	8a9b      	ldrh	r3, [r3, #20]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f7f5 fd7a 	bl	8003b9c <HAL_GPIO_WritePin>
        self->direction = BRAKE;     // 方向设为刹车 | set direction BRAKE
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	761a      	strb	r2, [r3, #24]
 800e0ae:	e03d      	b.n	800e12c <Move+0xb8>
    } else {
        if (setRPM > 0) {
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dd13      	ble.n	800e0de <Move+0x6a>
            // 正转：IN1 高、IN2 低 | Forward: IN1 high, IN2 low
            HAL_GPIO_WritePin(self->Init.IN1_GPIOx, self->Init.IN1_GPIO_Pin, GPIO_PIN_SET);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6898      	ldr	r0, [r3, #8]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	899b      	ldrh	r3, [r3, #12]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7f5 fd6b 	bl	8003b9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(self->Init.IN2_GPIOx, self->Init.IN2_GPIO_Pin, GPIO_PIN_RESET);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6918      	ldr	r0, [r3, #16]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	8a9b      	ldrh	r3, [r3, #20]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	f7f5 fd63 	bl	8003b9c <HAL_GPIO_WritePin>
            self->direction = FORWARD; // 设置方向前进 | set direction FORWARD
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2201      	movs	r2, #1
 800e0da:	761a      	strb	r2, [r3, #24]
 800e0dc:	e026      	b.n	800e12c <Move+0xb8>
        } else if (setRPM < 0) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	da13      	bge.n	800e10c <Move+0x98>
            // 反转：IN1 低、IN2 高 | Reverse: IN1 low, IN2 high
            HAL_GPIO_WritePin(self->Init.IN1_GPIOx, self->Init.IN1_GPIO_Pin, GPIO_PIN_RESET);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6898      	ldr	r0, [r3, #8]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	899b      	ldrh	r3, [r3, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	f7f5 fd54 	bl	8003b9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(self->Init.IN2_GPIOx, self->Init.IN2_GPIO_Pin, GPIO_PIN_SET);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6918      	ldr	r0, [r3, #16]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	8a9b      	ldrh	r3, [r3, #20]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	4619      	mov	r1, r3
 800e100:	f7f5 fd4c 	bl	8003b9c <HAL_GPIO_WritePin>
            self->direction = BACKWARD; // 设置方向后退 | set direction BACKWARD
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2202      	movs	r2, #2
 800e108:	761a      	strb	r2, [r3, #24]
 800e10a:	e00f      	b.n	800e12c <Move+0xb8>
        } else {
            // 停止：IN1、IN2 都低 | Stop: IN1/IN2 low
            HAL_GPIO_WritePin(self->Init.IN1_GPIOx, self->Init.IN1_GPIO_Pin, GPIO_PIN_RESET);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6898      	ldr	r0, [r3, #8]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	899b      	ldrh	r3, [r3, #12]
 800e114:	2200      	movs	r2, #0
 800e116:	4619      	mov	r1, r3
 800e118:	f7f5 fd40 	bl	8003b9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(self->Init.IN2_GPIOx, self->Init.IN2_GPIO_Pin, GPIO_PIN_RESET);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6918      	ldr	r0, [r3, #16]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	8a9b      	ldrh	r3, [r3, #20]
 800e124:	2200      	movs	r2, #0
 800e126:	4619      	mov	r1, r3
 800e128:	f7f5 fd38 	bl	8003b9c <HAL_GPIO_WritePin>
        }
    }

    self->setRPM = (float)setRPM;    // 更新目标转速 | update target RPM
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	ee07 3a90 	vmov	s15, r3
 800e132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	edc3 7a07 	vstr	s15, [r3, #28]

    __HAL_TIM_SET_COMPARE(self->Init.htim, self->Init.Channel, abs(setRPM));
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d109      	bne.n	800e158 <Move+0xe4>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e14a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	635a      	str	r2, [r3, #52]	@ 0x34
    // 设置 PWM 占空比 | set PWM duty = |RPM|
}
 800e156:	e027      	b.n	800e1a8 <Move+0x134>
    __HAL_TIM_SET_COMPARE(self->Init.htim, self->Init.Channel, abs(setRPM));
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	2b04      	cmp	r3, #4
 800e15e:	d10a      	bne.n	800e176 <Move+0x102>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800e166:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	460b      	mov	r3, r1
 800e172:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800e174:	e018      	b.n	800e1a8 <Move+0x134>
    __HAL_TIM_SET_COMPARE(self->Init.htim, self->Init.Channel, abs(setRPM));
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	2b08      	cmp	r3, #8
 800e17c:	d10a      	bne.n	800e194 <Move+0x120>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800e184:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	460b      	mov	r3, r1
 800e190:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800e192:	e009      	b.n	800e1a8 <Move+0x134>
    __HAL_TIM_SET_COMPARE(self->Init.htim, self->Init.Channel, abs(setRPM));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800e19a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800e1a8:	bf00      	nop
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <ADC_Start>:
uint32_t GetADC;                   // 读取的ADC值 | Converted ADC value

/**
  * @brief   启动ADC DMA连续转换 | Start ADC DMA continuous conversion
  */
void ADC_Start(void) {
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1,                  // ADC1外设句柄 | ADC1 handle
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	4903      	ldr	r1, [pc, #12]	@ (800e1c4 <ADC_Start+0x14>)
 800e1b8:	4803      	ldr	r0, [pc, #12]	@ (800e1c8 <ADC_Start+0x18>)
 800e1ba:	f7f4 fabd 	bl	8002738 <HAL_ADC_Start_DMA>
                      (uint32_t*)ADC_value,   // 数据缓存 | Data buffer
                      NUM_CHANNELS);          // 通道数量 | Number of channels
}
 800e1be:	bf00      	nop
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20004b50 	.word	0x20004b50
 800e1c8:	200000c8 	.word	0x200000c8

0800e1cc <HAL_ADC_ConvCpltCallback>:

/**
  * @brief   ADC DMA转换完成回调 | ADC DMA conversion complete callback
  * @param   hadc  ADC句柄 | ADC handle
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
    // 计算阈值：通道0值除20，并限幅在0~40 | Compute threshold: channel 0 /20, limit 0–40
    GetADC = (uint32_t)(ADC_value[0] / 20);
 800e1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800e210 <HAL_ADC_ConvCpltCallback+0x44>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a0e      	ldr	r2, [pc, #56]	@ (800e214 <HAL_ADC_ConvCpltCallback+0x48>)
 800e1da:	fba2 2303 	umull	r2, r3, r2, r3
 800e1de:	091b      	lsrs	r3, r3, #4
 800e1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e218 <HAL_ADC_ConvCpltCallback+0x4c>)
 800e1e2:	6013      	str	r3, [r2, #0]
    GetADC = LIMIT(GetADC, 0, 40);
 800e1e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e218 <HAL_ADC_ConvCpltCallback+0x4c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b28      	cmp	r3, #40	@ 0x28
 800e1ea:	bf28      	it	cs
 800e1ec:	2328      	movcs	r3, #40	@ 0x28
 800e1ee:	4a0a      	ldr	r2, [pc, #40]	@ (800e218 <HAL_ADC_ConvCpltCallback+0x4c>)
 800e1f0:	6013      	str	r3, [r2, #0]
    car.targetStartLinearSpeed = (int8_t)GetADC;  // 更新小车起始速度 | Update car start speed
 800e1f2:	4b09      	ldr	r3, [pc, #36]	@ (800e218 <HAL_ADC_ConvCpltCallback+0x4c>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	b25a      	sxtb	r2, r3
 800e1f8:	4b08      	ldr	r3, [pc, #32]	@ (800e21c <HAL_ADC_ConvCpltCallback+0x50>)
 800e1fa:	721a      	strb	r2, [r3, #8]

    // 重新启动ADC DMA转换 | Restart ADC DMA conversion
    HAL_ADC_Start_DMA(&hadc1,
 800e1fc:	2203      	movs	r2, #3
 800e1fe:	4904      	ldr	r1, [pc, #16]	@ (800e210 <HAL_ADC_ConvCpltCallback+0x44>)
 800e200:	4807      	ldr	r0, [pc, #28]	@ (800e220 <HAL_ADC_ConvCpltCallback+0x54>)
 800e202:	f7f4 fa99 	bl	8002738 <HAL_ADC_Start_DMA>
                      (uint32_t*)ADC_value,
                      NUM_CHANNELS);
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20004b50 	.word	0x20004b50
 800e214:	cccccccd 	.word	0xcccccccd
 800e218:	20004b5c 	.word	0x20004b5c
 800e21c:	20004a70 	.word	0x20004a70
 800e220:	200000c8 	.word	0x200000c8

0800e224 <UART_IdleCallback>:
/**
  * @brief   UART 空闲中断回调处理 | UART idle interrupt callback
  * @param   huart  触发空闲中断的 UART 句柄 | UART handle triggering idle interrupt
  * @note    通过 DMA 模式重新启动接收 | Restart DMA reception
  */
void UART_IdleCallback(UART_HandleTypeDef *huart) {
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a1e      	ldr	r2, [pc, #120]	@ (800e2ac <UART_IdleCallback+0x88>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d114      	bne.n	800e260 <UART_IdleCallback+0x3c>
        HAL_UART_DMAStop(huart);  // 停止 DMA 接收 | Stop DMA reception
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7f9 ff71 	bl	800811e <HAL_UART_DMAStop>

        uint16_t rx_len = huart->RxXferSize - huart->RxXferCount;  // 本次接收长度 | Received length this time
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e244:	b29b      	uxth	r3, r3
 800e246:	1ad3      	subs	r3, r2, r3
 800e248:	81bb      	strh	r3, [r7, #12]
        memset(rx_data_buffer2, 0, BUF_SIZE);  // 清空缓冲区 | Clear buffer
 800e24a:	2240      	movs	r2, #64	@ 0x40
 800e24c:	2100      	movs	r1, #0
 800e24e:	4818      	ldr	r0, [pc, #96]	@ (800e2b0 <UART_IdleCallback+0x8c>)
 800e250:	f000 fb0a 	bl	800e868 <memset>

        HAL_UART_Receive_DMA(&huart_pc, rx_data_buffer2, BUF_SIZE);  // 重启 DMA 接收 | Restart DMA reception
 800e254:	2240      	movs	r2, #64	@ 0x40
 800e256:	4916      	ldr	r1, [pc, #88]	@ (800e2b0 <UART_IdleCallback+0x8c>)
 800e258:	4816      	ldr	r0, [pc, #88]	@ (800e2b4 <UART_IdleCallback+0x90>)
 800e25a:	f7f9 ff3b 	bl	80080d4 <HAL_UART_Receive_DMA>

        memset(rx_data_buffer6, 0, BUF_SIZE);  // 清空缓冲区 | Clear buffer

        HAL_UART_Receive_DMA(&huart_bt, rx_data_buffer6, BUF_SIZE);  // 重启 DMA 接收 | Restart DMA reception
    }
}
 800e25e:	e020      	b.n	800e2a2 <UART_IdleCallback+0x7e>
    else if (huart->Instance == USART6) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a14      	ldr	r2, [pc, #80]	@ (800e2b8 <UART_IdleCallback+0x94>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d11b      	bne.n	800e2a2 <UART_IdleCallback+0x7e>
        HAL_UART_DMAStop(huart);  // 停止 DMA 接收 | Stop DMA reception
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7f9 ff57 	bl	800811e <HAL_UART_DMAStop>
        uint16_t rx_len = huart->RxXferSize - huart->RxXferCount;  // 本次接收长度 | Received length this time
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e278:	b29b      	uxth	r3, r3
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	81fb      	strh	r3, [r7, #14]
        if (!car.isObstacleDetected)  // 若无障碍，则更新命令 | If no obstacle, update command
 800e27e:	4b0f      	ldr	r3, [pc, #60]	@ (800e2bc <UART_IdleCallback+0x98>)
 800e280:	785b      	ldrb	r3, [r3, #1]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d103      	bne.n	800e28e <UART_IdleCallback+0x6a>
            car.cmd = rx_data_buffer6[0];
 800e286:	4b0e      	ldr	r3, [pc, #56]	@ (800e2c0 <UART_IdleCallback+0x9c>)
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	4b0c      	ldr	r3, [pc, #48]	@ (800e2bc <UART_IdleCallback+0x98>)
 800e28c:	741a      	strb	r2, [r3, #16]
        memset(rx_data_buffer6, 0, BUF_SIZE);  // 清空缓冲区 | Clear buffer
 800e28e:	2240      	movs	r2, #64	@ 0x40
 800e290:	2100      	movs	r1, #0
 800e292:	480b      	ldr	r0, [pc, #44]	@ (800e2c0 <UART_IdleCallback+0x9c>)
 800e294:	f000 fae8 	bl	800e868 <memset>
        HAL_UART_Receive_DMA(&huart_bt, rx_data_buffer6, BUF_SIZE);  // 重启 DMA 接收 | Restart DMA reception
 800e298:	2240      	movs	r2, #64	@ 0x40
 800e29a:	4909      	ldr	r1, [pc, #36]	@ (800e2c0 <UART_IdleCallback+0x9c>)
 800e29c:	4809      	ldr	r0, [pc, #36]	@ (800e2c4 <UART_IdleCallback+0xa0>)
 800e29e:	f7f9 ff19 	bl	80080d4 <HAL_UART_Receive_DMA>
}
 800e2a2:	bf00      	nop
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	40004400 	.word	0x40004400
 800e2b0:	20004b60 	.word	0x20004b60
 800e2b4:	200006e4 	.word	0x200006e4
 800e2b8:	40011400 	.word	0x40011400
 800e2bc:	20004a70 	.word	0x20004a70
 800e2c0:	20004ba0 	.word	0x20004ba0
 800e2c4:	2000072c 	.word	0x2000072c

0800e2c8 <USART2_IRQHandler>:

/**
  * @brief   USART2 中断服务程序 | USART2 IRQ handler
  * @note    检测 UART 空闲标志并调用回调 | Check UART IDLE flag and invoke callback
  */
void USART2_IRQHandler(void) {
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);  // 调用 HAL 库处理 | Call HAL handler
 800e2ce:	480e      	ldr	r0, [pc, #56]	@ (800e308 <USART2_IRQHandler+0x40>)
 800e2d0:	f7f9 ffa4 	bl	800821c <HAL_UART_IRQHandler>

    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {  // 空闲中断 | Idle interrupt
 800e2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e308 <USART2_IRQHandler+0x40>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d10d      	bne.n	800e2fe <USART2_IRQHandler+0x36>
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);             // 清除空闲标志 | Clear idle flag
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	607b      	str	r3, [r7, #4]
 800e2e6:	4b08      	ldr	r3, [pc, #32]	@ (800e308 <USART2_IRQHandler+0x40>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	607b      	str	r3, [r7, #4]
 800e2ee:	4b06      	ldr	r3, [pc, #24]	@ (800e308 <USART2_IRQHandler+0x40>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	607b      	str	r3, [r7, #4]
 800e2f6:	687b      	ldr	r3, [r7, #4]
        UART_IdleCallback(&huart2);                     // 调用空闲回调 | Invoke idle callback
 800e2f8:	4803      	ldr	r0, [pc, #12]	@ (800e308 <USART2_IRQHandler+0x40>)
 800e2fa:	f7ff ff93 	bl	800e224 <UART_IdleCallback>
    }
}
 800e2fe:	bf00      	nop
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	200006e4 	.word	0x200006e4

0800e30c <USART6_IRQHandler>:

/**
  * @brief   USART6 中断服务程序 | USART6 IRQ handler
  * @note    检测 UART 空闲标志并调用回调 | Check UART IDLE flag and invoke callback
  */
void USART6_IRQHandler(void) {
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart6);  // 调用 HAL 库处理 | Call HAL handler
 800e312:	480e      	ldr	r0, [pc, #56]	@ (800e34c <USART6_IRQHandler+0x40>)
 800e314:	f7f9 ff82 	bl	800821c <HAL_UART_IRQHandler>

    if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {  // 空闲中断 | Idle interrupt
 800e318:	4b0c      	ldr	r3, [pc, #48]	@ (800e34c <USART6_IRQHandler+0x40>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 0310 	and.w	r3, r3, #16
 800e322:	2b10      	cmp	r3, #16
 800e324:	d10d      	bne.n	800e342 <USART6_IRQHandler+0x36>
        __HAL_UART_CLEAR_IDLEFLAG(&huart6);             // 清除空闲标志 | Clear idle flag
 800e326:	2300      	movs	r3, #0
 800e328:	607b      	str	r3, [r7, #4]
 800e32a:	4b08      	ldr	r3, [pc, #32]	@ (800e34c <USART6_IRQHandler+0x40>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	607b      	str	r3, [r7, #4]
 800e332:	4b06      	ldr	r3, [pc, #24]	@ (800e34c <USART6_IRQHandler+0x40>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	607b      	str	r3, [r7, #4]
 800e33a:	687b      	ldr	r3, [r7, #4]
        UART_IdleCallback(&huart6);                     // 调用空闲回调 | Invoke idle callback
 800e33c:	4803      	ldr	r0, [pc, #12]	@ (800e34c <USART6_IRQHandler+0x40>)
 800e33e:	f7ff ff71 	bl	800e224 <UART_IdleCallback>
    }
}
 800e342:	bf00      	nop
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	2000072c 	.word	0x2000072c

0800e350 <delay_init>:

/**
  * @brief   初始化延时函数 | Initialize delay functions
  * @note    根据时基源计算微秒和毫秒因子 | Compute microsecond and millisecond factors based on timebase
  */
void delay_init(void) {
 800e350:	b480      	push	{r7}
 800e352:	af00      	add	r7, sp, #0
#if (!Timebase_Source_is_SysTick)
    fac_ms = 1000000;           // 假设定时器 1MHz | Assume timer runs at 1MHz
 800e354:	4b08      	ldr	r3, [pc, #32]	@ (800e378 <delay_init+0x28>)
 800e356:	4a09      	ldr	r2, [pc, #36]	@ (800e37c <delay_init+0x2c>)
 800e358:	601a      	str	r2, [r3, #0]
    fac_us = fac_ms / 1000;     // 计算微秒因子 | Compute microsecond factor
 800e35a:	4b07      	ldr	r3, [pc, #28]	@ (800e378 <delay_init+0x28>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a08      	ldr	r2, [pc, #32]	@ (800e380 <delay_init+0x30>)
 800e360:	fba2 2303 	umull	r2, r3, r2, r3
 800e364:	099b      	lsrs	r3, r3, #6
 800e366:	b29a      	uxth	r2, r3
 800e368:	4b06      	ldr	r3, [pc, #24]	@ (800e384 <delay_init+0x34>)
 800e36a:	801a      	strh	r2, [r3, #0]
#else
    fac_ms = SystemCoreClock / 1000;  // 根据系统时钟计算毫秒因子 | Compute millisecond factor
    fac_us = fac_ms / 1000;           // 计算微秒因子 | Compute microsecond factor
#endif
}
 800e36c:	bf00      	nop
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	20004be4 	.word	0x20004be4
 800e37c:	000f4240 	.word	0x000f4240
 800e380:	10624dd3 	.word	0x10624dd3
 800e384:	20004be0 	.word	0x20004be0

0800e388 <delay_us>:

/**
  * @brief   微秒延时 | Delay in microseconds
  * @param   nus  需要延时的微秒数 | Number of microseconds to delay
  */
void delay_us(uint32_t nus) {
 800e388:	b480      	push	{r7}
 800e38a:	b089      	sub	sp, #36	@ 0x24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
    uint32_t ticks = 0;   // 所需滴答数 | Required ticks
 800e390:	2300      	movs	r3, #0
 800e392:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;    // 上一次计数值 | Previous counter value
 800e394:	2300      	movs	r3, #0
 800e396:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;    // 当前计数值 | Current counter value
 800e398:	2300      	movs	r3, #0
 800e39a:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;    // 累计滴答数 | Accumulated ticks
 800e39c:	2300      	movs	r3, #0
 800e39e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;  // 自动重装载值 | Autoreload value
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60fb      	str	r3, [r7, #12]

    reload = Delay_GetAutoreload();      // 获取重装载值 | Get autoreload value
 800e3a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e414 <delay_us+0x8c>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3aa:	60fb      	str	r3, [r7, #12]
    ticks = nus * fac_us;                // 计算所需滴答数 | Calculate required ticks
 800e3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800e418 <delay_us+0x90>)
 800e3ae:	881b      	ldrh	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	fb02 f303 	mul.w	r3, r2, r3
 800e3b8:	617b      	str	r3, [r7, #20]
    told = Delay_GetCounter();           // 获取初始计数 | Get initial counter
 800e3ba:	4b16      	ldr	r3, [pc, #88]	@ (800e414 <delay_us+0x8c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c0:	61fb      	str	r3, [r7, #28]

    while (1) {
        tnow = Delay_GetCounter();       // 获取当前计数 | Get current counter
 800e3c2:	4b14      	ldr	r3, [pc, #80]	@ (800e414 <delay_us+0x8c>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3c8:	613b      	str	r3, [r7, #16]
        if (tnow != told) {              // 若计数变化 | If counter changed
 800e3ca:	693a      	ldr	r2, [r7, #16]
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d0f7      	beq.n	800e3c2 <delay_us+0x3a>
            if (tnow < told) {           // 处理计数回绕 | Handle overflow
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d206      	bcs.n	800e3e8 <delay_us+0x60>
                tcnt += told - tnow;
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	69ba      	ldr	r2, [r7, #24]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	61bb      	str	r3, [r7, #24]
 800e3e6:	e007      	b.n	800e3f8 <delay_us+0x70>
            } else {
                tcnt += reload - tnow + told;
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	1ad2      	subs	r2, r2, r3
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	69ba      	ldr	r2, [r7, #24]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;                 // 更新上次计数 | Update previous value
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks) break;    // 达到延时，退出 | Delay complete, exit
 800e3fc:	69ba      	ldr	r2, [r7, #24]
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	429a      	cmp	r2, r3
 800e402:	d200      	bcs.n	800e406 <delay_us+0x7e>
        tnow = Delay_GetCounter();       // 获取当前计数 | Get current counter
 800e404:	e7dd      	b.n	800e3c2 <delay_us+0x3a>
            if (tcnt >= ticks) break;    // 达到延时，退出 | Delay complete, exit
 800e406:	bf00      	nop
        }
    }
}
 800e408:	bf00      	nop
 800e40a:	3724      	adds	r7, #36	@ 0x24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	200004e8 	.word	0x200004e8
 800e418:	20004be0 	.word	0x20004be0

0800e41c <HAL_Delay>:

/**
  * @brief   重写 HAL_Delay（以与 FreeRTOS 兼容） | Override HAL_Delay (compatible with FreeRTOS)
  * @param   Delay  延时毫秒数 | Delay in milliseconds
  */
void HAL_Delay(uint32_t Delay) {
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick(); // 获取开始时刻 | Get start tick
 800e424:	f7f4 f938 	bl	8002698 <HAL_GetTick>
 800e428:	60f8      	str	r0, [r7, #12]
    uint32_t wait = Delay;              // 等待时长 | Wait duration
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	60bb      	str	r3, [r7, #8]
    // 若需要最小延时，可启用以下代码 | To enforce minimum delay, uncomment below
    // if (wait < HAL_MAX_DELAY) {
    //     wait += (uint32_t)(uwTickFreq);
    // }

    while ((HAL_GetTick() - tickstart) < wait) {
 800e42e:	bf00      	nop
 800e430:	f7f4 f932 	bl	8002698 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d8f7      	bhi.n	800e430 <HAL_Delay+0x14>
        // 空循环等待 | Busy-wait
    }
}
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <StartCarTask>:
/**
  * @brief   启动小车任务 | Start the car task
  * @param   argument 任务参数指针 | Pointer to task argument
  * @note    不断获取 IMU 数据并执行小车移动控制 | Continuously get IMU data and execute car movement control
  */
void StartCarTask(void const *argument) {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    car.balanceBias = MECHANICAL_BALANCE_BIAS;  // 设置平衡偏置 | Set balance bias
 800e454:	4b09      	ldr	r3, [pc, #36]	@ (800e47c <StartCarTask+0x30>)
 800e456:	4a0a      	ldr	r2, [pc, #40]	@ (800e480 <StartCarTask+0x34>)
 800e458:	60da      	str	r2, [r3, #12]

    while (1) {
        car.imu.Get_Data(&car.imu);    // 获取IMU数据 | Get IMU data
 800e45a:	4b08      	ldr	r3, [pc, #32]	@ (800e47c <StartCarTask+0x30>)
 800e45c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e460:	4808      	ldr	r0, [pc, #32]	@ (800e484 <StartCarTask+0x38>)
 800e462:	4798      	blx	r3
        car.CarMove(&car, 0);          // 调用移动函数（setSpeed参数未使用） | Call move function (setSpeed unused)
 800e464:	4b05      	ldr	r3, [pc, #20]	@ (800e47c <StartCarTask+0x30>)
 800e466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e46a:	2100      	movs	r1, #0
 800e46c:	4803      	ldr	r0, [pc, #12]	@ (800e47c <StartCarTask+0x30>)
 800e46e:	4798      	blx	r3
        osDelay(5);                    // 延时5ms | Delay 5ms
 800e470:	2005      	movs	r0, #5
 800e472:	f7fa ffd6 	bl	8009422 <osDelay>
        car.imu.Get_Data(&car.imu);    // 获取IMU数据 | Get IMU data
 800e476:	bf00      	nop
 800e478:	e7ef      	b.n	800e45a <StartCarTask+0xe>
 800e47a:	bf00      	nop
 800e47c:	20004a70 	.word	0x20004a70
 800e480:	c059999a 	.word	0xc059999a
 800e484:	20004af4 	.word	0x20004af4

0800e488 <StartMultiTask>:
/**
  * @brief   启动多任务 | Start multi-task
  * @param   argument 任务参数指针（未使用） | Task argument pointer (unused)
  * @note    周期性触发超声波测距 | Periodically trigger ultrasonic measurement
  */
void StartMultiTask(void const *argument) {
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
    while (1) {
        HC_trig();      // 触发超声波传感器 | Trigger ultrasonic sensor
 800e490:	f7ff fc16 	bl	800dcc0 <HC_trig>
        osDelay(100);   // 延时100ms | Delay 100ms
 800e494:	2064      	movs	r0, #100	@ 0x64
 800e496:	f7fa ffc4 	bl	8009422 <osDelay>
        HC_trig();      // 触发超声波传感器 | Trigger ultrasonic sensor
 800e49a:	bf00      	nop
 800e49c:	e7f8      	b.n	800e490 <StartMultiTask+0x8>
	...

0800e4a0 <ShowPages>:

/**
  * @brief   根据 cnt 显示不同页面内容 | Display different pages based on cnt
  * @note    使用 OLED_Printf 打印小车状态、PID 参数、IMU 数据等 | Use OLED_Printf to show car status, PID params, IMU data, etc.
  */
void ShowPages(void) {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af02      	add	r7, sp, #8
    switch (cnt) {
 800e4a6:	4bb4      	ldr	r3, [pc, #720]	@ (800e778 <ShowPages+0x2d8>)
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	2b04      	cmp	r3, #4
 800e4ac:	f200 8159 	bhi.w	800e762 <ShowPages+0x2c2>
 800e4b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b8 <ShowPages+0x18>)
 800e4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b6:	bf00      	nop
 800e4b8:	0800e4cd 	.word	0x0800e4cd
 800e4bc:	0800e581 	.word	0x0800e581
 800e4c0:	0800e63f 	.word	0x0800e63f
 800e4c4:	0800e67f 	.word	0x0800e67f
 800e4c8:	0800e6ed 	.word	0x0800e6ed
        case 0:
            // 标题栏居中显示 | Center title
            OLED_Printf((128 - 10 * 6) / 2, 0, OLED_6X8, "BalanceCar", car.imu.roll);
 800e4cc:	4bab      	ldr	r3, [pc, #684]	@ (800e77c <ShowPages+0x2dc>)
 800e4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f2 f838 	bl	8000548 <__aeabi_f2d>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	e9cd 2300 	strd	r2, r3, [sp]
 800e4e0:	4ba7      	ldr	r3, [pc, #668]	@ (800e780 <ShowPages+0x2e0>)
 800e4e2:	2206      	movs	r2, #6
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	2022      	movs	r0, #34	@ 0x22
 800e4e8:	f7fc ff50 	bl	800b38c <OLED_Printf>
            OLED_Printf((128 - 12 * 6) / 2, 1 * 8, OLED_6X8, "Car States");
 800e4ec:	4ba5      	ldr	r3, [pc, #660]	@ (800e784 <ShowPages+0x2e4>)
 800e4ee:	2206      	movs	r2, #6
 800e4f0:	2108      	movs	r1, #8
 800e4f2:	201c      	movs	r0, #28
 800e4f4:	f7fc ff4a 	bl	800b38c <OLED_Printf>
            // 显示线速度和角速度 | Show linear and angular speeds
            OLED_Printf(0, 2 * 8, OLED_6X8, "Linear Speed: %d", car.targetLinearSpeed);
 800e4f8:	4ba0      	ldr	r3, [pc, #640]	@ (800e77c <ShowPages+0x2dc>)
 800e4fa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4ba1      	ldr	r3, [pc, #644]	@ (800e788 <ShowPages+0x2e8>)
 800e502:	2206      	movs	r2, #6
 800e504:	2110      	movs	r1, #16
 800e506:	2000      	movs	r0, #0
 800e508:	f7fc ff40 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 3 * 8, OLED_6X8, "Angular Speed:   %d", car.targetAngularSpeed);
 800e50c:	4b9b      	ldr	r3, [pc, #620]	@ (800e77c <ShowPages+0x2dc>)
 800e50e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	4b9d      	ldr	r3, [pc, #628]	@ (800e78c <ShowPages+0x2ec>)
 800e516:	2206      	movs	r2, #6
 800e518:	2118      	movs	r1, #24
 800e51a:	2000      	movs	r0, #0
 800e51c:	f7fc ff36 	bl	800b38c <OLED_Printf>
            // 显示刹车状态 | Show brake status
            OLED_Printf(0, 4 * 8, OLED_6X8, "IsBrake: 	 %d", car.isBrake);
 800e520:	4b96      	ldr	r3, [pc, #600]	@ (800e77c <ShowPages+0x2dc>)
 800e522:	78db      	ldrb	r3, [r3, #3]
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	4b9a      	ldr	r3, [pc, #616]	@ (800e790 <ShowPages+0x2f0>)
 800e528:	2206      	movs	r2, #6
 800e52a:	2120      	movs	r1, #32
 800e52c:	2000      	movs	r0, #0
 800e52e:	f7fc ff2d 	bl	800b38c <OLED_Printf>
            // 显示电池电量示例 | Show battery example
            OLED_Printf(0, 5 * 8, OLED_6X8, "Battery: 	 %3.2f", 0.9f);
 800e532:	a38f      	add	r3, pc, #572	@ (adr r3, 800e770 <ShowPages+0x2d0>)
 800e534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e538:	e9cd 2300 	strd	r2, r3, [sp]
 800e53c:	4b95      	ldr	r3, [pc, #596]	@ (800e794 <ShowPages+0x2f4>)
 800e53e:	2206      	movs	r2, #6
 800e540:	2128      	movs	r1, #40	@ 0x28
 800e542:	2000      	movs	r0, #0
 800e544:	f7fc ff22 	bl	800b38c <OLED_Printf>
            // 显示蓝牙在线/离线 | Show BT online/offline
            if (car.isBluetoothConnected)
 800e548:	4b8c      	ldr	r3, [pc, #560]	@ (800e77c <ShowPages+0x2dc>)
 800e54a:	789b      	ldrb	r3, [r3, #2]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <ShowPages+0xbe>
                OLED_Printf(0, 6 * 8, OLED_6X8, "BT State: Online");
 800e550:	4b91      	ldr	r3, [pc, #580]	@ (800e798 <ShowPages+0x2f8>)
 800e552:	2206      	movs	r2, #6
 800e554:	2130      	movs	r1, #48	@ 0x30
 800e556:	2000      	movs	r0, #0
 800e558:	f7fc ff18 	bl	800b38c <OLED_Printf>
 800e55c:	e005      	b.n	800e56a <ShowPages+0xca>
            else
                OLED_Printf(0, 6 * 8, OLED_6X8, "BT State: Offline");
 800e55e:	4b8f      	ldr	r3, [pc, #572]	@ (800e79c <ShowPages+0x2fc>)
 800e560:	2206      	movs	r2, #6
 800e562:	2130      	movs	r1, #48	@ 0x30
 800e564:	2000      	movs	r0, #0
 800e566:	f7fc ff11 	bl	800b38c <OLED_Printf>
            // 显示起始速度 | Show initial speed
            OLED_Printf(0, 7 * 8, OLED_6X8, "Init_t_s: %d", car.targetStartLinearSpeed);
 800e56a:	4b84      	ldr	r3, [pc, #528]	@ (800e77c <ShowPages+0x2dc>)
 800e56c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	4b8b      	ldr	r3, [pc, #556]	@ (800e7a0 <ShowPages+0x300>)
 800e574:	2206      	movs	r2, #6
 800e576:	2138      	movs	r1, #56	@ 0x38
 800e578:	2000      	movs	r0, #0
 800e57a:	f7fc ff07 	bl	800b38c <OLED_Printf>
            break;
 800e57e:	e0f1      	b.n	800e764 <ShowPages+0x2c4>

        case 1:
            OLED_Printf((128 - 10 * 6) / 2, 0, OLED_6X8, "BalanceCar", car.imu.roll);
 800e580:	4b7e      	ldr	r3, [pc, #504]	@ (800e77c <ShowPages+0x2dc>)
 800e582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e586:	4618      	mov	r0, r3
 800e588:	f7f1 ffde 	bl	8000548 <__aeabi_f2d>
 800e58c:	4602      	mov	r2, r0
 800e58e:	460b      	mov	r3, r1
 800e590:	e9cd 2300 	strd	r2, r3, [sp]
 800e594:	4b7a      	ldr	r3, [pc, #488]	@ (800e780 <ShowPages+0x2e0>)
 800e596:	2206      	movs	r2, #6
 800e598:	2100      	movs	r1, #0
 800e59a:	2022      	movs	r0, #34	@ 0x22
 800e59c:	f7fc fef6 	bl	800b38c <OLED_Printf>
            OLED_Printf((128 - 13 * 6) / 2, 1 * 8, OLED_6X8, "PID Parameter");
 800e5a0:	4b80      	ldr	r3, [pc, #512]	@ (800e7a4 <ShowPages+0x304>)
 800e5a2:	2206      	movs	r2, #6
 800e5a4:	2108      	movs	r1, #8
 800e5a6:	2019      	movs	r0, #25
 800e5a8:	f7fc fef0 	bl	800b38c <OLED_Printf>
            // 显示直立环参数 | Show vertical loop params
            OLED_Printf(0, 2 * 8, OLED_6X8, "Vertical");
 800e5ac:	4b7e      	ldr	r3, [pc, #504]	@ (800e7a8 <ShowPages+0x308>)
 800e5ae:	2206      	movs	r2, #6
 800e5b0:	2110      	movs	r1, #16
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7fc feea 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 3 * 8, OLED_6X8, "Kp:%.1f", Vertical_Kp);
 800e5b8:	4b7c      	ldr	r3, [pc, #496]	@ (800e7ac <ShowPages+0x30c>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f1 ffc3 	bl	8000548 <__aeabi_f2d>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	e9cd 2300 	strd	r2, r3, [sp]
 800e5ca:	4b79      	ldr	r3, [pc, #484]	@ (800e7b0 <ShowPages+0x310>)
 800e5cc:	2206      	movs	r2, #6
 800e5ce:	2118      	movs	r1, #24
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	f7fc fedb 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 4 * 8, OLED_6X8, "KD:%.1f", Vertical_Kd);
 800e5d6:	4b77      	ldr	r3, [pc, #476]	@ (800e7b4 <ShowPages+0x314>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7f1 ffb4 	bl	8000548 <__aeabi_f2d>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	e9cd 2300 	strd	r2, r3, [sp]
 800e5e8:	4b73      	ldr	r3, [pc, #460]	@ (800e7b8 <ShowPages+0x318>)
 800e5ea:	2206      	movs	r2, #6
 800e5ec:	2120      	movs	r1, #32
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f7fc fecc 	bl	800b38c <OLED_Printf>
            // 显示速度环参数 | Show velocity loop params
            OLED_Printf(0, 5 * 8, OLED_6X8, "Velocity");
 800e5f4:	4b71      	ldr	r3, [pc, #452]	@ (800e7bc <ShowPages+0x31c>)
 800e5f6:	2206      	movs	r2, #6
 800e5f8:	2128      	movs	r1, #40	@ 0x28
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	f7fc fec6 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 6 * 8, OLED_6X8, "Kp:%.1f", Velocity_Kp);
 800e600:	4b6f      	ldr	r3, [pc, #444]	@ (800e7c0 <ShowPages+0x320>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4618      	mov	r0, r3
 800e606:	f7f1 ff9f 	bl	8000548 <__aeabi_f2d>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	e9cd 2300 	strd	r2, r3, [sp]
 800e612:	4b67      	ldr	r3, [pc, #412]	@ (800e7b0 <ShowPages+0x310>)
 800e614:	2206      	movs	r2, #6
 800e616:	2130      	movs	r1, #48	@ 0x30
 800e618:	2000      	movs	r0, #0
 800e61a:	f7fc feb7 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 7 * 8, OLED_6X8, "KD:%.3f", Velocity_Ki);
 800e61e:	4b69      	ldr	r3, [pc, #420]	@ (800e7c4 <ShowPages+0x324>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4618      	mov	r0, r3
 800e624:	f7f1 ff90 	bl	8000548 <__aeabi_f2d>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	e9cd 2300 	strd	r2, r3, [sp]
 800e630:	4b65      	ldr	r3, [pc, #404]	@ (800e7c8 <ShowPages+0x328>)
 800e632:	2206      	movs	r2, #6
 800e634:	2138      	movs	r1, #56	@ 0x38
 800e636:	2000      	movs	r0, #0
 800e638:	f7fc fea8 	bl	800b38c <OLED_Printf>
            break;
 800e63c:	e092      	b.n	800e764 <ShowPages+0x2c4>

        case 2:
            OLED_Printf((128 - 10 * 6) / 2, 0, OLED_6X8, "BalanceCar", car.imu.roll);
 800e63e:	4b4f      	ldr	r3, [pc, #316]	@ (800e77c <ShowPages+0x2dc>)
 800e640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e644:	4618      	mov	r0, r3
 800e646:	f7f1 ff7f 	bl	8000548 <__aeabi_f2d>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	e9cd 2300 	strd	r2, r3, [sp]
 800e652:	4b4b      	ldr	r3, [pc, #300]	@ (800e780 <ShowPages+0x2e0>)
 800e654:	2206      	movs	r2, #6
 800e656:	2100      	movs	r1, #0
 800e658:	2022      	movs	r0, #34	@ 0x22
 800e65a:	f7fc fe97 	bl	800b38c <OLED_Printf>
            OLED_Printf((128 - 8 * 6) / 2, 1 * 8, OLED_6X8, "Car cmd");
 800e65e:	4b5b      	ldr	r3, [pc, #364]	@ (800e7cc <ShowPages+0x32c>)
 800e660:	2206      	movs	r2, #6
 800e662:	2108      	movs	r1, #8
 800e664:	2028      	movs	r0, #40	@ 0x28
 800e666:	f7fc fe91 	bl	800b38c <OLED_Printf>
            // 显示当前命令 ID | Show current command ID
            OLED_Printf(0, 2 * 8, OLED_6X8, "CMD ID:  %d", car.cmd);
 800e66a:	4b44      	ldr	r3, [pc, #272]	@ (800e77c <ShowPages+0x2dc>)
 800e66c:	7c1b      	ldrb	r3, [r3, #16]
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	4b57      	ldr	r3, [pc, #348]	@ (800e7d0 <ShowPages+0x330>)
 800e672:	2206      	movs	r2, #6
 800e674:	2110      	movs	r1, #16
 800e676:	2000      	movs	r0, #0
 800e678:	f7fc fe88 	bl	800b38c <OLED_Printf>
            break;
 800e67c:	e072      	b.n	800e764 <ShowPages+0x2c4>

        case 3:
            OLED_Printf((128 - 10 * 6) / 2, 0, OLED_6X8, "BalanceCar", car.imu.roll);
 800e67e:	4b3f      	ldr	r3, [pc, #252]	@ (800e77c <ShowPages+0x2dc>)
 800e680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e684:	4618      	mov	r0, r3
 800e686:	f7f1 ff5f 	bl	8000548 <__aeabi_f2d>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	e9cd 2300 	strd	r2, r3, [sp]
 800e692:	4b3b      	ldr	r3, [pc, #236]	@ (800e780 <ShowPages+0x2e0>)
 800e694:	2206      	movs	r2, #6
 800e696:	2100      	movs	r1, #0
 800e698:	2022      	movs	r0, #34	@ 0x22
 800e69a:	f7fc fe77 	bl	800b38c <OLED_Printf>
            OLED_Printf((128 - 8 * 6) / 2, 1 * 8, OLED_6X8, "IMU Data");
 800e69e:	4b4d      	ldr	r3, [pc, #308]	@ (800e7d4 <ShowPages+0x334>)
 800e6a0:	2206      	movs	r2, #6
 800e6a2:	2108      	movs	r1, #8
 800e6a4:	2028      	movs	r0, #40	@ 0x28
 800e6a6:	f7fc fe71 	bl	800b38c <OLED_Printf>
            // 显示俯仰角和陀螺仪 y 轴角速度 | Show pitch and gyro-y
            OLED_Printf(0, 2 * 8, OLED_6X8, "Pitch:  %3.1f", car.imu.roll);
 800e6aa:	4b34      	ldr	r3, [pc, #208]	@ (800e77c <ShowPages+0x2dc>)
 800e6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7f1 ff49 	bl	8000548 <__aeabi_f2d>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	e9cd 2300 	strd	r2, r3, [sp]
 800e6be:	4b46      	ldr	r3, [pc, #280]	@ (800e7d8 <ShowPages+0x338>)
 800e6c0:	2206      	movs	r2, #6
 800e6c2:	2110      	movs	r1, #16
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	f7fc fe61 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 3 * 8, OLED_6X8, "Gyro-y: %3.1f", car.imu.gyrox);
 800e6ca:	4b2c      	ldr	r3, [pc, #176]	@ (800e77c <ShowPages+0x2dc>)
 800e6cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7f1 ff39 	bl	8000548 <__aeabi_f2d>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	e9cd 2300 	strd	r2, r3, [sp]
 800e6de:	4b3f      	ldr	r3, [pc, #252]	@ (800e7dc <ShowPages+0x33c>)
 800e6e0:	2206      	movs	r2, #6
 800e6e2:	2118      	movs	r1, #24
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	f7fc fe51 	bl	800b38c <OLED_Printf>
            break;
 800e6ea:	e03b      	b.n	800e764 <ShowPages+0x2c4>

        case 4:
            OLED_Printf((128 - 10 * 6) / 2, 0, OLED_6X8, "BalanceCar", car.imu.roll);
 800e6ec:	4b23      	ldr	r3, [pc, #140]	@ (800e77c <ShowPages+0x2dc>)
 800e6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7f1 ff28 	bl	8000548 <__aeabi_f2d>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	e9cd 2300 	strd	r2, r3, [sp]
 800e700:	4b1f      	ldr	r3, [pc, #124]	@ (800e780 <ShowPages+0x2e0>)
 800e702:	2206      	movs	r2, #6
 800e704:	2100      	movs	r1, #0
 800e706:	2022      	movs	r0, #34	@ 0x22
 800e708:	f7fc fe40 	bl	800b38c <OLED_Printf>
            OLED_Printf((128 - 12 * 6) / 2, 1 * 8, OLED_6X8, "Encoder Data");
 800e70c:	4b34      	ldr	r3, [pc, #208]	@ (800e7e0 <ShowPages+0x340>)
 800e70e:	2206      	movs	r2, #6
 800e710:	2108      	movs	r1, #8
 800e712:	201c      	movs	r0, #28
 800e714:	f7fc fe3a 	bl	800b38c <OLED_Printf>
            // 显示左右编码器 RPM | Show left/right encoder RPM
            OLED_Printf(0, 2 * 8, OLED_6X8, "Encoder RPM");
 800e718:	4b32      	ldr	r3, [pc, #200]	@ (800e7e4 <ShowPages+0x344>)
 800e71a:	2206      	movs	r2, #6
 800e71c:	2110      	movs	r1, #16
 800e71e:	2000      	movs	r0, #0
 800e720:	f7fc fe34 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 3 * 8, OLED_6X8, "Left:   %3.1f", car.encoder_l.rpm);
 800e724:	4b15      	ldr	r3, [pc, #84]	@ (800e77c <ShowPages+0x2dc>)
 800e726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e728:	4618      	mov	r0, r3
 800e72a:	f7f1 ff0d 	bl	8000548 <__aeabi_f2d>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	e9cd 2300 	strd	r2, r3, [sp]
 800e736:	4b2c      	ldr	r3, [pc, #176]	@ (800e7e8 <ShowPages+0x348>)
 800e738:	2206      	movs	r2, #6
 800e73a:	2118      	movs	r1, #24
 800e73c:	2000      	movs	r0, #0
 800e73e:	f7fc fe25 	bl	800b38c <OLED_Printf>
            OLED_Printf(0, 4 * 8, OLED_6X8, "Right:  %3.1f", car.encoder_r.rpm);
 800e742:	4b0e      	ldr	r3, [pc, #56]	@ (800e77c <ShowPages+0x2dc>)
 800e744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e746:	4618      	mov	r0, r3
 800e748:	f7f1 fefe 	bl	8000548 <__aeabi_f2d>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	e9cd 2300 	strd	r2, r3, [sp]
 800e754:	4b25      	ldr	r3, [pc, #148]	@ (800e7ec <ShowPages+0x34c>)
 800e756:	2206      	movs	r2, #6
 800e758:	2120      	movs	r1, #32
 800e75a:	2000      	movs	r0, #0
 800e75c:	f7fc fe16 	bl	800b38c <OLED_Printf>
            break;
 800e760:	e000      	b.n	800e764 <ShowPages+0x2c4>

        default:
            break;
 800e762:	bf00      	nop
    }
    OLED_Update();  // 刷新 OLED 显示 | Refresh OLED display
 800e764:	f7fc fc36 	bl	800afd4 <OLED_Update>
}
 800e768:	bf00      	nop
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	c0000000 	.word	0xc0000000
 800e774:	3feccccc 	.word	0x3feccccc
 800e778:	20004b3c 	.word	0x20004b3c
 800e77c:	20004a70 	.word	0x20004a70
 800e780:	0800fda0 	.word	0x0800fda0
 800e784:	0800fdac 	.word	0x0800fdac
 800e788:	0800fdb8 	.word	0x0800fdb8
 800e78c:	0800fdcc 	.word	0x0800fdcc
 800e790:	0800fde0 	.word	0x0800fde0
 800e794:	0800fdf0 	.word	0x0800fdf0
 800e798:	0800fe04 	.word	0x0800fe04
 800e79c:	0800fe18 	.word	0x0800fe18
 800e7a0:	0800fe2c 	.word	0x0800fe2c
 800e7a4:	0800fe3c 	.word	0x0800fe3c
 800e7a8:	0800fe4c 	.word	0x0800fe4c
 800e7ac:	20000048 	.word	0x20000048
 800e7b0:	0800fe58 	.word	0x0800fe58
 800e7b4:	2000004c 	.word	0x2000004c
 800e7b8:	0800fe60 	.word	0x0800fe60
 800e7bc:	0800fe68 	.word	0x0800fe68
 800e7c0:	20000050 	.word	0x20000050
 800e7c4:	20000054 	.word	0x20000054
 800e7c8:	0800fe74 	.word	0x0800fe74
 800e7cc:	0800fe7c 	.word	0x0800fe7c
 800e7d0:	0800fe84 	.word	0x0800fe84
 800e7d4:	0800fe90 	.word	0x0800fe90
 800e7d8:	0800fe9c 	.word	0x0800fe9c
 800e7dc:	0800feac 	.word	0x0800feac
 800e7e0:	0800febc 	.word	0x0800febc
 800e7e4:	0800fecc 	.word	0x0800fecc
 800e7e8:	0800fed8 	.word	0x0800fed8
 800e7ec:	0800fee8 	.word	0x0800fee8

0800e7f0 <StartOledTask>:
/**
  * @brief   OLED 任务入口 | OLED task entry
  * @param   arguments 任务参数（未使用） | Task arguments (unused)
  * @note    周期性调用 ShowPages 并延时 | Periodically call ShowPages and delay
  */
void StartOledTask(void const *arguments) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
    while (1) {
        ShowPages();      // 显示当前页面 | Display the current page
 800e7f8:	f7ff fe52 	bl	800e4a0 <ShowPages>
        osDelay(100);     // 延时 100ms | Delay 100ms
 800e7fc:	2064      	movs	r0, #100	@ 0x64
 800e7fe:	f7fa fe10 	bl	8009422 <osDelay>
        ShowPages();      // 显示当前页面 | Display the current page
 800e802:	bf00      	nop
 800e804:	e7f8      	b.n	800e7f8 <StartOledTask+0x8>
	...

0800e808 <_vsiprintf_r>:
 800e808:	b510      	push	{r4, lr}
 800e80a:	b09a      	sub	sp, #104	@ 0x68
 800e80c:	2400      	movs	r4, #0
 800e80e:	9100      	str	r1, [sp, #0]
 800e810:	9104      	str	r1, [sp, #16]
 800e812:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e816:	9105      	str	r1, [sp, #20]
 800e818:	9102      	str	r1, [sp, #8]
 800e81a:	4905      	ldr	r1, [pc, #20]	@ (800e830 <_vsiprintf_r+0x28>)
 800e81c:	9103      	str	r1, [sp, #12]
 800e81e:	4669      	mov	r1, sp
 800e820:	9419      	str	r4, [sp, #100]	@ 0x64
 800e822:	f000 f9b7 	bl	800eb94 <_svfiprintf_r>
 800e826:	9b00      	ldr	r3, [sp, #0]
 800e828:	701c      	strb	r4, [r3, #0]
 800e82a:	b01a      	add	sp, #104	@ 0x68
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	bf00      	nop
 800e830:	ffff0208 	.word	0xffff0208

0800e834 <vsiprintf>:
 800e834:	4613      	mov	r3, r2
 800e836:	460a      	mov	r2, r1
 800e838:	4601      	mov	r1, r0
 800e83a:	4802      	ldr	r0, [pc, #8]	@ (800e844 <vsiprintf+0x10>)
 800e83c:	6800      	ldr	r0, [r0, #0]
 800e83e:	f7ff bfe3 	b.w	800e808 <_vsiprintf_r>
 800e842:	bf00      	nop
 800e844:	2000005c 	.word	0x2000005c

0800e848 <memcmp>:
 800e848:	b510      	push	{r4, lr}
 800e84a:	3901      	subs	r1, #1
 800e84c:	4402      	add	r2, r0
 800e84e:	4290      	cmp	r0, r2
 800e850:	d101      	bne.n	800e856 <memcmp+0xe>
 800e852:	2000      	movs	r0, #0
 800e854:	e005      	b.n	800e862 <memcmp+0x1a>
 800e856:	7803      	ldrb	r3, [r0, #0]
 800e858:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	d001      	beq.n	800e864 <memcmp+0x1c>
 800e860:	1b18      	subs	r0, r3, r4
 800e862:	bd10      	pop	{r4, pc}
 800e864:	3001      	adds	r0, #1
 800e866:	e7f2      	b.n	800e84e <memcmp+0x6>

0800e868 <memset>:
 800e868:	4402      	add	r2, r0
 800e86a:	4603      	mov	r3, r0
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d100      	bne.n	800e872 <memset+0xa>
 800e870:	4770      	bx	lr
 800e872:	f803 1b01 	strb.w	r1, [r3], #1
 800e876:	e7f9      	b.n	800e86c <memset+0x4>

0800e878 <__errno>:
 800e878:	4b01      	ldr	r3, [pc, #4]	@ (800e880 <__errno+0x8>)
 800e87a:	6818      	ldr	r0, [r3, #0]
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	2000005c 	.word	0x2000005c

0800e884 <__libc_init_array>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	4d0d      	ldr	r5, [pc, #52]	@ (800e8bc <__libc_init_array+0x38>)
 800e888:	4c0d      	ldr	r4, [pc, #52]	@ (800e8c0 <__libc_init_array+0x3c>)
 800e88a:	1b64      	subs	r4, r4, r5
 800e88c:	10a4      	asrs	r4, r4, #2
 800e88e:	2600      	movs	r6, #0
 800e890:	42a6      	cmp	r6, r4
 800e892:	d109      	bne.n	800e8a8 <__libc_init_array+0x24>
 800e894:	4d0b      	ldr	r5, [pc, #44]	@ (800e8c4 <__libc_init_array+0x40>)
 800e896:	4c0c      	ldr	r4, [pc, #48]	@ (800e8c8 <__libc_init_array+0x44>)
 800e898:	f001 f9e4 	bl	800fc64 <_init>
 800e89c:	1b64      	subs	r4, r4, r5
 800e89e:	10a4      	asrs	r4, r4, #2
 800e8a0:	2600      	movs	r6, #0
 800e8a2:	42a6      	cmp	r6, r4
 800e8a4:	d105      	bne.n	800e8b2 <__libc_init_array+0x2e>
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8ac:	4798      	blx	r3
 800e8ae:	3601      	adds	r6, #1
 800e8b0:	e7ee      	b.n	800e890 <__libc_init_array+0xc>
 800e8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b6:	4798      	blx	r3
 800e8b8:	3601      	adds	r6, #1
 800e8ba:	e7f2      	b.n	800e8a2 <__libc_init_array+0x1e>
 800e8bc:	08011458 	.word	0x08011458
 800e8c0:	08011458 	.word	0x08011458
 800e8c4:	08011458 	.word	0x08011458
 800e8c8:	0801145c 	.word	0x0801145c

0800e8cc <__retarget_lock_acquire_recursive>:
 800e8cc:	4770      	bx	lr

0800e8ce <__retarget_lock_release_recursive>:
 800e8ce:	4770      	bx	lr

0800e8d0 <memcpy>:
 800e8d0:	440a      	add	r2, r1
 800e8d2:	4291      	cmp	r1, r2
 800e8d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8d8:	d100      	bne.n	800e8dc <memcpy+0xc>
 800e8da:	4770      	bx	lr
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8e6:	4291      	cmp	r1, r2
 800e8e8:	d1f9      	bne.n	800e8de <memcpy+0xe>
 800e8ea:	bd10      	pop	{r4, pc}

0800e8ec <_free_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	2900      	cmp	r1, #0
 800e8f2:	d041      	beq.n	800e978 <_free_r+0x8c>
 800e8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f8:	1f0c      	subs	r4, r1, #4
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	bfb8      	it	lt
 800e8fe:	18e4      	addlt	r4, r4, r3
 800e900:	f000 f8e0 	bl	800eac4 <__malloc_lock>
 800e904:	4a1d      	ldr	r2, [pc, #116]	@ (800e97c <_free_r+0x90>)
 800e906:	6813      	ldr	r3, [r2, #0]
 800e908:	b933      	cbnz	r3, 800e918 <_free_r+0x2c>
 800e90a:	6063      	str	r3, [r4, #4]
 800e90c:	6014      	str	r4, [r2, #0]
 800e90e:	4628      	mov	r0, r5
 800e910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e914:	f000 b8dc 	b.w	800ead0 <__malloc_unlock>
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d908      	bls.n	800e92e <_free_r+0x42>
 800e91c:	6820      	ldr	r0, [r4, #0]
 800e91e:	1821      	adds	r1, r4, r0
 800e920:	428b      	cmp	r3, r1
 800e922:	bf01      	itttt	eq
 800e924:	6819      	ldreq	r1, [r3, #0]
 800e926:	685b      	ldreq	r3, [r3, #4]
 800e928:	1809      	addeq	r1, r1, r0
 800e92a:	6021      	streq	r1, [r4, #0]
 800e92c:	e7ed      	b.n	800e90a <_free_r+0x1e>
 800e92e:	461a      	mov	r2, r3
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	b10b      	cbz	r3, 800e938 <_free_r+0x4c>
 800e934:	42a3      	cmp	r3, r4
 800e936:	d9fa      	bls.n	800e92e <_free_r+0x42>
 800e938:	6811      	ldr	r1, [r2, #0]
 800e93a:	1850      	adds	r0, r2, r1
 800e93c:	42a0      	cmp	r0, r4
 800e93e:	d10b      	bne.n	800e958 <_free_r+0x6c>
 800e940:	6820      	ldr	r0, [r4, #0]
 800e942:	4401      	add	r1, r0
 800e944:	1850      	adds	r0, r2, r1
 800e946:	4283      	cmp	r3, r0
 800e948:	6011      	str	r1, [r2, #0]
 800e94a:	d1e0      	bne.n	800e90e <_free_r+0x22>
 800e94c:	6818      	ldr	r0, [r3, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	6053      	str	r3, [r2, #4]
 800e952:	4408      	add	r0, r1
 800e954:	6010      	str	r0, [r2, #0]
 800e956:	e7da      	b.n	800e90e <_free_r+0x22>
 800e958:	d902      	bls.n	800e960 <_free_r+0x74>
 800e95a:	230c      	movs	r3, #12
 800e95c:	602b      	str	r3, [r5, #0]
 800e95e:	e7d6      	b.n	800e90e <_free_r+0x22>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	1821      	adds	r1, r4, r0
 800e964:	428b      	cmp	r3, r1
 800e966:	bf04      	itt	eq
 800e968:	6819      	ldreq	r1, [r3, #0]
 800e96a:	685b      	ldreq	r3, [r3, #4]
 800e96c:	6063      	str	r3, [r4, #4]
 800e96e:	bf04      	itt	eq
 800e970:	1809      	addeq	r1, r1, r0
 800e972:	6021      	streq	r1, [r4, #0]
 800e974:	6054      	str	r4, [r2, #4]
 800e976:	e7ca      	b.n	800e90e <_free_r+0x22>
 800e978:	bd38      	pop	{r3, r4, r5, pc}
 800e97a:	bf00      	nop
 800e97c:	20004d2c 	.word	0x20004d2c

0800e980 <sbrk_aligned>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	4e0f      	ldr	r6, [pc, #60]	@ (800e9c0 <sbrk_aligned+0x40>)
 800e984:	460c      	mov	r4, r1
 800e986:	6831      	ldr	r1, [r6, #0]
 800e988:	4605      	mov	r5, r0
 800e98a:	b911      	cbnz	r1, 800e992 <sbrk_aligned+0x12>
 800e98c:	f000 fba4 	bl	800f0d8 <_sbrk_r>
 800e990:	6030      	str	r0, [r6, #0]
 800e992:	4621      	mov	r1, r4
 800e994:	4628      	mov	r0, r5
 800e996:	f000 fb9f 	bl	800f0d8 <_sbrk_r>
 800e99a:	1c43      	adds	r3, r0, #1
 800e99c:	d103      	bne.n	800e9a6 <sbrk_aligned+0x26>
 800e99e:	f04f 34ff 	mov.w	r4, #4294967295
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}
 800e9a6:	1cc4      	adds	r4, r0, #3
 800e9a8:	f024 0403 	bic.w	r4, r4, #3
 800e9ac:	42a0      	cmp	r0, r4
 800e9ae:	d0f8      	beq.n	800e9a2 <sbrk_aligned+0x22>
 800e9b0:	1a21      	subs	r1, r4, r0
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 fb90 	bl	800f0d8 <_sbrk_r>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d1f2      	bne.n	800e9a2 <sbrk_aligned+0x22>
 800e9bc:	e7ef      	b.n	800e99e <sbrk_aligned+0x1e>
 800e9be:	bf00      	nop
 800e9c0:	20004d28 	.word	0x20004d28

0800e9c4 <_malloc_r>:
 800e9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9c8:	1ccd      	adds	r5, r1, #3
 800e9ca:	f025 0503 	bic.w	r5, r5, #3
 800e9ce:	3508      	adds	r5, #8
 800e9d0:	2d0c      	cmp	r5, #12
 800e9d2:	bf38      	it	cc
 800e9d4:	250c      	movcc	r5, #12
 800e9d6:	2d00      	cmp	r5, #0
 800e9d8:	4606      	mov	r6, r0
 800e9da:	db01      	blt.n	800e9e0 <_malloc_r+0x1c>
 800e9dc:	42a9      	cmp	r1, r5
 800e9de:	d904      	bls.n	800e9ea <_malloc_r+0x26>
 800e9e0:	230c      	movs	r3, #12
 800e9e2:	6033      	str	r3, [r6, #0]
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eac0 <_malloc_r+0xfc>
 800e9ee:	f000 f869 	bl	800eac4 <__malloc_lock>
 800e9f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e9f6:	461c      	mov	r4, r3
 800e9f8:	bb44      	cbnz	r4, 800ea4c <_malloc_r+0x88>
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7ff ffbf 	bl	800e980 <sbrk_aligned>
 800ea02:	1c43      	adds	r3, r0, #1
 800ea04:	4604      	mov	r4, r0
 800ea06:	d158      	bne.n	800eaba <_malloc_r+0xf6>
 800ea08:	f8d8 4000 	ldr.w	r4, [r8]
 800ea0c:	4627      	mov	r7, r4
 800ea0e:	2f00      	cmp	r7, #0
 800ea10:	d143      	bne.n	800ea9a <_malloc_r+0xd6>
 800ea12:	2c00      	cmp	r4, #0
 800ea14:	d04b      	beq.n	800eaae <_malloc_r+0xea>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	4639      	mov	r1, r7
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	eb04 0903 	add.w	r9, r4, r3
 800ea20:	f000 fb5a 	bl	800f0d8 <_sbrk_r>
 800ea24:	4581      	cmp	r9, r0
 800ea26:	d142      	bne.n	800eaae <_malloc_r+0xea>
 800ea28:	6821      	ldr	r1, [r4, #0]
 800ea2a:	1a6d      	subs	r5, r5, r1
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	4630      	mov	r0, r6
 800ea30:	f7ff ffa6 	bl	800e980 <sbrk_aligned>
 800ea34:	3001      	adds	r0, #1
 800ea36:	d03a      	beq.n	800eaae <_malloc_r+0xea>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	442b      	add	r3, r5
 800ea3c:	6023      	str	r3, [r4, #0]
 800ea3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea42:	685a      	ldr	r2, [r3, #4]
 800ea44:	bb62      	cbnz	r2, 800eaa0 <_malloc_r+0xdc>
 800ea46:	f8c8 7000 	str.w	r7, [r8]
 800ea4a:	e00f      	b.n	800ea6c <_malloc_r+0xa8>
 800ea4c:	6822      	ldr	r2, [r4, #0]
 800ea4e:	1b52      	subs	r2, r2, r5
 800ea50:	d420      	bmi.n	800ea94 <_malloc_r+0xd0>
 800ea52:	2a0b      	cmp	r2, #11
 800ea54:	d917      	bls.n	800ea86 <_malloc_r+0xc2>
 800ea56:	1961      	adds	r1, r4, r5
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	6025      	str	r5, [r4, #0]
 800ea5c:	bf18      	it	ne
 800ea5e:	6059      	strne	r1, [r3, #4]
 800ea60:	6863      	ldr	r3, [r4, #4]
 800ea62:	bf08      	it	eq
 800ea64:	f8c8 1000 	streq.w	r1, [r8]
 800ea68:	5162      	str	r2, [r4, r5]
 800ea6a:	604b      	str	r3, [r1, #4]
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	f000 f82f 	bl	800ead0 <__malloc_unlock>
 800ea72:	f104 000b 	add.w	r0, r4, #11
 800ea76:	1d23      	adds	r3, r4, #4
 800ea78:	f020 0007 	bic.w	r0, r0, #7
 800ea7c:	1ac2      	subs	r2, r0, r3
 800ea7e:	bf1c      	itt	ne
 800ea80:	1a1b      	subne	r3, r3, r0
 800ea82:	50a3      	strne	r3, [r4, r2]
 800ea84:	e7af      	b.n	800e9e6 <_malloc_r+0x22>
 800ea86:	6862      	ldr	r2, [r4, #4]
 800ea88:	42a3      	cmp	r3, r4
 800ea8a:	bf0c      	ite	eq
 800ea8c:	f8c8 2000 	streq.w	r2, [r8]
 800ea90:	605a      	strne	r2, [r3, #4]
 800ea92:	e7eb      	b.n	800ea6c <_malloc_r+0xa8>
 800ea94:	4623      	mov	r3, r4
 800ea96:	6864      	ldr	r4, [r4, #4]
 800ea98:	e7ae      	b.n	800e9f8 <_malloc_r+0x34>
 800ea9a:	463c      	mov	r4, r7
 800ea9c:	687f      	ldr	r7, [r7, #4]
 800ea9e:	e7b6      	b.n	800ea0e <_malloc_r+0x4a>
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	42a3      	cmp	r3, r4
 800eaa6:	d1fb      	bne.n	800eaa0 <_malloc_r+0xdc>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	6053      	str	r3, [r2, #4]
 800eaac:	e7de      	b.n	800ea6c <_malloc_r+0xa8>
 800eaae:	230c      	movs	r3, #12
 800eab0:	6033      	str	r3, [r6, #0]
 800eab2:	4630      	mov	r0, r6
 800eab4:	f000 f80c 	bl	800ead0 <__malloc_unlock>
 800eab8:	e794      	b.n	800e9e4 <_malloc_r+0x20>
 800eaba:	6005      	str	r5, [r0, #0]
 800eabc:	e7d6      	b.n	800ea6c <_malloc_r+0xa8>
 800eabe:	bf00      	nop
 800eac0:	20004d2c 	.word	0x20004d2c

0800eac4 <__malloc_lock>:
 800eac4:	4801      	ldr	r0, [pc, #4]	@ (800eacc <__malloc_lock+0x8>)
 800eac6:	f7ff bf01 	b.w	800e8cc <__retarget_lock_acquire_recursive>
 800eaca:	bf00      	nop
 800eacc:	20004d24 	.word	0x20004d24

0800ead0 <__malloc_unlock>:
 800ead0:	4801      	ldr	r0, [pc, #4]	@ (800ead8 <__malloc_unlock+0x8>)
 800ead2:	f7ff befc 	b.w	800e8ce <__retarget_lock_release_recursive>
 800ead6:	bf00      	nop
 800ead8:	20004d24 	.word	0x20004d24

0800eadc <__ssputs_r>:
 800eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	688e      	ldr	r6, [r1, #8]
 800eae2:	461f      	mov	r7, r3
 800eae4:	42be      	cmp	r6, r7
 800eae6:	680b      	ldr	r3, [r1, #0]
 800eae8:	4682      	mov	sl, r0
 800eaea:	460c      	mov	r4, r1
 800eaec:	4690      	mov	r8, r2
 800eaee:	d82d      	bhi.n	800eb4c <__ssputs_r+0x70>
 800eaf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eaf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eaf8:	d026      	beq.n	800eb48 <__ssputs_r+0x6c>
 800eafa:	6965      	ldr	r5, [r4, #20]
 800eafc:	6909      	ldr	r1, [r1, #16]
 800eafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb02:	eba3 0901 	sub.w	r9, r3, r1
 800eb06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb0a:	1c7b      	adds	r3, r7, #1
 800eb0c:	444b      	add	r3, r9
 800eb0e:	106d      	asrs	r5, r5, #1
 800eb10:	429d      	cmp	r5, r3
 800eb12:	bf38      	it	cc
 800eb14:	461d      	movcc	r5, r3
 800eb16:	0553      	lsls	r3, r2, #21
 800eb18:	d527      	bpl.n	800eb6a <__ssputs_r+0x8e>
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	f7ff ff52 	bl	800e9c4 <_malloc_r>
 800eb20:	4606      	mov	r6, r0
 800eb22:	b360      	cbz	r0, 800eb7e <__ssputs_r+0xa2>
 800eb24:	6921      	ldr	r1, [r4, #16]
 800eb26:	464a      	mov	r2, r9
 800eb28:	f7ff fed2 	bl	800e8d0 <memcpy>
 800eb2c:	89a3      	ldrh	r3, [r4, #12]
 800eb2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb36:	81a3      	strh	r3, [r4, #12]
 800eb38:	6126      	str	r6, [r4, #16]
 800eb3a:	6165      	str	r5, [r4, #20]
 800eb3c:	444e      	add	r6, r9
 800eb3e:	eba5 0509 	sub.w	r5, r5, r9
 800eb42:	6026      	str	r6, [r4, #0]
 800eb44:	60a5      	str	r5, [r4, #8]
 800eb46:	463e      	mov	r6, r7
 800eb48:	42be      	cmp	r6, r7
 800eb4a:	d900      	bls.n	800eb4e <__ssputs_r+0x72>
 800eb4c:	463e      	mov	r6, r7
 800eb4e:	6820      	ldr	r0, [r4, #0]
 800eb50:	4632      	mov	r2, r6
 800eb52:	4641      	mov	r1, r8
 800eb54:	f000 faa6 	bl	800f0a4 <memmove>
 800eb58:	68a3      	ldr	r3, [r4, #8]
 800eb5a:	1b9b      	subs	r3, r3, r6
 800eb5c:	60a3      	str	r3, [r4, #8]
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	4433      	add	r3, r6
 800eb62:	6023      	str	r3, [r4, #0]
 800eb64:	2000      	movs	r0, #0
 800eb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb6a:	462a      	mov	r2, r5
 800eb6c:	f000 fac4 	bl	800f0f8 <_realloc_r>
 800eb70:	4606      	mov	r6, r0
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d1e0      	bne.n	800eb38 <__ssputs_r+0x5c>
 800eb76:	6921      	ldr	r1, [r4, #16]
 800eb78:	4650      	mov	r0, sl
 800eb7a:	f7ff feb7 	bl	800e8ec <_free_r>
 800eb7e:	230c      	movs	r3, #12
 800eb80:	f8ca 3000 	str.w	r3, [sl]
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb8a:	81a3      	strh	r3, [r4, #12]
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	e7e9      	b.n	800eb66 <__ssputs_r+0x8a>
	...

0800eb94 <_svfiprintf_r>:
 800eb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb98:	4698      	mov	r8, r3
 800eb9a:	898b      	ldrh	r3, [r1, #12]
 800eb9c:	061b      	lsls	r3, r3, #24
 800eb9e:	b09d      	sub	sp, #116	@ 0x74
 800eba0:	4607      	mov	r7, r0
 800eba2:	460d      	mov	r5, r1
 800eba4:	4614      	mov	r4, r2
 800eba6:	d510      	bpl.n	800ebca <_svfiprintf_r+0x36>
 800eba8:	690b      	ldr	r3, [r1, #16]
 800ebaa:	b973      	cbnz	r3, 800ebca <_svfiprintf_r+0x36>
 800ebac:	2140      	movs	r1, #64	@ 0x40
 800ebae:	f7ff ff09 	bl	800e9c4 <_malloc_r>
 800ebb2:	6028      	str	r0, [r5, #0]
 800ebb4:	6128      	str	r0, [r5, #16]
 800ebb6:	b930      	cbnz	r0, 800ebc6 <_svfiprintf_r+0x32>
 800ebb8:	230c      	movs	r3, #12
 800ebba:	603b      	str	r3, [r7, #0]
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc0:	b01d      	add	sp, #116	@ 0x74
 800ebc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc6:	2340      	movs	r3, #64	@ 0x40
 800ebc8:	616b      	str	r3, [r5, #20]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebce:	2320      	movs	r3, #32
 800ebd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd8:	2330      	movs	r3, #48	@ 0x30
 800ebda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed78 <_svfiprintf_r+0x1e4>
 800ebde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebe2:	f04f 0901 	mov.w	r9, #1
 800ebe6:	4623      	mov	r3, r4
 800ebe8:	469a      	mov	sl, r3
 800ebea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebee:	b10a      	cbz	r2, 800ebf4 <_svfiprintf_r+0x60>
 800ebf0:	2a25      	cmp	r2, #37	@ 0x25
 800ebf2:	d1f9      	bne.n	800ebe8 <_svfiprintf_r+0x54>
 800ebf4:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf8:	d00b      	beq.n	800ec12 <_svfiprintf_r+0x7e>
 800ebfa:	465b      	mov	r3, fp
 800ebfc:	4622      	mov	r2, r4
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ff6b 	bl	800eadc <__ssputs_r>
 800ec06:	3001      	adds	r0, #1
 800ec08:	f000 80a7 	beq.w	800ed5a <_svfiprintf_r+0x1c6>
 800ec0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec0e:	445a      	add	r2, fp
 800ec10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec12:	f89a 3000 	ldrb.w	r3, [sl]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f000 809f 	beq.w	800ed5a <_svfiprintf_r+0x1c6>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec26:	f10a 0a01 	add.w	sl, sl, #1
 800ec2a:	9304      	str	r3, [sp, #16]
 800ec2c:	9307      	str	r3, [sp, #28]
 800ec2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec34:	4654      	mov	r4, sl
 800ec36:	2205      	movs	r2, #5
 800ec38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec3c:	484e      	ldr	r0, [pc, #312]	@ (800ed78 <_svfiprintf_r+0x1e4>)
 800ec3e:	f7f1 facf 	bl	80001e0 <memchr>
 800ec42:	9a04      	ldr	r2, [sp, #16]
 800ec44:	b9d8      	cbnz	r0, 800ec7e <_svfiprintf_r+0xea>
 800ec46:	06d0      	lsls	r0, r2, #27
 800ec48:	bf44      	itt	mi
 800ec4a:	2320      	movmi	r3, #32
 800ec4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec50:	0711      	lsls	r1, r2, #28
 800ec52:	bf44      	itt	mi
 800ec54:	232b      	movmi	r3, #43	@ 0x2b
 800ec56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec60:	d015      	beq.n	800ec8e <_svfiprintf_r+0xfa>
 800ec62:	9a07      	ldr	r2, [sp, #28]
 800ec64:	4654      	mov	r4, sl
 800ec66:	2000      	movs	r0, #0
 800ec68:	f04f 0c0a 	mov.w	ip, #10
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec72:	3b30      	subs	r3, #48	@ 0x30
 800ec74:	2b09      	cmp	r3, #9
 800ec76:	d94b      	bls.n	800ed10 <_svfiprintf_r+0x17c>
 800ec78:	b1b0      	cbz	r0, 800eca8 <_svfiprintf_r+0x114>
 800ec7a:	9207      	str	r2, [sp, #28]
 800ec7c:	e014      	b.n	800eca8 <_svfiprintf_r+0x114>
 800ec7e:	eba0 0308 	sub.w	r3, r0, r8
 800ec82:	fa09 f303 	lsl.w	r3, r9, r3
 800ec86:	4313      	orrs	r3, r2
 800ec88:	9304      	str	r3, [sp, #16]
 800ec8a:	46a2      	mov	sl, r4
 800ec8c:	e7d2      	b.n	800ec34 <_svfiprintf_r+0xa0>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	1d19      	adds	r1, r3, #4
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	9103      	str	r1, [sp, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bfbb      	ittet	lt
 800ec9a:	425b      	neglt	r3, r3
 800ec9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eca0:	9307      	strge	r3, [sp, #28]
 800eca2:	9307      	strlt	r3, [sp, #28]
 800eca4:	bfb8      	it	lt
 800eca6:	9204      	strlt	r2, [sp, #16]
 800eca8:	7823      	ldrb	r3, [r4, #0]
 800ecaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecac:	d10a      	bne.n	800ecc4 <_svfiprintf_r+0x130>
 800ecae:	7863      	ldrb	r3, [r4, #1]
 800ecb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecb2:	d132      	bne.n	800ed1a <_svfiprintf_r+0x186>
 800ecb4:	9b03      	ldr	r3, [sp, #12]
 800ecb6:	1d1a      	adds	r2, r3, #4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	9203      	str	r2, [sp, #12]
 800ecbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecc0:	3402      	adds	r4, #2
 800ecc2:	9305      	str	r3, [sp, #20]
 800ecc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed88 <_svfiprintf_r+0x1f4>
 800ecc8:	7821      	ldrb	r1, [r4, #0]
 800ecca:	2203      	movs	r2, #3
 800eccc:	4650      	mov	r0, sl
 800ecce:	f7f1 fa87 	bl	80001e0 <memchr>
 800ecd2:	b138      	cbz	r0, 800ece4 <_svfiprintf_r+0x150>
 800ecd4:	9b04      	ldr	r3, [sp, #16]
 800ecd6:	eba0 000a 	sub.w	r0, r0, sl
 800ecda:	2240      	movs	r2, #64	@ 0x40
 800ecdc:	4082      	lsls	r2, r0
 800ecde:	4313      	orrs	r3, r2
 800ece0:	3401      	adds	r4, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece8:	4824      	ldr	r0, [pc, #144]	@ (800ed7c <_svfiprintf_r+0x1e8>)
 800ecea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ecee:	2206      	movs	r2, #6
 800ecf0:	f7f1 fa76 	bl	80001e0 <memchr>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d036      	beq.n	800ed66 <_svfiprintf_r+0x1d2>
 800ecf8:	4b21      	ldr	r3, [pc, #132]	@ (800ed80 <_svfiprintf_r+0x1ec>)
 800ecfa:	bb1b      	cbnz	r3, 800ed44 <_svfiprintf_r+0x1b0>
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	3307      	adds	r3, #7
 800ed00:	f023 0307 	bic.w	r3, r3, #7
 800ed04:	3308      	adds	r3, #8
 800ed06:	9303      	str	r3, [sp, #12]
 800ed08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed0a:	4433      	add	r3, r6
 800ed0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed0e:	e76a      	b.n	800ebe6 <_svfiprintf_r+0x52>
 800ed10:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed14:	460c      	mov	r4, r1
 800ed16:	2001      	movs	r0, #1
 800ed18:	e7a8      	b.n	800ec6c <_svfiprintf_r+0xd8>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	3401      	adds	r4, #1
 800ed1e:	9305      	str	r3, [sp, #20]
 800ed20:	4619      	mov	r1, r3
 800ed22:	f04f 0c0a 	mov.w	ip, #10
 800ed26:	4620      	mov	r0, r4
 800ed28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed2c:	3a30      	subs	r2, #48	@ 0x30
 800ed2e:	2a09      	cmp	r2, #9
 800ed30:	d903      	bls.n	800ed3a <_svfiprintf_r+0x1a6>
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0c6      	beq.n	800ecc4 <_svfiprintf_r+0x130>
 800ed36:	9105      	str	r1, [sp, #20]
 800ed38:	e7c4      	b.n	800ecc4 <_svfiprintf_r+0x130>
 800ed3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed3e:	4604      	mov	r4, r0
 800ed40:	2301      	movs	r3, #1
 800ed42:	e7f0      	b.n	800ed26 <_svfiprintf_r+0x192>
 800ed44:	ab03      	add	r3, sp, #12
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	462a      	mov	r2, r5
 800ed4a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed84 <_svfiprintf_r+0x1f0>)
 800ed4c:	a904      	add	r1, sp, #16
 800ed4e:	4638      	mov	r0, r7
 800ed50:	f3af 8000 	nop.w
 800ed54:	1c42      	adds	r2, r0, #1
 800ed56:	4606      	mov	r6, r0
 800ed58:	d1d6      	bne.n	800ed08 <_svfiprintf_r+0x174>
 800ed5a:	89ab      	ldrh	r3, [r5, #12]
 800ed5c:	065b      	lsls	r3, r3, #25
 800ed5e:	f53f af2d 	bmi.w	800ebbc <_svfiprintf_r+0x28>
 800ed62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed64:	e72c      	b.n	800ebc0 <_svfiprintf_r+0x2c>
 800ed66:	ab03      	add	r3, sp, #12
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	462a      	mov	r2, r5
 800ed6c:	4b05      	ldr	r3, [pc, #20]	@ (800ed84 <_svfiprintf_r+0x1f0>)
 800ed6e:	a904      	add	r1, sp, #16
 800ed70:	4638      	mov	r0, r7
 800ed72:	f000 f879 	bl	800ee68 <_printf_i>
 800ed76:	e7ed      	b.n	800ed54 <_svfiprintf_r+0x1c0>
 800ed78:	08011396 	.word	0x08011396
 800ed7c:	080113a0 	.word	0x080113a0
 800ed80:	00000000 	.word	0x00000000
 800ed84:	0800eadd 	.word	0x0800eadd
 800ed88:	0801139c 	.word	0x0801139c

0800ed8c <_printf_common>:
 800ed8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed90:	4616      	mov	r6, r2
 800ed92:	4698      	mov	r8, r3
 800ed94:	688a      	ldr	r2, [r1, #8]
 800ed96:	690b      	ldr	r3, [r1, #16]
 800ed98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	bfb8      	it	lt
 800eda0:	4613      	movlt	r3, r2
 800eda2:	6033      	str	r3, [r6, #0]
 800eda4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eda8:	4607      	mov	r7, r0
 800edaa:	460c      	mov	r4, r1
 800edac:	b10a      	cbz	r2, 800edb2 <_printf_common+0x26>
 800edae:	3301      	adds	r3, #1
 800edb0:	6033      	str	r3, [r6, #0]
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	0699      	lsls	r1, r3, #26
 800edb6:	bf42      	ittt	mi
 800edb8:	6833      	ldrmi	r3, [r6, #0]
 800edba:	3302      	addmi	r3, #2
 800edbc:	6033      	strmi	r3, [r6, #0]
 800edbe:	6825      	ldr	r5, [r4, #0]
 800edc0:	f015 0506 	ands.w	r5, r5, #6
 800edc4:	d106      	bne.n	800edd4 <_printf_common+0x48>
 800edc6:	f104 0a19 	add.w	sl, r4, #25
 800edca:	68e3      	ldr	r3, [r4, #12]
 800edcc:	6832      	ldr	r2, [r6, #0]
 800edce:	1a9b      	subs	r3, r3, r2
 800edd0:	42ab      	cmp	r3, r5
 800edd2:	dc26      	bgt.n	800ee22 <_printf_common+0x96>
 800edd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800edd8:	6822      	ldr	r2, [r4, #0]
 800edda:	3b00      	subs	r3, #0
 800eddc:	bf18      	it	ne
 800edde:	2301      	movne	r3, #1
 800ede0:	0692      	lsls	r2, r2, #26
 800ede2:	d42b      	bmi.n	800ee3c <_printf_common+0xb0>
 800ede4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ede8:	4641      	mov	r1, r8
 800edea:	4638      	mov	r0, r7
 800edec:	47c8      	blx	r9
 800edee:	3001      	adds	r0, #1
 800edf0:	d01e      	beq.n	800ee30 <_printf_common+0xa4>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	6922      	ldr	r2, [r4, #16]
 800edf6:	f003 0306 	and.w	r3, r3, #6
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	bf02      	ittt	eq
 800edfe:	68e5      	ldreq	r5, [r4, #12]
 800ee00:	6833      	ldreq	r3, [r6, #0]
 800ee02:	1aed      	subeq	r5, r5, r3
 800ee04:	68a3      	ldr	r3, [r4, #8]
 800ee06:	bf0c      	ite	eq
 800ee08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee0c:	2500      	movne	r5, #0
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	bfc4      	itt	gt
 800ee12:	1a9b      	subgt	r3, r3, r2
 800ee14:	18ed      	addgt	r5, r5, r3
 800ee16:	2600      	movs	r6, #0
 800ee18:	341a      	adds	r4, #26
 800ee1a:	42b5      	cmp	r5, r6
 800ee1c:	d11a      	bne.n	800ee54 <_printf_common+0xc8>
 800ee1e:	2000      	movs	r0, #0
 800ee20:	e008      	b.n	800ee34 <_printf_common+0xa8>
 800ee22:	2301      	movs	r3, #1
 800ee24:	4652      	mov	r2, sl
 800ee26:	4641      	mov	r1, r8
 800ee28:	4638      	mov	r0, r7
 800ee2a:	47c8      	blx	r9
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d103      	bne.n	800ee38 <_printf_common+0xac>
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee38:	3501      	adds	r5, #1
 800ee3a:	e7c6      	b.n	800edca <_printf_common+0x3e>
 800ee3c:	18e1      	adds	r1, r4, r3
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	2030      	movs	r0, #48	@ 0x30
 800ee42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee46:	4422      	add	r2, r4
 800ee48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee50:	3302      	adds	r3, #2
 800ee52:	e7c7      	b.n	800ede4 <_printf_common+0x58>
 800ee54:	2301      	movs	r3, #1
 800ee56:	4622      	mov	r2, r4
 800ee58:	4641      	mov	r1, r8
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	47c8      	blx	r9
 800ee5e:	3001      	adds	r0, #1
 800ee60:	d0e6      	beq.n	800ee30 <_printf_common+0xa4>
 800ee62:	3601      	adds	r6, #1
 800ee64:	e7d9      	b.n	800ee1a <_printf_common+0x8e>
	...

0800ee68 <_printf_i>:
 800ee68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee6c:	7e0f      	ldrb	r7, [r1, #24]
 800ee6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee70:	2f78      	cmp	r7, #120	@ 0x78
 800ee72:	4691      	mov	r9, r2
 800ee74:	4680      	mov	r8, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	469a      	mov	sl, r3
 800ee7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee7e:	d807      	bhi.n	800ee90 <_printf_i+0x28>
 800ee80:	2f62      	cmp	r7, #98	@ 0x62
 800ee82:	d80a      	bhi.n	800ee9a <_printf_i+0x32>
 800ee84:	2f00      	cmp	r7, #0
 800ee86:	f000 80d1 	beq.w	800f02c <_printf_i+0x1c4>
 800ee8a:	2f58      	cmp	r7, #88	@ 0x58
 800ee8c:	f000 80b8 	beq.w	800f000 <_printf_i+0x198>
 800ee90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee98:	e03a      	b.n	800ef10 <_printf_i+0xa8>
 800ee9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee9e:	2b15      	cmp	r3, #21
 800eea0:	d8f6      	bhi.n	800ee90 <_printf_i+0x28>
 800eea2:	a101      	add	r1, pc, #4	@ (adr r1, 800eea8 <_printf_i+0x40>)
 800eea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eea8:	0800ef01 	.word	0x0800ef01
 800eeac:	0800ef15 	.word	0x0800ef15
 800eeb0:	0800ee91 	.word	0x0800ee91
 800eeb4:	0800ee91 	.word	0x0800ee91
 800eeb8:	0800ee91 	.word	0x0800ee91
 800eebc:	0800ee91 	.word	0x0800ee91
 800eec0:	0800ef15 	.word	0x0800ef15
 800eec4:	0800ee91 	.word	0x0800ee91
 800eec8:	0800ee91 	.word	0x0800ee91
 800eecc:	0800ee91 	.word	0x0800ee91
 800eed0:	0800ee91 	.word	0x0800ee91
 800eed4:	0800f013 	.word	0x0800f013
 800eed8:	0800ef3f 	.word	0x0800ef3f
 800eedc:	0800efcd 	.word	0x0800efcd
 800eee0:	0800ee91 	.word	0x0800ee91
 800eee4:	0800ee91 	.word	0x0800ee91
 800eee8:	0800f035 	.word	0x0800f035
 800eeec:	0800ee91 	.word	0x0800ee91
 800eef0:	0800ef3f 	.word	0x0800ef3f
 800eef4:	0800ee91 	.word	0x0800ee91
 800eef8:	0800ee91 	.word	0x0800ee91
 800eefc:	0800efd5 	.word	0x0800efd5
 800ef00:	6833      	ldr	r3, [r6, #0]
 800ef02:	1d1a      	adds	r2, r3, #4
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6032      	str	r2, [r6, #0]
 800ef08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ef10:	2301      	movs	r3, #1
 800ef12:	e09c      	b.n	800f04e <_printf_i+0x1e6>
 800ef14:	6833      	ldr	r3, [r6, #0]
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	1d19      	adds	r1, r3, #4
 800ef1a:	6031      	str	r1, [r6, #0]
 800ef1c:	0606      	lsls	r6, r0, #24
 800ef1e:	d501      	bpl.n	800ef24 <_printf_i+0xbc>
 800ef20:	681d      	ldr	r5, [r3, #0]
 800ef22:	e003      	b.n	800ef2c <_printf_i+0xc4>
 800ef24:	0645      	lsls	r5, r0, #25
 800ef26:	d5fb      	bpl.n	800ef20 <_printf_i+0xb8>
 800ef28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ef2c:	2d00      	cmp	r5, #0
 800ef2e:	da03      	bge.n	800ef38 <_printf_i+0xd0>
 800ef30:	232d      	movs	r3, #45	@ 0x2d
 800ef32:	426d      	negs	r5, r5
 800ef34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef38:	4858      	ldr	r0, [pc, #352]	@ (800f09c <_printf_i+0x234>)
 800ef3a:	230a      	movs	r3, #10
 800ef3c:	e011      	b.n	800ef62 <_printf_i+0xfa>
 800ef3e:	6821      	ldr	r1, [r4, #0]
 800ef40:	6833      	ldr	r3, [r6, #0]
 800ef42:	0608      	lsls	r0, r1, #24
 800ef44:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef48:	d402      	bmi.n	800ef50 <_printf_i+0xe8>
 800ef4a:	0649      	lsls	r1, r1, #25
 800ef4c:	bf48      	it	mi
 800ef4e:	b2ad      	uxthmi	r5, r5
 800ef50:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef52:	4852      	ldr	r0, [pc, #328]	@ (800f09c <_printf_i+0x234>)
 800ef54:	6033      	str	r3, [r6, #0]
 800ef56:	bf14      	ite	ne
 800ef58:	230a      	movne	r3, #10
 800ef5a:	2308      	moveq	r3, #8
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef62:	6866      	ldr	r6, [r4, #4]
 800ef64:	60a6      	str	r6, [r4, #8]
 800ef66:	2e00      	cmp	r6, #0
 800ef68:	db05      	blt.n	800ef76 <_printf_i+0x10e>
 800ef6a:	6821      	ldr	r1, [r4, #0]
 800ef6c:	432e      	orrs	r6, r5
 800ef6e:	f021 0104 	bic.w	r1, r1, #4
 800ef72:	6021      	str	r1, [r4, #0]
 800ef74:	d04b      	beq.n	800f00e <_printf_i+0x1a6>
 800ef76:	4616      	mov	r6, r2
 800ef78:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef7c:	fb03 5711 	mls	r7, r3, r1, r5
 800ef80:	5dc7      	ldrb	r7, [r0, r7]
 800ef82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef86:	462f      	mov	r7, r5
 800ef88:	42bb      	cmp	r3, r7
 800ef8a:	460d      	mov	r5, r1
 800ef8c:	d9f4      	bls.n	800ef78 <_printf_i+0x110>
 800ef8e:	2b08      	cmp	r3, #8
 800ef90:	d10b      	bne.n	800efaa <_printf_i+0x142>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	07df      	lsls	r7, r3, #31
 800ef96:	d508      	bpl.n	800efaa <_printf_i+0x142>
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	6861      	ldr	r1, [r4, #4]
 800ef9c:	4299      	cmp	r1, r3
 800ef9e:	bfde      	ittt	le
 800efa0:	2330      	movle	r3, #48	@ 0x30
 800efa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800efa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800efaa:	1b92      	subs	r2, r2, r6
 800efac:	6122      	str	r2, [r4, #16]
 800efae:	f8cd a000 	str.w	sl, [sp]
 800efb2:	464b      	mov	r3, r9
 800efb4:	aa03      	add	r2, sp, #12
 800efb6:	4621      	mov	r1, r4
 800efb8:	4640      	mov	r0, r8
 800efba:	f7ff fee7 	bl	800ed8c <_printf_common>
 800efbe:	3001      	adds	r0, #1
 800efc0:	d14a      	bne.n	800f058 <_printf_i+0x1f0>
 800efc2:	f04f 30ff 	mov.w	r0, #4294967295
 800efc6:	b004      	add	sp, #16
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	6823      	ldr	r3, [r4, #0]
 800efce:	f043 0320 	orr.w	r3, r3, #32
 800efd2:	6023      	str	r3, [r4, #0]
 800efd4:	4832      	ldr	r0, [pc, #200]	@ (800f0a0 <_printf_i+0x238>)
 800efd6:	2778      	movs	r7, #120	@ 0x78
 800efd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	6831      	ldr	r1, [r6, #0]
 800efe0:	061f      	lsls	r7, r3, #24
 800efe2:	f851 5b04 	ldr.w	r5, [r1], #4
 800efe6:	d402      	bmi.n	800efee <_printf_i+0x186>
 800efe8:	065f      	lsls	r7, r3, #25
 800efea:	bf48      	it	mi
 800efec:	b2ad      	uxthmi	r5, r5
 800efee:	6031      	str	r1, [r6, #0]
 800eff0:	07d9      	lsls	r1, r3, #31
 800eff2:	bf44      	itt	mi
 800eff4:	f043 0320 	orrmi.w	r3, r3, #32
 800eff8:	6023      	strmi	r3, [r4, #0]
 800effa:	b11d      	cbz	r5, 800f004 <_printf_i+0x19c>
 800effc:	2310      	movs	r3, #16
 800effe:	e7ad      	b.n	800ef5c <_printf_i+0xf4>
 800f000:	4826      	ldr	r0, [pc, #152]	@ (800f09c <_printf_i+0x234>)
 800f002:	e7e9      	b.n	800efd8 <_printf_i+0x170>
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	f023 0320 	bic.w	r3, r3, #32
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	e7f6      	b.n	800effc <_printf_i+0x194>
 800f00e:	4616      	mov	r6, r2
 800f010:	e7bd      	b.n	800ef8e <_printf_i+0x126>
 800f012:	6833      	ldr	r3, [r6, #0]
 800f014:	6825      	ldr	r5, [r4, #0]
 800f016:	6961      	ldr	r1, [r4, #20]
 800f018:	1d18      	adds	r0, r3, #4
 800f01a:	6030      	str	r0, [r6, #0]
 800f01c:	062e      	lsls	r6, r5, #24
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	d501      	bpl.n	800f026 <_printf_i+0x1be>
 800f022:	6019      	str	r1, [r3, #0]
 800f024:	e002      	b.n	800f02c <_printf_i+0x1c4>
 800f026:	0668      	lsls	r0, r5, #25
 800f028:	d5fb      	bpl.n	800f022 <_printf_i+0x1ba>
 800f02a:	8019      	strh	r1, [r3, #0]
 800f02c:	2300      	movs	r3, #0
 800f02e:	6123      	str	r3, [r4, #16]
 800f030:	4616      	mov	r6, r2
 800f032:	e7bc      	b.n	800efae <_printf_i+0x146>
 800f034:	6833      	ldr	r3, [r6, #0]
 800f036:	1d1a      	adds	r2, r3, #4
 800f038:	6032      	str	r2, [r6, #0]
 800f03a:	681e      	ldr	r6, [r3, #0]
 800f03c:	6862      	ldr	r2, [r4, #4]
 800f03e:	2100      	movs	r1, #0
 800f040:	4630      	mov	r0, r6
 800f042:	f7f1 f8cd 	bl	80001e0 <memchr>
 800f046:	b108      	cbz	r0, 800f04c <_printf_i+0x1e4>
 800f048:	1b80      	subs	r0, r0, r6
 800f04a:	6060      	str	r0, [r4, #4]
 800f04c:	6863      	ldr	r3, [r4, #4]
 800f04e:	6123      	str	r3, [r4, #16]
 800f050:	2300      	movs	r3, #0
 800f052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f056:	e7aa      	b.n	800efae <_printf_i+0x146>
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	4632      	mov	r2, r6
 800f05c:	4649      	mov	r1, r9
 800f05e:	4640      	mov	r0, r8
 800f060:	47d0      	blx	sl
 800f062:	3001      	adds	r0, #1
 800f064:	d0ad      	beq.n	800efc2 <_printf_i+0x15a>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	079b      	lsls	r3, r3, #30
 800f06a:	d413      	bmi.n	800f094 <_printf_i+0x22c>
 800f06c:	68e0      	ldr	r0, [r4, #12]
 800f06e:	9b03      	ldr	r3, [sp, #12]
 800f070:	4298      	cmp	r0, r3
 800f072:	bfb8      	it	lt
 800f074:	4618      	movlt	r0, r3
 800f076:	e7a6      	b.n	800efc6 <_printf_i+0x15e>
 800f078:	2301      	movs	r3, #1
 800f07a:	4632      	mov	r2, r6
 800f07c:	4649      	mov	r1, r9
 800f07e:	4640      	mov	r0, r8
 800f080:	47d0      	blx	sl
 800f082:	3001      	adds	r0, #1
 800f084:	d09d      	beq.n	800efc2 <_printf_i+0x15a>
 800f086:	3501      	adds	r5, #1
 800f088:	68e3      	ldr	r3, [r4, #12]
 800f08a:	9903      	ldr	r1, [sp, #12]
 800f08c:	1a5b      	subs	r3, r3, r1
 800f08e:	42ab      	cmp	r3, r5
 800f090:	dcf2      	bgt.n	800f078 <_printf_i+0x210>
 800f092:	e7eb      	b.n	800f06c <_printf_i+0x204>
 800f094:	2500      	movs	r5, #0
 800f096:	f104 0619 	add.w	r6, r4, #25
 800f09a:	e7f5      	b.n	800f088 <_printf_i+0x220>
 800f09c:	080113a7 	.word	0x080113a7
 800f0a0:	080113b8 	.word	0x080113b8

0800f0a4 <memmove>:
 800f0a4:	4288      	cmp	r0, r1
 800f0a6:	b510      	push	{r4, lr}
 800f0a8:	eb01 0402 	add.w	r4, r1, r2
 800f0ac:	d902      	bls.n	800f0b4 <memmove+0x10>
 800f0ae:	4284      	cmp	r4, r0
 800f0b0:	4623      	mov	r3, r4
 800f0b2:	d807      	bhi.n	800f0c4 <memmove+0x20>
 800f0b4:	1e43      	subs	r3, r0, #1
 800f0b6:	42a1      	cmp	r1, r4
 800f0b8:	d008      	beq.n	800f0cc <memmove+0x28>
 800f0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0c2:	e7f8      	b.n	800f0b6 <memmove+0x12>
 800f0c4:	4402      	add	r2, r0
 800f0c6:	4601      	mov	r1, r0
 800f0c8:	428a      	cmp	r2, r1
 800f0ca:	d100      	bne.n	800f0ce <memmove+0x2a>
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0d6:	e7f7      	b.n	800f0c8 <memmove+0x24>

0800f0d8 <_sbrk_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d06      	ldr	r5, [pc, #24]	@ (800f0f4 <_sbrk_r+0x1c>)
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4604      	mov	r4, r0
 800f0e0:	4608      	mov	r0, r1
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	f7f2 fd80 	bl	8001be8 <_sbrk>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_sbrk_r+0x1a>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_sbrk_r+0x1a>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	20004d20 	.word	0x20004d20

0800f0f8 <_realloc_r>:
 800f0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fc:	4607      	mov	r7, r0
 800f0fe:	4614      	mov	r4, r2
 800f100:	460d      	mov	r5, r1
 800f102:	b921      	cbnz	r1, 800f10e <_realloc_r+0x16>
 800f104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	4611      	mov	r1, r2
 800f10a:	f7ff bc5b 	b.w	800e9c4 <_malloc_r>
 800f10e:	b92a      	cbnz	r2, 800f11c <_realloc_r+0x24>
 800f110:	f7ff fbec 	bl	800e8ec <_free_r>
 800f114:	4625      	mov	r5, r4
 800f116:	4628      	mov	r0, r5
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11c:	f000 f81a 	bl	800f154 <_malloc_usable_size_r>
 800f120:	4284      	cmp	r4, r0
 800f122:	4606      	mov	r6, r0
 800f124:	d802      	bhi.n	800f12c <_realloc_r+0x34>
 800f126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f12a:	d8f4      	bhi.n	800f116 <_realloc_r+0x1e>
 800f12c:	4621      	mov	r1, r4
 800f12e:	4638      	mov	r0, r7
 800f130:	f7ff fc48 	bl	800e9c4 <_malloc_r>
 800f134:	4680      	mov	r8, r0
 800f136:	b908      	cbnz	r0, 800f13c <_realloc_r+0x44>
 800f138:	4645      	mov	r5, r8
 800f13a:	e7ec      	b.n	800f116 <_realloc_r+0x1e>
 800f13c:	42b4      	cmp	r4, r6
 800f13e:	4622      	mov	r2, r4
 800f140:	4629      	mov	r1, r5
 800f142:	bf28      	it	cs
 800f144:	4632      	movcs	r2, r6
 800f146:	f7ff fbc3 	bl	800e8d0 <memcpy>
 800f14a:	4629      	mov	r1, r5
 800f14c:	4638      	mov	r0, r7
 800f14e:	f7ff fbcd 	bl	800e8ec <_free_r>
 800f152:	e7f1      	b.n	800f138 <_realloc_r+0x40>

0800f154 <_malloc_usable_size_r>:
 800f154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f158:	1f18      	subs	r0, r3, #4
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	bfbc      	itt	lt
 800f15e:	580b      	ldrlt	r3, [r1, r0]
 800f160:	18c0      	addlt	r0, r0, r3
 800f162:	4770      	bx	lr

0800f164 <asin>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	ed2d 8b02 	vpush	{d8}
 800f16a:	ec55 4b10 	vmov	r4, r5, d0
 800f16e:	f000 f83f 	bl	800f1f0 <__ieee754_asin>
 800f172:	4622      	mov	r2, r4
 800f174:	462b      	mov	r3, r5
 800f176:	4620      	mov	r0, r4
 800f178:	4629      	mov	r1, r5
 800f17a:	eeb0 8a40 	vmov.f32	s16, s0
 800f17e:	eef0 8a60 	vmov.f32	s17, s1
 800f182:	f7f1 fcd3 	bl	8000b2c <__aeabi_dcmpun>
 800f186:	b9a8      	cbnz	r0, 800f1b4 <asin+0x50>
 800f188:	ec45 4b10 	vmov	d0, r4, r5
 800f18c:	f000 f820 	bl	800f1d0 <fabs>
 800f190:	4b0c      	ldr	r3, [pc, #48]	@ (800f1c4 <asin+0x60>)
 800f192:	ec51 0b10 	vmov	r0, r1, d0
 800f196:	2200      	movs	r2, #0
 800f198:	f7f1 fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800f19c:	b150      	cbz	r0, 800f1b4 <asin+0x50>
 800f19e:	f7ff fb6b 	bl	800e878 <__errno>
 800f1a2:	ecbd 8b02 	vpop	{d8}
 800f1a6:	2321      	movs	r3, #33	@ 0x21
 800f1a8:	6003      	str	r3, [r0, #0]
 800f1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1ae:	4806      	ldr	r0, [pc, #24]	@ (800f1c8 <asin+0x64>)
 800f1b0:	f000 b816 	b.w	800f1e0 <nan>
 800f1b4:	eeb0 0a48 	vmov.f32	s0, s16
 800f1b8:	eef0 0a68 	vmov.f32	s1, s17
 800f1bc:	ecbd 8b02 	vpop	{d8}
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop
 800f1c4:	3ff00000 	.word	0x3ff00000
 800f1c8:	0801139b 	.word	0x0801139b

0800f1cc <atan2>:
 800f1cc:	f000 ba14 	b.w	800f5f8 <__ieee754_atan2>

0800f1d0 <fabs>:
 800f1d0:	ec51 0b10 	vmov	r0, r1, d0
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f1da:	ec43 2b10 	vmov	d0, r2, r3
 800f1de:	4770      	bx	lr

0800f1e0 <nan>:
 800f1e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1e8 <nan+0x8>
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	00000000 	.word	0x00000000
 800f1ec:	7ff80000 	.word	0x7ff80000

0800f1f0 <__ieee754_asin>:
 800f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f4:	ec55 4b10 	vmov	r4, r5, d0
 800f1f8:	4bc7      	ldr	r3, [pc, #796]	@ (800f518 <__ieee754_asin+0x328>)
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f200:	429e      	cmp	r6, r3
 800f202:	9501      	str	r5, [sp, #4]
 800f204:	d92d      	bls.n	800f262 <__ieee754_asin+0x72>
 800f206:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800f20a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800f20e:	4326      	orrs	r6, r4
 800f210:	d116      	bne.n	800f240 <__ieee754_asin+0x50>
 800f212:	a3a7      	add	r3, pc, #668	@ (adr r3, 800f4b0 <__ieee754_asin+0x2c0>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	4620      	mov	r0, r4
 800f21a:	4629      	mov	r1, r5
 800f21c:	f7f1 f9ec 	bl	80005f8 <__aeabi_dmul>
 800f220:	a3a5      	add	r3, pc, #660	@ (adr r3, 800f4b8 <__ieee754_asin+0x2c8>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	4606      	mov	r6, r0
 800f228:	460f      	mov	r7, r1
 800f22a:	4620      	mov	r0, r4
 800f22c:	4629      	mov	r1, r5
 800f22e:	f7f1 f9e3 	bl	80005f8 <__aeabi_dmul>
 800f232:	4602      	mov	r2, r0
 800f234:	460b      	mov	r3, r1
 800f236:	4630      	mov	r0, r6
 800f238:	4639      	mov	r1, r7
 800f23a:	f7f1 f827 	bl	800028c <__adddf3>
 800f23e:	e009      	b.n	800f254 <__ieee754_asin+0x64>
 800f240:	4622      	mov	r2, r4
 800f242:	462b      	mov	r3, r5
 800f244:	4620      	mov	r0, r4
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f81e 	bl	8000288 <__aeabi_dsub>
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	f7f1 fafc 	bl	800084c <__aeabi_ddiv>
 800f254:	4604      	mov	r4, r0
 800f256:	460d      	mov	r5, r1
 800f258:	ec45 4b10 	vmov	d0, r4, r5
 800f25c:	b007      	add	sp, #28
 800f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f262:	4bae      	ldr	r3, [pc, #696]	@ (800f51c <__ieee754_asin+0x32c>)
 800f264:	429e      	cmp	r6, r3
 800f266:	d810      	bhi.n	800f28a <__ieee754_asin+0x9a>
 800f268:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800f26c:	f080 80ad 	bcs.w	800f3ca <__ieee754_asin+0x1da>
 800f270:	a393      	add	r3, pc, #588	@ (adr r3, 800f4c0 <__ieee754_asin+0x2d0>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	4620      	mov	r0, r4
 800f278:	4629      	mov	r1, r5
 800f27a:	f7f1 f807 	bl	800028c <__adddf3>
 800f27e:	4ba8      	ldr	r3, [pc, #672]	@ (800f520 <__ieee754_asin+0x330>)
 800f280:	2200      	movs	r2, #0
 800f282:	f7f1 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 800f286:	2800      	cmp	r0, #0
 800f288:	d1e6      	bne.n	800f258 <__ieee754_asin+0x68>
 800f28a:	ec45 4b10 	vmov	d0, r4, r5
 800f28e:	f7ff ff9f 	bl	800f1d0 <fabs>
 800f292:	49a3      	ldr	r1, [pc, #652]	@ (800f520 <__ieee754_asin+0x330>)
 800f294:	ec53 2b10 	vmov	r2, r3, d0
 800f298:	2000      	movs	r0, #0
 800f29a:	f7f0 fff5 	bl	8000288 <__aeabi_dsub>
 800f29e:	4ba1      	ldr	r3, [pc, #644]	@ (800f524 <__ieee754_asin+0x334>)
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f7f1 f9a9 	bl	80005f8 <__aeabi_dmul>
 800f2a6:	a388      	add	r3, pc, #544	@ (adr r3, 800f4c8 <__ieee754_asin+0x2d8>)
 800f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	460d      	mov	r5, r1
 800f2b0:	f7f1 f9a2 	bl	80005f8 <__aeabi_dmul>
 800f2b4:	a386      	add	r3, pc, #536	@ (adr r3, 800f4d0 <__ieee754_asin+0x2e0>)
 800f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ba:	f7f0 ffe7 	bl	800028c <__adddf3>
 800f2be:	4622      	mov	r2, r4
 800f2c0:	462b      	mov	r3, r5
 800f2c2:	f7f1 f999 	bl	80005f8 <__aeabi_dmul>
 800f2c6:	a384      	add	r3, pc, #528	@ (adr r3, 800f4d8 <__ieee754_asin+0x2e8>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	f7f0 ffdc 	bl	8000288 <__aeabi_dsub>
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	f7f1 f990 	bl	80005f8 <__aeabi_dmul>
 800f2d8:	a381      	add	r3, pc, #516	@ (adr r3, 800f4e0 <__ieee754_asin+0x2f0>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	f7f0 ffd5 	bl	800028c <__adddf3>
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	462b      	mov	r3, r5
 800f2e6:	f7f1 f987 	bl	80005f8 <__aeabi_dmul>
 800f2ea:	a37f      	add	r3, pc, #508	@ (adr r3, 800f4e8 <__ieee754_asin+0x2f8>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f7f0 ffca 	bl	8000288 <__aeabi_dsub>
 800f2f4:	4622      	mov	r2, r4
 800f2f6:	462b      	mov	r3, r5
 800f2f8:	f7f1 f97e 	bl	80005f8 <__aeabi_dmul>
 800f2fc:	a37c      	add	r3, pc, #496	@ (adr r3, 800f4f0 <__ieee754_asin+0x300>)
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	f7f0 ffc3 	bl	800028c <__adddf3>
 800f306:	4622      	mov	r2, r4
 800f308:	462b      	mov	r3, r5
 800f30a:	f7f1 f975 	bl	80005f8 <__aeabi_dmul>
 800f30e:	a37a      	add	r3, pc, #488	@ (adr r3, 800f4f8 <__ieee754_asin+0x308>)
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f318:	4620      	mov	r0, r4
 800f31a:	4629      	mov	r1, r5
 800f31c:	f7f1 f96c 	bl	80005f8 <__aeabi_dmul>
 800f320:	a377      	add	r3, pc, #476	@ (adr r3, 800f500 <__ieee754_asin+0x310>)
 800f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f326:	f7f0 ffaf 	bl	8000288 <__aeabi_dsub>
 800f32a:	4622      	mov	r2, r4
 800f32c:	462b      	mov	r3, r5
 800f32e:	f7f1 f963 	bl	80005f8 <__aeabi_dmul>
 800f332:	a375      	add	r3, pc, #468	@ (adr r3, 800f508 <__ieee754_asin+0x318>)
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	f7f0 ffa8 	bl	800028c <__adddf3>
 800f33c:	4622      	mov	r2, r4
 800f33e:	462b      	mov	r3, r5
 800f340:	f7f1 f95a 	bl	80005f8 <__aeabi_dmul>
 800f344:	a372      	add	r3, pc, #456	@ (adr r3, 800f510 <__ieee754_asin+0x320>)
 800f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34a:	f7f0 ff9d 	bl	8000288 <__aeabi_dsub>
 800f34e:	4622      	mov	r2, r4
 800f350:	462b      	mov	r3, r5
 800f352:	f7f1 f951 	bl	80005f8 <__aeabi_dmul>
 800f356:	4b72      	ldr	r3, [pc, #456]	@ (800f520 <__ieee754_asin+0x330>)
 800f358:	2200      	movs	r2, #0
 800f35a:	f7f0 ff97 	bl	800028c <__adddf3>
 800f35e:	ec45 4b10 	vmov	d0, r4, r5
 800f362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f366:	f000 fba7 	bl	800fab8 <__ieee754_sqrt>
 800f36a:	4b6f      	ldr	r3, [pc, #444]	@ (800f528 <__ieee754_asin+0x338>)
 800f36c:	429e      	cmp	r6, r3
 800f36e:	ec5b ab10 	vmov	sl, fp, d0
 800f372:	f240 80db 	bls.w	800f52c <__ieee754_asin+0x33c>
 800f376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f37e:	f7f1 fa65 	bl	800084c <__aeabi_ddiv>
 800f382:	4652      	mov	r2, sl
 800f384:	465b      	mov	r3, fp
 800f386:	f7f1 f937 	bl	80005f8 <__aeabi_dmul>
 800f38a:	4652      	mov	r2, sl
 800f38c:	465b      	mov	r3, fp
 800f38e:	f7f0 ff7d 	bl	800028c <__adddf3>
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	f7f0 ff79 	bl	800028c <__adddf3>
 800f39a:	a347      	add	r3, pc, #284	@ (adr r3, 800f4b8 <__ieee754_asin+0x2c8>)
 800f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a0:	f7f0 ff72 	bl	8000288 <__aeabi_dsub>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	a141      	add	r1, pc, #260	@ (adr r1, 800f4b0 <__ieee754_asin+0x2c0>)
 800f3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ae:	f7f0 ff6b 	bl	8000288 <__aeabi_dsub>
 800f3b2:	9b01      	ldr	r3, [sp, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bfdc      	itt	le
 800f3b8:	4602      	movle	r2, r0
 800f3ba:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800f3be:	4604      	mov	r4, r0
 800f3c0:	460d      	mov	r5, r1
 800f3c2:	bfdc      	itt	le
 800f3c4:	4614      	movle	r4, r2
 800f3c6:	461d      	movle	r5, r3
 800f3c8:	e746      	b.n	800f258 <__ieee754_asin+0x68>
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	462b      	mov	r3, r5
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f7f1 f911 	bl	80005f8 <__aeabi_dmul>
 800f3d6:	a33c      	add	r3, pc, #240	@ (adr r3, 800f4c8 <__ieee754_asin+0x2d8>)
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	4606      	mov	r6, r0
 800f3de:	460f      	mov	r7, r1
 800f3e0:	f7f1 f90a 	bl	80005f8 <__aeabi_dmul>
 800f3e4:	a33a      	add	r3, pc, #232	@ (adr r3, 800f4d0 <__ieee754_asin+0x2e0>)
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	f7f0 ff4f 	bl	800028c <__adddf3>
 800f3ee:	4632      	mov	r2, r6
 800f3f0:	463b      	mov	r3, r7
 800f3f2:	f7f1 f901 	bl	80005f8 <__aeabi_dmul>
 800f3f6:	a338      	add	r3, pc, #224	@ (adr r3, 800f4d8 <__ieee754_asin+0x2e8>)
 800f3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3fc:	f7f0 ff44 	bl	8000288 <__aeabi_dsub>
 800f400:	4632      	mov	r2, r6
 800f402:	463b      	mov	r3, r7
 800f404:	f7f1 f8f8 	bl	80005f8 <__aeabi_dmul>
 800f408:	a335      	add	r3, pc, #212	@ (adr r3, 800f4e0 <__ieee754_asin+0x2f0>)
 800f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40e:	f7f0 ff3d 	bl	800028c <__adddf3>
 800f412:	4632      	mov	r2, r6
 800f414:	463b      	mov	r3, r7
 800f416:	f7f1 f8ef 	bl	80005f8 <__aeabi_dmul>
 800f41a:	a333      	add	r3, pc, #204	@ (adr r3, 800f4e8 <__ieee754_asin+0x2f8>)
 800f41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f420:	f7f0 ff32 	bl	8000288 <__aeabi_dsub>
 800f424:	4632      	mov	r2, r6
 800f426:	463b      	mov	r3, r7
 800f428:	f7f1 f8e6 	bl	80005f8 <__aeabi_dmul>
 800f42c:	a330      	add	r3, pc, #192	@ (adr r3, 800f4f0 <__ieee754_asin+0x300>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	f7f0 ff2b 	bl	800028c <__adddf3>
 800f436:	4632      	mov	r2, r6
 800f438:	463b      	mov	r3, r7
 800f43a:	f7f1 f8dd 	bl	80005f8 <__aeabi_dmul>
 800f43e:	a32e      	add	r3, pc, #184	@ (adr r3, 800f4f8 <__ieee754_asin+0x308>)
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	4680      	mov	r8, r0
 800f446:	4689      	mov	r9, r1
 800f448:	4630      	mov	r0, r6
 800f44a:	4639      	mov	r1, r7
 800f44c:	f7f1 f8d4 	bl	80005f8 <__aeabi_dmul>
 800f450:	a32b      	add	r3, pc, #172	@ (adr r3, 800f500 <__ieee754_asin+0x310>)
 800f452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f456:	f7f0 ff17 	bl	8000288 <__aeabi_dsub>
 800f45a:	4632      	mov	r2, r6
 800f45c:	463b      	mov	r3, r7
 800f45e:	f7f1 f8cb 	bl	80005f8 <__aeabi_dmul>
 800f462:	a329      	add	r3, pc, #164	@ (adr r3, 800f508 <__ieee754_asin+0x318>)
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	f7f0 ff10 	bl	800028c <__adddf3>
 800f46c:	4632      	mov	r2, r6
 800f46e:	463b      	mov	r3, r7
 800f470:	f7f1 f8c2 	bl	80005f8 <__aeabi_dmul>
 800f474:	a326      	add	r3, pc, #152	@ (adr r3, 800f510 <__ieee754_asin+0x320>)
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	f7f0 ff05 	bl	8000288 <__aeabi_dsub>
 800f47e:	4632      	mov	r2, r6
 800f480:	463b      	mov	r3, r7
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	4b26      	ldr	r3, [pc, #152]	@ (800f520 <__ieee754_asin+0x330>)
 800f488:	2200      	movs	r2, #0
 800f48a:	f7f0 feff 	bl	800028c <__adddf3>
 800f48e:	4602      	mov	r2, r0
 800f490:	460b      	mov	r3, r1
 800f492:	4640      	mov	r0, r8
 800f494:	4649      	mov	r1, r9
 800f496:	f7f1 f9d9 	bl	800084c <__aeabi_ddiv>
 800f49a:	4622      	mov	r2, r4
 800f49c:	462b      	mov	r3, r5
 800f49e:	f7f1 f8ab 	bl	80005f8 <__aeabi_dmul>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	e6c6      	b.n	800f23a <__ieee754_asin+0x4a>
 800f4ac:	f3af 8000 	nop.w
 800f4b0:	54442d18 	.word	0x54442d18
 800f4b4:	3ff921fb 	.word	0x3ff921fb
 800f4b8:	33145c07 	.word	0x33145c07
 800f4bc:	3c91a626 	.word	0x3c91a626
 800f4c0:	8800759c 	.word	0x8800759c
 800f4c4:	7e37e43c 	.word	0x7e37e43c
 800f4c8:	0dfdf709 	.word	0x0dfdf709
 800f4cc:	3f023de1 	.word	0x3f023de1
 800f4d0:	7501b288 	.word	0x7501b288
 800f4d4:	3f49efe0 	.word	0x3f49efe0
 800f4d8:	b5688f3b 	.word	0xb5688f3b
 800f4dc:	3fa48228 	.word	0x3fa48228
 800f4e0:	0e884455 	.word	0x0e884455
 800f4e4:	3fc9c155 	.word	0x3fc9c155
 800f4e8:	03eb6f7d 	.word	0x03eb6f7d
 800f4ec:	3fd4d612 	.word	0x3fd4d612
 800f4f0:	55555555 	.word	0x55555555
 800f4f4:	3fc55555 	.word	0x3fc55555
 800f4f8:	b12e9282 	.word	0xb12e9282
 800f4fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f500:	1b8d0159 	.word	0x1b8d0159
 800f504:	3fe6066c 	.word	0x3fe6066c
 800f508:	9c598ac8 	.word	0x9c598ac8
 800f50c:	40002ae5 	.word	0x40002ae5
 800f510:	1c8a2d4b 	.word	0x1c8a2d4b
 800f514:	40033a27 	.word	0x40033a27
 800f518:	3fefffff 	.word	0x3fefffff
 800f51c:	3fdfffff 	.word	0x3fdfffff
 800f520:	3ff00000 	.word	0x3ff00000
 800f524:	3fe00000 	.word	0x3fe00000
 800f528:	3fef3332 	.word	0x3fef3332
 800f52c:	4652      	mov	r2, sl
 800f52e:	465b      	mov	r3, fp
 800f530:	4650      	mov	r0, sl
 800f532:	4659      	mov	r1, fp
 800f534:	f7f0 feaa 	bl	800028c <__adddf3>
 800f538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f53c:	4606      	mov	r6, r0
 800f53e:	460f      	mov	r7, r1
 800f540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f544:	f7f1 f982 	bl	800084c <__aeabi_ddiv>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4630      	mov	r0, r6
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f1 f852 	bl	80005f8 <__aeabi_dmul>
 800f554:	f04f 0800 	mov.w	r8, #0
 800f558:	4606      	mov	r6, r0
 800f55a:	460f      	mov	r7, r1
 800f55c:	4642      	mov	r2, r8
 800f55e:	465b      	mov	r3, fp
 800f560:	4640      	mov	r0, r8
 800f562:	4659      	mov	r1, fp
 800f564:	f7f1 f848 	bl	80005f8 <__aeabi_dmul>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4620      	mov	r0, r4
 800f56e:	4629      	mov	r1, r5
 800f570:	f7f0 fe8a 	bl	8000288 <__aeabi_dsub>
 800f574:	4642      	mov	r2, r8
 800f576:	4604      	mov	r4, r0
 800f578:	460d      	mov	r5, r1
 800f57a:	465b      	mov	r3, fp
 800f57c:	4650      	mov	r0, sl
 800f57e:	4659      	mov	r1, fp
 800f580:	f7f0 fe84 	bl	800028c <__adddf3>
 800f584:	4602      	mov	r2, r0
 800f586:	460b      	mov	r3, r1
 800f588:	4620      	mov	r0, r4
 800f58a:	4629      	mov	r1, r5
 800f58c:	f7f1 f95e 	bl	800084c <__aeabi_ddiv>
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	f7f0 fe7a 	bl	800028c <__adddf3>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	a112      	add	r1, pc, #72	@ (adr r1, 800f5e8 <__ieee754_asin+0x3f8>)
 800f59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5a2:	f7f0 fe71 	bl	8000288 <__aeabi_dsub>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f0 fe6b 	bl	8000288 <__aeabi_dsub>
 800f5b2:	4642      	mov	r2, r8
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	460d      	mov	r5, r1
 800f5b8:	465b      	mov	r3, fp
 800f5ba:	4640      	mov	r0, r8
 800f5bc:	4659      	mov	r1, fp
 800f5be:	f7f0 fe65 	bl	800028c <__adddf3>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f5f0 <__ieee754_asin+0x400>)
 800f5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5cc:	f7f0 fe5c 	bl	8000288 <__aeabi_dsub>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	f7f0 fe56 	bl	8000288 <__aeabi_dsub>
 800f5dc:	4602      	mov	r2, r0
 800f5de:	460b      	mov	r3, r1
 800f5e0:	a103      	add	r1, pc, #12	@ (adr r1, 800f5f0 <__ieee754_asin+0x400>)
 800f5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5e6:	e6e2      	b.n	800f3ae <__ieee754_asin+0x1be>
 800f5e8:	33145c07 	.word	0x33145c07
 800f5ec:	3c91a626 	.word	0x3c91a626
 800f5f0:	54442d18 	.word	0x54442d18
 800f5f4:	3fe921fb 	.word	0x3fe921fb

0800f5f8 <__ieee754_atan2>:
 800f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5fc:	ec57 6b11 	vmov	r6, r7, d1
 800f600:	4273      	negs	r3, r6
 800f602:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f780 <__ieee754_atan2+0x188>
 800f606:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f60a:	4333      	orrs	r3, r6
 800f60c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f610:	4543      	cmp	r3, r8
 800f612:	ec51 0b10 	vmov	r0, r1, d0
 800f616:	4635      	mov	r5, r6
 800f618:	d809      	bhi.n	800f62e <__ieee754_atan2+0x36>
 800f61a:	4244      	negs	r4, r0
 800f61c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f620:	4304      	orrs	r4, r0
 800f622:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f626:	4544      	cmp	r4, r8
 800f628:	468e      	mov	lr, r1
 800f62a:	4681      	mov	r9, r0
 800f62c:	d907      	bls.n	800f63e <__ieee754_atan2+0x46>
 800f62e:	4632      	mov	r2, r6
 800f630:	463b      	mov	r3, r7
 800f632:	f7f0 fe2b 	bl	800028c <__adddf3>
 800f636:	ec41 0b10 	vmov	d0, r0, r1
 800f63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f63e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f642:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f646:	4334      	orrs	r4, r6
 800f648:	d103      	bne.n	800f652 <__ieee754_atan2+0x5a>
 800f64a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f64e:	f000 b89b 	b.w	800f788 <atan>
 800f652:	17bc      	asrs	r4, r7, #30
 800f654:	f004 0402 	and.w	r4, r4, #2
 800f658:	ea53 0909 	orrs.w	r9, r3, r9
 800f65c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f660:	d107      	bne.n	800f672 <__ieee754_atan2+0x7a>
 800f662:	2c02      	cmp	r4, #2
 800f664:	d05f      	beq.n	800f726 <__ieee754_atan2+0x12e>
 800f666:	2c03      	cmp	r4, #3
 800f668:	d1e5      	bne.n	800f636 <__ieee754_atan2+0x3e>
 800f66a:	a143      	add	r1, pc, #268	@ (adr r1, 800f778 <__ieee754_atan2+0x180>)
 800f66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f670:	e7e1      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f672:	4315      	orrs	r5, r2
 800f674:	d106      	bne.n	800f684 <__ieee754_atan2+0x8c>
 800f676:	f1be 0f00 	cmp.w	lr, #0
 800f67a:	db5f      	blt.n	800f73c <__ieee754_atan2+0x144>
 800f67c:	a136      	add	r1, pc, #216	@ (adr r1, 800f758 <__ieee754_atan2+0x160>)
 800f67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f682:	e7d8      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f684:	4542      	cmp	r2, r8
 800f686:	d10f      	bne.n	800f6a8 <__ieee754_atan2+0xb0>
 800f688:	4293      	cmp	r3, r2
 800f68a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f68e:	d107      	bne.n	800f6a0 <__ieee754_atan2+0xa8>
 800f690:	2c02      	cmp	r4, #2
 800f692:	d84c      	bhi.n	800f72e <__ieee754_atan2+0x136>
 800f694:	4b36      	ldr	r3, [pc, #216]	@ (800f770 <__ieee754_atan2+0x178>)
 800f696:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f69a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f69e:	e7ca      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f6a0:	2c02      	cmp	r4, #2
 800f6a2:	d848      	bhi.n	800f736 <__ieee754_atan2+0x13e>
 800f6a4:	4b33      	ldr	r3, [pc, #204]	@ (800f774 <__ieee754_atan2+0x17c>)
 800f6a6:	e7f6      	b.n	800f696 <__ieee754_atan2+0x9e>
 800f6a8:	4543      	cmp	r3, r8
 800f6aa:	d0e4      	beq.n	800f676 <__ieee754_atan2+0x7e>
 800f6ac:	1a9b      	subs	r3, r3, r2
 800f6ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f6b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6b6:	da1e      	bge.n	800f6f6 <__ieee754_atan2+0xfe>
 800f6b8:	2f00      	cmp	r7, #0
 800f6ba:	da01      	bge.n	800f6c0 <__ieee754_atan2+0xc8>
 800f6bc:	323c      	adds	r2, #60	@ 0x3c
 800f6be:	db1e      	blt.n	800f6fe <__ieee754_atan2+0x106>
 800f6c0:	4632      	mov	r2, r6
 800f6c2:	463b      	mov	r3, r7
 800f6c4:	f7f1 f8c2 	bl	800084c <__aeabi_ddiv>
 800f6c8:	ec41 0b10 	vmov	d0, r0, r1
 800f6cc:	f7ff fd80 	bl	800f1d0 <fabs>
 800f6d0:	f000 f85a 	bl	800f788 <atan>
 800f6d4:	ec51 0b10 	vmov	r0, r1, d0
 800f6d8:	2c01      	cmp	r4, #1
 800f6da:	d013      	beq.n	800f704 <__ieee754_atan2+0x10c>
 800f6dc:	2c02      	cmp	r4, #2
 800f6de:	d015      	beq.n	800f70c <__ieee754_atan2+0x114>
 800f6e0:	2c00      	cmp	r4, #0
 800f6e2:	d0a8      	beq.n	800f636 <__ieee754_atan2+0x3e>
 800f6e4:	a318      	add	r3, pc, #96	@ (adr r3, 800f748 <__ieee754_atan2+0x150>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	f7f0 fdcd 	bl	8000288 <__aeabi_dsub>
 800f6ee:	a318      	add	r3, pc, #96	@ (adr r3, 800f750 <__ieee754_atan2+0x158>)
 800f6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f4:	e014      	b.n	800f720 <__ieee754_atan2+0x128>
 800f6f6:	a118      	add	r1, pc, #96	@ (adr r1, 800f758 <__ieee754_atan2+0x160>)
 800f6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6fc:	e7ec      	b.n	800f6d8 <__ieee754_atan2+0xe0>
 800f6fe:	2000      	movs	r0, #0
 800f700:	2100      	movs	r1, #0
 800f702:	e7e9      	b.n	800f6d8 <__ieee754_atan2+0xe0>
 800f704:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f708:	4619      	mov	r1, r3
 800f70a:	e794      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f70c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f748 <__ieee754_atan2+0x150>)
 800f70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f712:	f7f0 fdb9 	bl	8000288 <__aeabi_dsub>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	a10d      	add	r1, pc, #52	@ (adr r1, 800f750 <__ieee754_atan2+0x158>)
 800f71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f720:	f7f0 fdb2 	bl	8000288 <__aeabi_dsub>
 800f724:	e787      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f726:	a10a      	add	r1, pc, #40	@ (adr r1, 800f750 <__ieee754_atan2+0x158>)
 800f728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f72c:	e783      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f72e:	a10c      	add	r1, pc, #48	@ (adr r1, 800f760 <__ieee754_atan2+0x168>)
 800f730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f734:	e77f      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f736:	2000      	movs	r0, #0
 800f738:	2100      	movs	r1, #0
 800f73a:	e77c      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f73c:	a10a      	add	r1, pc, #40	@ (adr r1, 800f768 <__ieee754_atan2+0x170>)
 800f73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f742:	e778      	b.n	800f636 <__ieee754_atan2+0x3e>
 800f744:	f3af 8000 	nop.w
 800f748:	33145c07 	.word	0x33145c07
 800f74c:	3ca1a626 	.word	0x3ca1a626
 800f750:	54442d18 	.word	0x54442d18
 800f754:	400921fb 	.word	0x400921fb
 800f758:	54442d18 	.word	0x54442d18
 800f75c:	3ff921fb 	.word	0x3ff921fb
 800f760:	54442d18 	.word	0x54442d18
 800f764:	3fe921fb 	.word	0x3fe921fb
 800f768:	54442d18 	.word	0x54442d18
 800f76c:	bff921fb 	.word	0xbff921fb
 800f770:	080113e8 	.word	0x080113e8
 800f774:	080113d0 	.word	0x080113d0
 800f778:	54442d18 	.word	0x54442d18
 800f77c:	c00921fb 	.word	0xc00921fb
 800f780:	7ff00000 	.word	0x7ff00000
 800f784:	00000000 	.word	0x00000000

0800f788 <atan>:
 800f788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	ec55 4b10 	vmov	r4, r5, d0
 800f790:	4bbf      	ldr	r3, [pc, #764]	@ (800fa90 <atan+0x308>)
 800f792:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f796:	429e      	cmp	r6, r3
 800f798:	46ab      	mov	fp, r5
 800f79a:	d918      	bls.n	800f7ce <atan+0x46>
 800f79c:	4bbd      	ldr	r3, [pc, #756]	@ (800fa94 <atan+0x30c>)
 800f79e:	429e      	cmp	r6, r3
 800f7a0:	d801      	bhi.n	800f7a6 <atan+0x1e>
 800f7a2:	d109      	bne.n	800f7b8 <atan+0x30>
 800f7a4:	b144      	cbz	r4, 800f7b8 <atan+0x30>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f0 fd6d 	bl	800028c <__adddf3>
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	e006      	b.n	800f7c6 <atan+0x3e>
 800f7b8:	f1bb 0f00 	cmp.w	fp, #0
 800f7bc:	f340 812b 	ble.w	800fa16 <atan+0x28e>
 800f7c0:	a597      	add	r5, pc, #604	@ (adr r5, 800fa20 <atan+0x298>)
 800f7c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7c6:	ec45 4b10 	vmov	d0, r4, r5
 800f7ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ce:	4bb2      	ldr	r3, [pc, #712]	@ (800fa98 <atan+0x310>)
 800f7d0:	429e      	cmp	r6, r3
 800f7d2:	d813      	bhi.n	800f7fc <atan+0x74>
 800f7d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f7d8:	429e      	cmp	r6, r3
 800f7da:	d80c      	bhi.n	800f7f6 <atan+0x6e>
 800f7dc:	a392      	add	r3, pc, #584	@ (adr r3, 800fa28 <atan+0x2a0>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	f7f0 fd51 	bl	800028c <__adddf3>
 800f7ea:	4bac      	ldr	r3, [pc, #688]	@ (800fa9c <atan+0x314>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	f7f1 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d1e7      	bne.n	800f7c6 <atan+0x3e>
 800f7f6:	f04f 3aff 	mov.w	sl, #4294967295
 800f7fa:	e029      	b.n	800f850 <atan+0xc8>
 800f7fc:	f7ff fce8 	bl	800f1d0 <fabs>
 800f800:	4ba7      	ldr	r3, [pc, #668]	@ (800faa0 <atan+0x318>)
 800f802:	429e      	cmp	r6, r3
 800f804:	ec55 4b10 	vmov	r4, r5, d0
 800f808:	f200 80bc 	bhi.w	800f984 <atan+0x1fc>
 800f80c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f810:	429e      	cmp	r6, r3
 800f812:	f200 809e 	bhi.w	800f952 <atan+0x1ca>
 800f816:	4622      	mov	r2, r4
 800f818:	462b      	mov	r3, r5
 800f81a:	4620      	mov	r0, r4
 800f81c:	4629      	mov	r1, r5
 800f81e:	f7f0 fd35 	bl	800028c <__adddf3>
 800f822:	4b9e      	ldr	r3, [pc, #632]	@ (800fa9c <atan+0x314>)
 800f824:	2200      	movs	r2, #0
 800f826:	f7f0 fd2f 	bl	8000288 <__aeabi_dsub>
 800f82a:	2200      	movs	r2, #0
 800f82c:	4606      	mov	r6, r0
 800f82e:	460f      	mov	r7, r1
 800f830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f834:	4620      	mov	r0, r4
 800f836:	4629      	mov	r1, r5
 800f838:	f7f0 fd28 	bl	800028c <__adddf3>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f1 f802 	bl	800084c <__aeabi_ddiv>
 800f848:	f04f 0a00 	mov.w	sl, #0
 800f84c:	4604      	mov	r4, r0
 800f84e:	460d      	mov	r5, r1
 800f850:	4622      	mov	r2, r4
 800f852:	462b      	mov	r3, r5
 800f854:	4620      	mov	r0, r4
 800f856:	4629      	mov	r1, r5
 800f858:	f7f0 fece 	bl	80005f8 <__aeabi_dmul>
 800f85c:	4602      	mov	r2, r0
 800f85e:	460b      	mov	r3, r1
 800f860:	4680      	mov	r8, r0
 800f862:	4689      	mov	r9, r1
 800f864:	f7f0 fec8 	bl	80005f8 <__aeabi_dmul>
 800f868:	a371      	add	r3, pc, #452	@ (adr r3, 800fa30 <atan+0x2a8>)
 800f86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86e:	4606      	mov	r6, r0
 800f870:	460f      	mov	r7, r1
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	a370      	add	r3, pc, #448	@ (adr r3, 800fa38 <atan+0x2b0>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	f7f0 fd06 	bl	800028c <__adddf3>
 800f880:	4632      	mov	r2, r6
 800f882:	463b      	mov	r3, r7
 800f884:	f7f0 feb8 	bl	80005f8 <__aeabi_dmul>
 800f888:	a36d      	add	r3, pc, #436	@ (adr r3, 800fa40 <atan+0x2b8>)
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	f7f0 fcfd 	bl	800028c <__adddf3>
 800f892:	4632      	mov	r2, r6
 800f894:	463b      	mov	r3, r7
 800f896:	f7f0 feaf 	bl	80005f8 <__aeabi_dmul>
 800f89a:	a36b      	add	r3, pc, #428	@ (adr r3, 800fa48 <atan+0x2c0>)
 800f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a0:	f7f0 fcf4 	bl	800028c <__adddf3>
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	463b      	mov	r3, r7
 800f8a8:	f7f0 fea6 	bl	80005f8 <__aeabi_dmul>
 800f8ac:	a368      	add	r3, pc, #416	@ (adr r3, 800fa50 <atan+0x2c8>)
 800f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b2:	f7f0 fceb 	bl	800028c <__adddf3>
 800f8b6:	4632      	mov	r2, r6
 800f8b8:	463b      	mov	r3, r7
 800f8ba:	f7f0 fe9d 	bl	80005f8 <__aeabi_dmul>
 800f8be:	a366      	add	r3, pc, #408	@ (adr r3, 800fa58 <atan+0x2d0>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	f7f0 fce2 	bl	800028c <__adddf3>
 800f8c8:	4642      	mov	r2, r8
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	f7f0 fe94 	bl	80005f8 <__aeabi_dmul>
 800f8d0:	a363      	add	r3, pc, #396	@ (adr r3, 800fa60 <atan+0x2d8>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	4680      	mov	r8, r0
 800f8d8:	4689      	mov	r9, r1
 800f8da:	4630      	mov	r0, r6
 800f8dc:	4639      	mov	r1, r7
 800f8de:	f7f0 fe8b 	bl	80005f8 <__aeabi_dmul>
 800f8e2:	a361      	add	r3, pc, #388	@ (adr r3, 800fa68 <atan+0x2e0>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fcce 	bl	8000288 <__aeabi_dsub>
 800f8ec:	4632      	mov	r2, r6
 800f8ee:	463b      	mov	r3, r7
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	a35e      	add	r3, pc, #376	@ (adr r3, 800fa70 <atan+0x2e8>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fcc5 	bl	8000288 <__aeabi_dsub>
 800f8fe:	4632      	mov	r2, r6
 800f900:	463b      	mov	r3, r7
 800f902:	f7f0 fe79 	bl	80005f8 <__aeabi_dmul>
 800f906:	a35c      	add	r3, pc, #368	@ (adr r3, 800fa78 <atan+0x2f0>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f7f0 fcbc 	bl	8000288 <__aeabi_dsub>
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	f7f0 fe70 	bl	80005f8 <__aeabi_dmul>
 800f918:	a359      	add	r3, pc, #356	@ (adr r3, 800fa80 <atan+0x2f8>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fcb3 	bl	8000288 <__aeabi_dsub>
 800f922:	4632      	mov	r2, r6
 800f924:	463b      	mov	r3, r7
 800f926:	f7f0 fe67 	bl	80005f8 <__aeabi_dmul>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4640      	mov	r0, r8
 800f930:	4649      	mov	r1, r9
 800f932:	f7f0 fcab 	bl	800028c <__adddf3>
 800f936:	4622      	mov	r2, r4
 800f938:	462b      	mov	r3, r5
 800f93a:	f7f0 fe5d 	bl	80005f8 <__aeabi_dmul>
 800f93e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f942:	4602      	mov	r2, r0
 800f944:	460b      	mov	r3, r1
 800f946:	d148      	bne.n	800f9da <atan+0x252>
 800f948:	4620      	mov	r0, r4
 800f94a:	4629      	mov	r1, r5
 800f94c:	f7f0 fc9c 	bl	8000288 <__aeabi_dsub>
 800f950:	e72f      	b.n	800f7b2 <atan+0x2a>
 800f952:	4b52      	ldr	r3, [pc, #328]	@ (800fa9c <atan+0x314>)
 800f954:	2200      	movs	r2, #0
 800f956:	4620      	mov	r0, r4
 800f958:	4629      	mov	r1, r5
 800f95a:	f7f0 fc95 	bl	8000288 <__aeabi_dsub>
 800f95e:	4b4f      	ldr	r3, [pc, #316]	@ (800fa9c <atan+0x314>)
 800f960:	4606      	mov	r6, r0
 800f962:	460f      	mov	r7, r1
 800f964:	2200      	movs	r2, #0
 800f966:	4620      	mov	r0, r4
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f0 fc8f 	bl	800028c <__adddf3>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4630      	mov	r0, r6
 800f974:	4639      	mov	r1, r7
 800f976:	f7f0 ff69 	bl	800084c <__aeabi_ddiv>
 800f97a:	f04f 0a01 	mov.w	sl, #1
 800f97e:	4604      	mov	r4, r0
 800f980:	460d      	mov	r5, r1
 800f982:	e765      	b.n	800f850 <atan+0xc8>
 800f984:	4b47      	ldr	r3, [pc, #284]	@ (800faa4 <atan+0x31c>)
 800f986:	429e      	cmp	r6, r3
 800f988:	d21c      	bcs.n	800f9c4 <atan+0x23c>
 800f98a:	4b47      	ldr	r3, [pc, #284]	@ (800faa8 <atan+0x320>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	4620      	mov	r0, r4
 800f990:	4629      	mov	r1, r5
 800f992:	f7f0 fc79 	bl	8000288 <__aeabi_dsub>
 800f996:	4b44      	ldr	r3, [pc, #272]	@ (800faa8 <atan+0x320>)
 800f998:	4606      	mov	r6, r0
 800f99a:	460f      	mov	r7, r1
 800f99c:	2200      	movs	r2, #0
 800f99e:	4620      	mov	r0, r4
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	f7f0 fe29 	bl	80005f8 <__aeabi_dmul>
 800f9a6:	4b3d      	ldr	r3, [pc, #244]	@ (800fa9c <atan+0x314>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f7f0 fc6f 	bl	800028c <__adddf3>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f0 ff49 	bl	800084c <__aeabi_ddiv>
 800f9ba:	f04f 0a02 	mov.w	sl, #2
 800f9be:	4604      	mov	r4, r0
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	e745      	b.n	800f850 <atan+0xc8>
 800f9c4:	4622      	mov	r2, r4
 800f9c6:	462b      	mov	r3, r5
 800f9c8:	4938      	ldr	r1, [pc, #224]	@ (800faac <atan+0x324>)
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	f7f0 ff3e 	bl	800084c <__aeabi_ddiv>
 800f9d0:	f04f 0a03 	mov.w	sl, #3
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	460d      	mov	r5, r1
 800f9d8:	e73a      	b.n	800f850 <atan+0xc8>
 800f9da:	4b35      	ldr	r3, [pc, #212]	@ (800fab0 <atan+0x328>)
 800f9dc:	4e35      	ldr	r6, [pc, #212]	@ (800fab4 <atan+0x32c>)
 800f9de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	f7f0 fc4f 	bl	8000288 <__aeabi_dsub>
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	462b      	mov	r3, r5
 800f9ee:	f7f0 fc4b 	bl	8000288 <__aeabi_dsub>
 800f9f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f9f6:	4602      	mov	r2, r0
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f9fe:	f7f0 fc43 	bl	8000288 <__aeabi_dsub>
 800fa02:	f1bb 0f00 	cmp.w	fp, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	460d      	mov	r5, r1
 800fa0a:	f6bf aedc 	bge.w	800f7c6 <atan+0x3e>
 800fa0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa12:	461d      	mov	r5, r3
 800fa14:	e6d7      	b.n	800f7c6 <atan+0x3e>
 800fa16:	a51c      	add	r5, pc, #112	@ (adr r5, 800fa88 <atan+0x300>)
 800fa18:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa1c:	e6d3      	b.n	800f7c6 <atan+0x3e>
 800fa1e:	bf00      	nop
 800fa20:	54442d18 	.word	0x54442d18
 800fa24:	3ff921fb 	.word	0x3ff921fb
 800fa28:	8800759c 	.word	0x8800759c
 800fa2c:	7e37e43c 	.word	0x7e37e43c
 800fa30:	e322da11 	.word	0xe322da11
 800fa34:	3f90ad3a 	.word	0x3f90ad3a
 800fa38:	24760deb 	.word	0x24760deb
 800fa3c:	3fa97b4b 	.word	0x3fa97b4b
 800fa40:	a0d03d51 	.word	0xa0d03d51
 800fa44:	3fb10d66 	.word	0x3fb10d66
 800fa48:	c54c206e 	.word	0xc54c206e
 800fa4c:	3fb745cd 	.word	0x3fb745cd
 800fa50:	920083ff 	.word	0x920083ff
 800fa54:	3fc24924 	.word	0x3fc24924
 800fa58:	5555550d 	.word	0x5555550d
 800fa5c:	3fd55555 	.word	0x3fd55555
 800fa60:	2c6a6c2f 	.word	0x2c6a6c2f
 800fa64:	bfa2b444 	.word	0xbfa2b444
 800fa68:	52defd9a 	.word	0x52defd9a
 800fa6c:	3fadde2d 	.word	0x3fadde2d
 800fa70:	af749a6d 	.word	0xaf749a6d
 800fa74:	3fb3b0f2 	.word	0x3fb3b0f2
 800fa78:	fe231671 	.word	0xfe231671
 800fa7c:	3fbc71c6 	.word	0x3fbc71c6
 800fa80:	9998ebc4 	.word	0x9998ebc4
 800fa84:	3fc99999 	.word	0x3fc99999
 800fa88:	54442d18 	.word	0x54442d18
 800fa8c:	bff921fb 	.word	0xbff921fb
 800fa90:	440fffff 	.word	0x440fffff
 800fa94:	7ff00000 	.word	0x7ff00000
 800fa98:	3fdbffff 	.word	0x3fdbffff
 800fa9c:	3ff00000 	.word	0x3ff00000
 800faa0:	3ff2ffff 	.word	0x3ff2ffff
 800faa4:	40038000 	.word	0x40038000
 800faa8:	3ff80000 	.word	0x3ff80000
 800faac:	bff00000 	.word	0xbff00000
 800fab0:	08011400 	.word	0x08011400
 800fab4:	08011420 	.word	0x08011420

0800fab8 <__ieee754_sqrt>:
 800fab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	4a66      	ldr	r2, [pc, #408]	@ (800fc58 <__ieee754_sqrt+0x1a0>)
 800fabe:	ec55 4b10 	vmov	r4, r5, d0
 800fac2:	43aa      	bics	r2, r5
 800fac4:	462b      	mov	r3, r5
 800fac6:	4621      	mov	r1, r4
 800fac8:	d110      	bne.n	800faec <__ieee754_sqrt+0x34>
 800faca:	4622      	mov	r2, r4
 800facc:	4620      	mov	r0, r4
 800face:	4629      	mov	r1, r5
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4620      	mov	r0, r4
 800fada:	4629      	mov	r1, r5
 800fadc:	f7f0 fbd6 	bl	800028c <__adddf3>
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	ec45 4b10 	vmov	d0, r4, r5
 800fae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faec:	2d00      	cmp	r5, #0
 800faee:	dc0e      	bgt.n	800fb0e <__ieee754_sqrt+0x56>
 800faf0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800faf4:	4322      	orrs	r2, r4
 800faf6:	d0f5      	beq.n	800fae4 <__ieee754_sqrt+0x2c>
 800faf8:	b19d      	cbz	r5, 800fb22 <__ieee754_sqrt+0x6a>
 800fafa:	4622      	mov	r2, r4
 800fafc:	4620      	mov	r0, r4
 800fafe:	4629      	mov	r1, r5
 800fb00:	f7f0 fbc2 	bl	8000288 <__aeabi_dsub>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	f7f0 fea0 	bl	800084c <__aeabi_ddiv>
 800fb0c:	e7e8      	b.n	800fae0 <__ieee754_sqrt+0x28>
 800fb0e:	152a      	asrs	r2, r5, #20
 800fb10:	d115      	bne.n	800fb3e <__ieee754_sqrt+0x86>
 800fb12:	2000      	movs	r0, #0
 800fb14:	e009      	b.n	800fb2a <__ieee754_sqrt+0x72>
 800fb16:	0acb      	lsrs	r3, r1, #11
 800fb18:	3a15      	subs	r2, #21
 800fb1a:	0549      	lsls	r1, r1, #21
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d0fa      	beq.n	800fb16 <__ieee754_sqrt+0x5e>
 800fb20:	e7f7      	b.n	800fb12 <__ieee754_sqrt+0x5a>
 800fb22:	462a      	mov	r2, r5
 800fb24:	e7fa      	b.n	800fb1c <__ieee754_sqrt+0x64>
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	3001      	adds	r0, #1
 800fb2a:	02dc      	lsls	r4, r3, #11
 800fb2c:	d5fb      	bpl.n	800fb26 <__ieee754_sqrt+0x6e>
 800fb2e:	1e44      	subs	r4, r0, #1
 800fb30:	1b12      	subs	r2, r2, r4
 800fb32:	f1c0 0420 	rsb	r4, r0, #32
 800fb36:	fa21 f404 	lsr.w	r4, r1, r4
 800fb3a:	4323      	orrs	r3, r4
 800fb3c:	4081      	lsls	r1, r0
 800fb3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb42:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800fb46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb4a:	07d2      	lsls	r2, r2, #31
 800fb4c:	bf5c      	itt	pl
 800fb4e:	005b      	lslpl	r3, r3, #1
 800fb50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fb54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb58:	bf58      	it	pl
 800fb5a:	0049      	lslpl	r1, r1, #1
 800fb5c:	2600      	movs	r6, #0
 800fb5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fb62:	107f      	asrs	r7, r7, #1
 800fb64:	0049      	lsls	r1, r1, #1
 800fb66:	2016      	movs	r0, #22
 800fb68:	4632      	mov	r2, r6
 800fb6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fb6e:	1915      	adds	r5, r2, r4
 800fb70:	429d      	cmp	r5, r3
 800fb72:	bfde      	ittt	le
 800fb74:	192a      	addle	r2, r5, r4
 800fb76:	1b5b      	suble	r3, r3, r5
 800fb78:	1936      	addle	r6, r6, r4
 800fb7a:	0fcd      	lsrs	r5, r1, #31
 800fb7c:	3801      	subs	r0, #1
 800fb7e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800fb82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fb86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fb8a:	d1f0      	bne.n	800fb6e <__ieee754_sqrt+0xb6>
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	2420      	movs	r4, #32
 800fb90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fb94:	4293      	cmp	r3, r2
 800fb96:	eb0c 0e00 	add.w	lr, ip, r0
 800fb9a:	dc02      	bgt.n	800fba2 <__ieee754_sqrt+0xea>
 800fb9c:	d113      	bne.n	800fbc6 <__ieee754_sqrt+0x10e>
 800fb9e:	458e      	cmp	lr, r1
 800fba0:	d811      	bhi.n	800fbc6 <__ieee754_sqrt+0x10e>
 800fba2:	f1be 0f00 	cmp.w	lr, #0
 800fba6:	eb0e 000c 	add.w	r0, lr, ip
 800fbaa:	da3f      	bge.n	800fc2c <__ieee754_sqrt+0x174>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	db3d      	blt.n	800fc2c <__ieee754_sqrt+0x174>
 800fbb0:	f102 0801 	add.w	r8, r2, #1
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	458e      	cmp	lr, r1
 800fbb8:	bf88      	it	hi
 800fbba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fbbe:	eba1 010e 	sub.w	r1, r1, lr
 800fbc2:	4465      	add	r5, ip
 800fbc4:	4642      	mov	r2, r8
 800fbc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fbca:	3c01      	subs	r4, #1
 800fbcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fbd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fbd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fbd8:	d1dc      	bne.n	800fb94 <__ieee754_sqrt+0xdc>
 800fbda:	4319      	orrs	r1, r3
 800fbdc:	d01b      	beq.n	800fc16 <__ieee754_sqrt+0x15e>
 800fbde:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800fc5c <__ieee754_sqrt+0x1a4>
 800fbe2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800fc60 <__ieee754_sqrt+0x1a8>
 800fbe6:	e9da 0100 	ldrd	r0, r1, [sl]
 800fbea:	e9db 2300 	ldrd	r2, r3, [fp]
 800fbee:	f7f0 fb4b 	bl	8000288 <__aeabi_dsub>
 800fbf2:	e9da 8900 	ldrd	r8, r9, [sl]
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	4640      	mov	r0, r8
 800fbfc:	4649      	mov	r1, r9
 800fbfe:	f7f0 ff77 	bl	8000af0 <__aeabi_dcmple>
 800fc02:	b140      	cbz	r0, 800fc16 <__ieee754_sqrt+0x15e>
 800fc04:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fc08:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc0c:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc10:	d10e      	bne.n	800fc30 <__ieee754_sqrt+0x178>
 800fc12:	3601      	adds	r6, #1
 800fc14:	4625      	mov	r5, r4
 800fc16:	1073      	asrs	r3, r6, #1
 800fc18:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800fc1c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800fc20:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800fc24:	086b      	lsrs	r3, r5, #1
 800fc26:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800fc2a:	e759      	b.n	800fae0 <__ieee754_sqrt+0x28>
 800fc2c:	4690      	mov	r8, r2
 800fc2e:	e7c1      	b.n	800fbb4 <__ieee754_sqrt+0xfc>
 800fc30:	f7f0 fb2c 	bl	800028c <__adddf3>
 800fc34:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	4640      	mov	r0, r8
 800fc3e:	4649      	mov	r1, r9
 800fc40:	f7f0 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800fc44:	b120      	cbz	r0, 800fc50 <__ieee754_sqrt+0x198>
 800fc46:	1cab      	adds	r3, r5, #2
 800fc48:	bf08      	it	eq
 800fc4a:	3601      	addeq	r6, #1
 800fc4c:	3502      	adds	r5, #2
 800fc4e:	e7e2      	b.n	800fc16 <__ieee754_sqrt+0x15e>
 800fc50:	1c6b      	adds	r3, r5, #1
 800fc52:	f023 0501 	bic.w	r5, r3, #1
 800fc56:	e7de      	b.n	800fc16 <__ieee754_sqrt+0x15e>
 800fc58:	7ff00000 	.word	0x7ff00000
 800fc5c:	08011448 	.word	0x08011448
 800fc60:	08011440 	.word	0x08011440

0800fc64 <_init>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	bf00      	nop
 800fc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6a:	bc08      	pop	{r3}
 800fc6c:	469e      	mov	lr, r3
 800fc6e:	4770      	bx	lr

0800fc70 <_fini>:
 800fc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc72:	bf00      	nop
 800fc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc76:	bc08      	pop	{r3}
 800fc78:	469e      	mov	lr, r3
 800fc7a:	4770      	bx	lr
